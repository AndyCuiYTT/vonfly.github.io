<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编程、人生</title>
  <subtitle>前端 | 后台 | linux</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vonfly.github.io/"/>
  <updated>2017-06-01T13:34:50.332Z</updated>
  <id>https://vonfly.github.io/</id>
  
  <author>
    <name>阿东</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows下安装yii</title>
    <link href="https://vonfly.github.io/2017/06/01/yii-install/"/>
    <id>https://vonfly.github.io/2017/06/01/yii-install/</id>
    <published>2017-06-01T12:49:28.000Z</published>
    <updated>2017-06-01T13:34:50.332Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Composer 安装<br><a id="more"></a></p>
<h3 id="Packagist-Composer中国全量镜像"><a href="#Packagist-Composer中国全量镜像" class="headerlink" title="Packagist / Composer中国全量镜像"></a>Packagist / Composer中国全量镜像</h3><h4 id="先安装-Composer"><a href="#先安装-Composer" class="headerlink" title="先安装 Composer"></a>先安装 Composer</h4><p>安装前请务必确保已经正确安装了 PHP。打开命令行窗口并执行 php -v 查看是否正确输出版本号。<br>打开命令行并依次执行下列命令安装最新版本的 Composer：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r &quot;copy(&apos;https://install.phpcomposer.com/installer&apos;, &apos;composer-setup.php&apos;);&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php composer-setup.php</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r &quot;unlink(&apos;composer-setup.php&apos;);&quot;</div></pre></td></tr></table></figure>
<p>说明：<br>执行第一条命令下载下来的 composer-setup.php 脚本将简单地检测 php.ini 中的参数设置，如果某些参数未正确设置则会给出警告；然后下载最新版本的 composer.phar 文件到当前目录。</p>
<p>上述 3 条命令的作用依次是：</p>
<p>下载安装脚本 － composer-setup.php － 到当前目录。<br>执行安装过程。<br>删除安装脚本。</p>
<h5 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h5><p>全局安装是将 Composer 安装到系统环境变量 PATH 所包含的路径下面，然后就能够在命令行窗口中直接执行 composer 命令了。</p>
<h6 id="Mac-或-Linux-系统："><a href="#Mac-或-Linux-系统：" class="headerlink" title="Mac 或 Linux 系统："></a>Mac 或 Linux 系统：</h6><p>打开命令行窗口并执行如下命令将前面下载的 composer.phar 文件移动到 /usr/local/bin/ 目录下面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># sudo mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure>
<h6 id="Windows-系统："><a href="#Windows-系统：" class="headerlink" title="Windows 系统："></a>Windows 系统：</h6><p>1、找到并进入 PHP 的安装目录（和你在命令行中执行的 php 指令应该是同一套 PHP）。<br>2、将 composer.phar 复制到 PHP 的安装目录下面，也就是和 php.exe 在同一级目录。<br>3、在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@php &quot;%~dp0composer.phar&quot; %*</div></pre></td></tr></table></figure>
<p>最后重新打开一个命令行窗口试一试执行 composer –version 看看是否正确输出版本号。<br>如图所示：<br><img src="http://olixffhc0.bkt.clouddn.com/yii-install1.PNG" alt="安装成功图片"></p>
<p>提示：不要忘了经常执行 composer selfupdate 以保持 Composer 一直是最新版本哦！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer selfupdate		//命令行中执行</div></pre></td></tr></table></figure>
<h4 id="Packagist-镜像使用方法"><a href="#Packagist-镜像使用方法" class="headerlink" title="Packagist 镜像使用方法"></a>Packagist 镜像使用方法</h4><p>系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“方法一”<br>单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“方法二”</p>
<h5 id="方法一：-修改-composer-的全局配置文件（推荐方式）"><a href="#方法一：-修改-composer-的全局配置文件（推荐方式）" class="headerlink" title="方法一： 修改 composer 的全局配置文件（推荐方式）"></a>方法一： 修改 composer 的全局配置文件（推荐方式）</h5><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>
<h5 id="方法二：-修改当前项目的-composer-json-配置文件："><a href="#方法二：-修改当前项目的-composer-json-配置文件：" class="headerlink" title="方法二： 修改当前项目的 composer.json 配置文件："></a>方法二： 修改当前项目的 composer.json 配置文件：</h5><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer config repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>
<p>上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：<br>“repositories”: {<br>    “packagist”: {<br>        “type”: “composer”,<br>        “url”: “<a href="https://packagist.phpcomposer.com" target="_blank" rel="external">https://packagist.phpcomposer.com</a>“<br>    }<br>}</p>
<h5 id="镜像原理："><a href="#镜像原理：" class="headerlink" title="镜像原理："></a>镜像原理：</h5><p>一般情况下，安装包的数据（主要是 zip 文件）一般是从 github.com 上下载的，安装包的元数据是从 packagist.org 上下载的。</p>
<p>然而，由于众所周知的原因，国外的网站连接速度很慢，并且随时可能被“墙”甚至“不存在”。</p>
<p>“Packagist 中国全量镜像”所做的就是缓存所有安装包和元数据到国内的机房并通过国内的 CDN 进行加速，这样就不必再去向国外的网站发起请求，从而达到加速 composer install 以及 composer update 的过程，并且更加快速、稳定。因此，即使 packagist.org、github.com 发生故障（主要是连接速度太慢和被墙），你仍然可以下载、更新安装包。</p>
<h3 id="开始使用Composer-安装yii"><a href="#开始使用Composer-安装yii" class="headerlink" title="开始使用Composer 安装yii"></a>开始使用Composer 安装yii</h3><p>打开命令行，切换到一个可通过 Web 访问的目录（如我的是d:wamp/www），执行如下命令即可安装 Yii ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">composer global require &quot;fxp/composer-asset-plugin:^1.2.0&quot;</div><div class="line"></div><div class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic yiishop</div></pre></td></tr></table></figure>
<p>第一条命令安装 Composer asset plugin， 它是通过 Composer 管理 bower 和 npm 包所必须的，此命令全局生效，一劳永逸。 第二条命令会将 Yii 安装在名为 yiishop 的目录中。如果你想使用其它目录名称，你可以选择其他目录名称。</p>
<p>注意: 在安装过程中 Composer 可能会询问你 GitHub 账户的认证信息，因为可能在使用中超过了 GitHub API （对匿名用户的）使用限制。因为 Composer 需要为所有扩展包从 GitHub 中获取大量信息，所以超限非常正常。（译注：也意味着作为程序猿没有 GitHub 账号，就真不能愉快地玩耍了）登陆 GitHub 之后可以得到更高的 API 限额，这样 Composer 才能正常运行。</p>
<p>如下图所示：<br><img src="http://olixffhc0.bkt.clouddn.com/yii-install2.PNG" alt="需要github token"></p>
<p>我们需要提供一个githtb token 供Composer检索使用<br>具体操作：<br>进入 <a href="https://github.com/settings/tokens" target="_blank" rel="external">https://github.com/settings/tokens</a> 点击 「Generate new token」 新建一个 Token，选择默认新建就行，然后就会得到一个 Token，然后输入这个值就 OK 了。</p>
<p>最后等待就可以了，安装成功如下图：<br><img src="http://olixffhc0.bkt.clouddn.com/yii-install4.PNG" alt="安装yii成功"></p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p><a href="http://www.yiichina.com/doc/guide/2.0/start-installation#installing-via-composer" target="_blank" rel="external">yii中文社区</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过 Composer 安装&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>memcache 内存缓存技术</title>
    <link href="https://vonfly.github.io/2017/05/05/memcache/"/>
    <id>https://vonfly.github.io/2017/05/05/memcache/</id>
    <published>2017-05-05T07:32:54.000Z</published>
    <updated>2017-05-18T02:15:59.959Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="缓存技术" scheme="https://vonfly.github.io/categories/%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>coreseek中文检索引擎</title>
    <link href="https://vonfly.github.io/2017/05/04/coreseek/"/>
    <id>https://vonfly.github.io/2017/05/04/coreseek/</id>
    <published>2017-05-04T06:32:27.000Z</published>
    <updated>2017-05-21T02:18:02.172Z</updated>
    
    <content type="html"><![CDATA[<p>在 Centos6.5 上编译安装coreseek以及配置<br><a id="more"></a></p>
<h2 id="下载对应安装包，并解压"><a href="#下载对应安装包，并解压" class="headerlink" title="下载对应安装包，并解压"></a>下载对应安装包，并解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># tar zxvf coreseek-3.2.14.tar.gz</div></pre></td></tr></table></figure>
<h2 id="先进入mmseg-3-2-14目录安装中文分词"><a href="#先进入mmseg-3-2-14目录安装中文分词" class="headerlink" title="先进入mmseg-3.2.14目录安装中文分词"></a>先进入mmseg-3.2.14目录安装中文分词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># ls</div><div class="line"># cd coreseek-3.2.14/mmseg-3.2.14/</div><div class="line">//检测环境配置是否会报错</div><div class="line"># ./configure --prefix=/usr/local/mmseg</div></pre></td></tr></table></figure>
<p>编译过程中报了一个config.status:error:cannot find input file:src/Makeefile.in这个的错误，然后运行以下指令再次编译就能通过了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># aclocal</div><div class="line"># libtoolize --force</div><div class="line"># automake --add-missing</div><div class="line"># autoconf</div><div class="line"># autoheader</div><div class="line"># make clean</div><div class="line"># ./configure --prefix=/usr/local/mmseg</div><div class="line">//开始编译</div><div class="line"># make</div><div class="line">//进行安装</div><div class="line"># make install</div></pre></td></tr></table></figure>
<p>到这里就安装完了mmseg</p>
<h2 id="先进入csft-3-2-14目录安装csft"><a href="#先进入csft-3-2-14目录安装csft" class="headerlink" title="先进入csft-3.2.14目录安装csft"></a>先进入csft-3.2.14目录安装csft</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># ls</div><div class="line"># cd csft-3.2.14/</div><div class="line">//检测环境配置是否会报错</div><div class="line"># ./configure --prefix=/usr/local/coreseek --with-mysql=/usr/local/mysql --with-mmseg=/usr/local/mmseg --with-mmseg-includes=/usr/local/mmseg/include/mmseg/ --with-mmseg-libs=/usr/local/mmseg/lib/</div><div class="line"></div><div class="line"># make</div><div class="line"># make install</div></pre></td></tr></table></figure>
<p>到这里就安装完了csft</p>
<h2 id="配置coreseek"><a href="#配置coreseek" class="headerlink" title="配置coreseek"></a>配置coreseek</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//进入配置目录</div><div class="line"># cd /usr/local/coreseek/etc</div><div class="line">//复制一份配置文件并改名为csft.conf，因为coreseek默认加载的配置文件是csft.conf</div><div class="line"># cp sphinx.conf.dist csft.conf</div></pre></td></tr></table></figure>
<p>vim csft.conf，修改为：<br>如下图：</p>
<h3 id="创建全文索引"><a href="#创建全文索引" class="headerlink" title="创建全文索引"></a>创建全文索引</h3><p>配置文件没有错误了，就可以开始创建全文索引了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/coreseek/bin/indexer --all</div></pre></td></tr></table></figure>
<h2 id="用PHP连接使用Sphinx"><a href="#用PHP连接使用Sphinx" class="headerlink" title="用PHP连接使用Sphinx"></a>用PHP连接使用Sphinx</h2><p>1、先到<a href="http://pecl.php.net/package/sphinx下载所需要的扩展库" target="_blank" rel="external">http://pecl.php.net/package/sphinx下载所需要的扩展库</a><br>2、解压文件和进入解压目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># tar zxvf sphinx-1.3.3.tgz</div><div class="line"># cd sphinx-1.3.3</div></pre></td></tr></table></figure>
<p>3、调用phpize，生成configure</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//注意此处是你服务器上php安装的地址</div><div class="line"># /usr/local/php/bin/phpize</div></pre></td></tr></table></figure>
<p>4、检测环境配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ./configure --with-php-config=/usr/local/php/bin/php-config --with-sphinx</div></pre></td></tr></table></figure>
<p>报错，如下图：<br><img src="http://olixffhc0.bkt.clouddn.com/shhinx.jpg" alt="报错图片"><br>5、进入以下目录(之前coreseek-3.2.14的解压目录)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src/coreseek-3.2.14/csft-3.2.14/api/libsphinxclient</div><div class="line"># ./configure</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>6、重新到sphinx-1.3.3目录下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src/sphinx-1.3.3</div><div class="line"># ./configure --with-php-config=/usr/local/php/bin/php-config --with-sphinx</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>执行结果如下图：<br><img src="http://olixffhc0.bkt.clouddn.com/shhinx1.jpg" alt="成功"><br>7、修改php下php.ini文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># vim /usr/local/php/etc/php.ini</div></pre></td></tr></table></figure>
<p>…….<br>; For example, on Windows:<br>;<br>;   extension=msql.dll<br>;<br>; … or under UNIX:<br>;<br>;   extension=msql.so<br>extension=sphinx.so     //添加如下这行</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Centos6.5 上编译安装coreseek以及配置&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://vonfly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>mongodb-php结合开发</title>
    <link href="https://vonfly.github.io/2017/05/03/mongodb-php/"/>
    <id>https://vonfly.github.io/2017/05/03/mongodb-php/</id>
    <published>2017-05-03T13:18:38.000Z</published>
    <updated>2017-05-16T01:12:53.370Z</updated>
    
    <content type="html"><![CDATA[<p>想要在PHP中调用mongobd需要安装mongodb的php扩展</p>
<a id="more"></a>
<h3 id="下载最新的php-mongodb扩展源码"><a href="#下载最新的php-mongodb扩展源码" class="headerlink" title="下载最新的php mongodb扩展源码"></a>下载最新的php mongodb扩展源码</h3><p><a href="http://pecl.php.net/package/mongo" target="_blank" rel="external">http://pecl.php.net/package/mongo</a></p>
<h3 id="把扩展编译到php中"><a href="#把扩展编译到php中" class="headerlink" title="把扩展编译到php中"></a>把扩展编译到php中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//先解压文件</div><div class="line"># tar xzf mongo-1.2.6.tgz</div><div class="line">//进入解压后的目录</div><div class="line"># cd mongo-1.2.6</div><div class="line">//运行phpize来准备编译扩展环境</div><div class="line"># /usr/local/php/bin/phpize</div><div class="line"></div><div class="line">//查看编译参数</div><div class="line"># ./configure -h</div><div class="line">//开始编译(--with-php-config参数是告诉配置脚本php-cofig这个程序的路径)</div><div class="line"># ./configure --with-php-config=/usr/local/php/bin/php-config --enable-mongo</div><div class="line">//安装</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>//打开配置文件php.ini，把mongodb模块打开（即增加extension=mongo.so）<br>vim /usr/local/php/etc/php.ini<br>….<br>extension=msql.so<br>extension=mongo.so</p>
<p>接下来重启apache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/apache2/bin/apachect1 restart</div></pre></td></tr></table></figure>
<p>最后查看php是否已经支持mongodb</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/apache2/htdocs/</div></pre></td></tr></table></figure>
<p>vim phpinfo.php<br>&lt;?php<br>phpinfo();<br>最后浏览器访问该页面，搜索mongo，看是否有</p>
<h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>在php的mongo扩展中，提供了4类接口(对象)：<br>1、针对mongodb连接的操作：Mongo<br>2、针对mongodb中数据库的操作：MongoDB<br>3、针对mongodb中collection的操作：MongoCollection<br>4、针对查询结果集的操作：MongoCursor</p>
<h4 id="PHP连接mongodb数据库"><a href="#PHP连接mongodb数据库" class="headerlink" title="PHP连接mongodb数据库"></a>PHP连接mongodb数据库</h4><p>文件conn.php的内容：<br>&lt;?php<br>$conn = new Mongo(‘mongodb://test1:123@localhost:27017/test’);<br>$db = $conn-&gt;test;<br>?&gt;</p>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>&lt;?php<br>include “conn.php”;<br>$c1 = $db-&gt;c1;<br>根据地址栏传过来_id查询数据<br>//db.c1.find({_id:ObjectId(“dfd1dfjfkee”)});<br>$oid = $_GET[‘oid’];<br>$objectId = new MongoId($oid);<br>$arr = array(‘_id’=&gt;$objectId);<br>$rs = $c1-&gt;find($arr);<br>var_dump($rs);<br>$conn-&gt;close();    //关闭连接</p>
<h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><p>&lt;?php<br>include “conn.php”;<br>$c1 = $db-&gt;c1;<br>//db.c1.insert({name:”user1000”});<br>$arr = array(‘name’=&gt;’user1000’);<br>if($c1-&gt;insert($arr)){<br>    echo “插入成功！”;<br>}else{<br>    echo “插入失败！”;<br>}<br>$conn-&gt;close();    //关闭连接</p>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>&lt;?php<br>include “conn.php”;<br>$c1 = $db-&gt;c1;<br>//db.c1.remove({name:”user1000”});<br>$arr = array(‘name’=&gt;’user1000’);<br>if($c1-&gt;remove($arr)){<br>    echo “删除成功！”;<br>}else{<br>    echo “删除失败！”;<br>}<br>$conn-&gt;close();    //关闭连接</p>
<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>&lt;?php<br>include ‘conn.php’;<br>$c1 = $db-&gt;c1;<br>//db.c1.update({name:”user1”}, {$set:{name:”user100”,sex:1}});<br>$sarr = array(‘name’=&gt;’user1’);<br>$darr = array(‘$set’=&gt;array(‘name’=&gt;’user100’, ‘sex’=&gt;1));<br>$opts = array(‘upsert’=&gt;0, ‘multiple’=&gt;1);<br>if($c1-&gt;update($sarr, $darr, $opts)){<br>    echo “修改成功！”;<br>}else{<br>    echo “修改失败！”;<br>}<br>$conn-&gt;close();    //关闭连接</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要在PHP中调用mongobd需要安装mongodb的php扩展&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://vonfly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
      <category term="php" scheme="https://vonfly.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据库一些简单操作</title>
    <link href="https://vonfly.github.io/2017/05/02/mongodb-operation/"/>
    <id>https://vonfly.github.io/2017/05/02/mongodb-operation/</id>
    <published>2017-05-02T15:13:18.000Z</published>
    <updated>2017-05-16T01:08:11.585Z</updated>
    
    <content type="html"><![CDATA[<p>mongodb一些基本操作<br><a id="more"></a></p>
<h2 id="进入-登录-客户端操作"><a href="#进入-登录-客户端操作" class="headerlink" title="进入(登录)客户端操作"></a>进入(登录)客户端操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/mongodb/bin/mongo</div></pre></td></tr></table></figure>
<h3 id="控制台-客户端-中的基本操作命令"><a href="#控制台-客户端-中的基本操作命令" class="headerlink" title="控制台(客户端)中的基本操作命令"></a>控制台(客户端)中的基本操作命令</h3><p>切换数据库：use test;<br>显式创建数据库：db.createCollection(“a1”);<br>查看当前操作的数据库：db;<br>查看用户列表：db.system.users.find();<br>查看所有用户：show users;<br>查看所有数据库：show dbs;<br>查看所有集合：show collections;<br>删除当前数据库：db.dropDatabase();<br>删除集合：db.user.drop();    //删除user集合<br>想知道mongodb支持哪些命令：help;<br>想知道当前数据库支持哪些方法：db.help();<br>想知道当前集合支持哪些方法：db.user.help();    //查看user集合支持的方法<br>终端清屏：cls</p>
<h3 id="集合的增删改查操作"><a href="#集合的增删改查操作" class="headerlink" title="集合的增删改查操作"></a>集合的增删改查操作</h3><p>查询user集合的记录<br>db.user.find();    //查询全部记录<br>db.user.find({name:”vonfly”});    //查询name为vonfly的记录<br>db.user.findOne({name:”vonfly”});    //查询name为vonfly的第一条记录</p>
<p>向user集合插入一条记录<br>db.user.insert({name:”vonfly”});</p>
<p>修改记录(把name为vonfly的修改name为test)<br>db.user.update({name:”vonfly”}, {$set: {name:”test”} });</p>
<p>删除记录<br>db.user.remove({name:”vonfly”});    //删除name为vonfly的记录<br>db.user.remove();    //删除全部记录</p>
<h3 id="增删改查的高级应用"><a href="#增删改查的高级应用" class="headerlink" title="增删改查的高级应用"></a>增删改查的高级应用</h3><h4 id="Capped-Collectioin-固定集合"><a href="#Capped-Collectioin-固定集合" class="headerlink" title="Capped Collectioin(固定集合)"></a>Capped Collectioin(固定集合)</h4><p>属性及用法<br>属性1：对固定集合进行插入速度极快<br>属性2：按照插入顺序的查询输出速度极快<br>属性3：能够在插入最新数据时，淘汰最早的数据</p>
<p>用法1：储存日志信息<br>用法2：缓存一些少量的文档</p>
<h5 id="固定集合的创建（需要显式创建）"><a href="#固定集合的创建（需要显式创建）" class="headerlink" title="固定集合的创建（需要显式创建）"></a>固定集合的创建（需要显式创建）</h5><p>//创建一个集合为vn_user的固定集合，大小为10000字节。还可以限定文档个数，加上max:100属性<br>db.createCollection(“vn_user”, {capped:true, size:10000});<br>注意：指定文档上限，必须指定大小。文档限制是在容量没满时进行淘汰，要是满了，就根据容量限制来进行淘汰</p>
<p>普通集合转换成固定集合<br>db.runCommand({converTocapped:”test”, size:10000});    //把test普通集合转换成固定集合，大小为10000字节</p>
<p>自然排序<br>固定集合文档按照插入顺序储存的，默认情况下查询就是按照插入顺序返回的，可以使用$natural调整返回顺序<br>db.my_collection.find().sort({“$natural”: 1});    //1表示默认顺序，-1则相反</p>
<p>判断是否为固定集合<br>db.test.isCapped();    //判断test集合是否为固定集合<br>db.test.stats();    //或者用此命令，对应”capped”:1就是固定集合</p>
<h4 id="GridFS大文件管理（使用mongofiles二进制程序）"><a href="#GridFS大文件管理（使用mongofiles二进制程序）" class="headerlink" title="GridFS大文件管理（使用mongofiles二进制程序）"></a>GridFS大文件管理（使用mongofiles二进制程序）</h4><p>GridFS是一种在mongodb中存储大二进制文件的机制。GridFS使用两个表来存储数据：其中files是包含数据对象；chunks是包含其他一些相关信息的二进制块。<br>使用的原因：<br>1、储存巨大的文件，比如视频、高清图片等<br>2、利用GridFS可以简化需求。<br>3、GridFS可以避免用户上传内容的文件系统出现问题<br>4、GridFS故障恢复和扩展很容易<br>5、GridFS不产生磁盘碎片</p>
<p>查看mongofiles支持对应的参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># # /usr/local/mongodb/bin/mongofiles -h</div></pre></td></tr></table></figure>
<p>上传文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/mongodb/bin/mongofiles put test.tar.gz</div></pre></td></tr></table></figure>
<p>进入客户端，查看集合，会发现多了两个集合，fs.chunks和fs.files</p>
<p>下载文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/mongodb/bin/mongofiles get test.tar.gz</div></pre></td></tr></table></figure>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>查看查询语句的执行计划(类似查看mysql语句执行所用的时间和影响的行数，目的就是要对语句进行优化，看需不需要建立索引)，使用以下语句进行查看</p>
<p>db.user.find({name:”user1”}).explain();</p>
<h4 id="建立索引（普通索引）"><a href="#建立索引（普通索引）" class="headerlink" title="建立索引（普通索引）"></a>建立索引（普通索引）</h4><p>//在user集合的name上建立索引<br>db.user.ensureIndex({name:1});    //值1表示升序建立，-1表示降序建立索引</p>
<p>注意：当系统已经有大量数据时，创建索引会非常耗时，需要在后台执行，所以要指定参数background:true<br>db.user.ensureIndex({name:1}, {background:true});</p>
<h5 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h5><p>db.user.ensureIndex({name:1}, {unique:true});</p>
<h5 id="简单查看索引"><a href="#简单查看索引" class="headerlink" title="简单查看索引"></a>简单查看索引</h5><p>db.user.getIndexKeys();</p>
<h5 id="查看索引详细信息"><a href="#查看索引详细信息" class="headerlink" title="查看索引详细信息"></a>查看索引详细信息</h5><p>db.user.getIndexes();</p>
<h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><p>//删除user集合中的所有索引<br>db.user.dropIndexes();</p>
<p>//删除user集合中的name索引<br>db.user.dropIndex({name:1});</p>
<h3 id="优化器profile-慢查询日志功能"><a href="#优化器profile-慢查询日志功能" class="headerlink" title="优化器profile(慢查询日志功能)"></a>优化器profile(慢查询日志功能)</h3><p>mongodb database profiler 是一种慢查询日志功能，可以作为我们优化数据库的依据。</p>
<h4 id="开启profile功能"><a href="#开启profile功能" class="headerlink" title="开启profile功能"></a>开启profile功能</h4><p>级别的值为：0表示不开启，1表示慢命令(默认为&gt;100ms)，2表示记录所有命令</p>
<p>方法1：启动mongodb时加上–profile=1</p>
<p>方法2：在客户端调用db.setProfilingLevel(级别)命令来实时配置</p>
<p>说明：<br>1、profile信息是保存在system.profile中。我们可以通过db.getProfilingLevel()命令来获取当前的Profile级别<br>2、profile在级别为1时会记录慢命令，默认的慢查询时间为100ms，修改默认时间有两种方法：一种是启动mongodb时加上–profile=1和–slowms=10；  第二种方式是用命令db.setProfilingLevel(1)，表示如果查询耗时超过10毫秒，就会被记录下来<br>3、数据库profiler把数据写入 system.profile 集合中，该集合是一个 capped collection 。可以用普通的MongoDB查询语句查询 system.profile 集合得到profiler的输出。</p>
<h3 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h3><p>1、创建索引，在查询条件的字段上，或者排序条件的字段上创建索引，可以提高执行效率，如db.user.ensureIndex({name:1});<br>2、限定返回结果条数，使用limit()限定返回结果集的大小，可以减少database server的资源消耗，可以减少网络传输数据量。如db.user.find().limit(10);<br>3、查询使用到的字段，不要查询所有字段。如db.user.find({}, {name:1,age:1}).sort({age:-1}).limit(10);<br>4、采用cappedcollection(固定集合)，capped Collections比普通Collections的读写效率高<br>5、采用profiling(慢查询日志功能)，profiling功能肯定是会影响效率的，但是不太严重，原因是它使用的是system.profile来记录，system.profile是一个capped collection(固定集合)，这种collection在操作上有一些限制和特点，但是效率高</p>
<h2 id="mongodb主从集群"><a href="#mongodb主从集群" class="headerlink" title="mongodb主从集群"></a>mongodb主从集群</h2><p>mongodb支持在多个机器中通过异步复制达到故障转移和实现冗余。多机器中同一时刻只有一台是用于写操作。正是由于这个情况，为mongodb提供了数据一致性的保障。担当primary(主服务器)角色的机器能把读操作分发给slave(从服务器)。</p>
<h3 id="replica-sets复制（副本集）"><a href="#replica-sets复制（副本集）" class="headerlink" title="replica sets复制（副本集）"></a>replica sets复制（副本集）</h3><p>mongodb在1.6版本开发了replica set，主要增加了故障自动切换和自动修复成员节点，各个db之间数据完全一致，最为显著的区别在于，副本集没有固定的主节点，它是整个集群选举出的一个主节点，当其不工作时变更其他节点。（简单来说就是当主服务器挂了，那么剩余从服务器会自动选举一个出来做主服务器）</p>
<h3 id="部署replica-sets（测试）"><a href="#部署replica-sets（测试）" class="headerlink" title="部署replica sets（测试）"></a>部署replica sets（测试）</h3><p>1、启动两个实例（模拟两个mongodb服务器）<br>2、创建数据文件存储路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># mkdir -p /usr/local/mongodb/data/data1/</div><div class="line"># mkdir -p /usr/local/mongodb/data/data2/</div></pre></td></tr></table></figure>
<p>3、创建日志文件路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># mkdir -p /usr/local/mongodb/log/dblogs1</div><div class="line"># mkdir -p /usr/local/mongodb/log/dblogs2</div></pre></td></tr></table></figure>
<p>4、创建key目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># mkdir -p /usr/local/mongodb/key/</div><div class="line"># cd /usr/local/mongodb/key/</div><div class="line"># touch key1</div><div class="line"># touch key2</div><div class="line"># echo &quot;123456&quot; &gt; key1</div><div class="line"># echo &quot;123456&quot; &gt; key2</div><div class="line"># chmod 600 *</div></pre></td></tr></table></figure>
<p>5、启动一个实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/mongodb/bin/mongod --replSet rs1 --keyFile=/usr/local/mongodb/key/key1 --port 200001 --dbpath=/usr/local/mongodb/data/data1/ --logpath=/usr/local/mongodb/log/dblogs1 --fork</div></pre></td></tr></table></figure>
<p>再启动一个实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/mongodb/bin/mongod --replSet rs1 --keyFile=/usr/local/mongodb/key/key2 --port 200002 --dbpath=/usr/local/mongodb/data/data2/ --logpath=/usr/local/mongodb/log/dblogs2 --fork</div></pre></td></tr></table></figure>
<p>6、配置及初始化replica set（登录一台机器进行配置）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/mongodb/bin/mongo --port 200001</div></pre></td></tr></table></figure>
<p>进入后，直接配置（直接输入）即可<br>config_rs1={<br>    _id:”rs1”,<br>    members:[<br>        {_id:0, host:”localhost:200001”, priority:1},<br>        {_id:1, host:”localhost:200002”, priority:2}<br>    ]<br>}</p>
<p>最后初始化配置<br>rs.initiate(config_rs1);</p>
<p>这样就配置好了，端口号为200002的就相当于主服务器(因为优先级priority比较大)，端口号200001就是从服务器，主服务器可以就行增删改查数据，从服务器就只能查询数据</p>
<p>登录从服务器客户端输入命令，这样才有读的权限<br>rs.slaveOk();</p>
<p>扩展：<br>查看副本集状态命令：rs.status();</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.mongoing.com/manual-zh/tutorial/insert-documents.html" target="_blank" rel="external">mongodb中文社区</a><br><a href="http://www.runoob.com/mongodb/mongodb-capped-collections.html" target="_blank" rel="external">菜鸟教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mongodb一些基本操作&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://vonfly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据库</title>
    <link href="https://vonfly.github.io/2017/05/01/mongodb/"/>
    <id>https://vonfly.github.io/2017/05/01/mongodb/</id>
    <published>2017-05-01T10:29:41.000Z</published>
    <updated>2017-05-16T00:39:30.249Z</updated>
    
    <content type="html"><![CDATA[<p>NoSQL数据库的优缺点<br>优点：简单的扩展、快速的读写、低廉的成本、灵活的数据模型<br>不足：不提供对SQL的支持、支持的特性不够丰富、现有的产品不够成熟</p>
<a id="more"></a>
<h2 id="Mongodb特性"><a href="#Mongodb特性" class="headerlink" title="Mongodb特性"></a>Mongodb特性</h2><p>mongodb的特点是高性能、易部署、易使用，存储数据非常方便，主要的特性有：<br>面向集合存储，易于存储对象类型的数据<br>模式自由<br>支持动态查询<br>支持完全索引，包含内部对象<br>支持复制和故障恢复<br>使用高效的二进制数据存储，包括大型对象（如视频等）<br>自动处理碎片，以支持云计算层次的扩展性<br>文件存储格式为BSON（一种JSON的扩展）</p>
<h2 id="mongobd体系结构"><a href="#mongobd体系结构" class="headerlink" title="mongobd体系结构"></a>mongobd体系结构</h2><p>逻辑结构关系对比<br>关系型数据库：<br>mysql数据库(database)、表(table)、记录(rows)三个层次概念组成<br>非关系型数据库：<br>mongodb数据库(database)、集合(collection)、文档对象(document)三个层次概念组成</p>
<h2 id="mongodb的安装（安装较简单，不用源码编译安装，直接拷贝bin目录到你的安装目录即可）"><a href="#mongodb的安装（安装较简单，不用源码编译安装，直接拷贝bin目录到你的安装目录即可）" class="headerlink" title="mongodb的安装（安装较简单，不用源码编译安装，直接拷贝bin目录到你的安装目录即可）"></a>mongodb的安装（安装较简单，不用源码编译安装，直接拷贝bin目录到你的安装目录即可）</h2><p>环境：Centos6.5<br>1、到<a href="http://www.mongodb.org" target="_blank" rel="external">mongodb官网</a>下载对应的安装包<br>2、解压压缩包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># tar zxvf mongodb-linux-x86_64-amazon-3.4.4.tgz</div></pre></td></tr></table></figure>
<p>3、拷贝bin目录到指定文件夹(我这里安装到/usr/local/mongodb)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd mongodb-linux-x86_64-amazon-3.4.4/</div><div class="line"># rsync -a bin /usr/local/mongodb</div></pre></td></tr></table></figure>
<p>4、进入到安装目录（/usr/local/mongodb），创建专门放置数据库的目录,记载日志文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/mongodb/</div><div class="line">//创建放置数据库的目录</div><div class="line"># mkdir data</div><div class="line">//创建记载日志文件</div><div class="line"># touch dblogs</div></pre></td></tr></table></figure>
<p>至此mongodb已经安装完毕</p>
<p>扩展：mongodb开机自启动<br>将mongodb启动项目加入rc.local保证mongodb在服务器开机时启动<br>法1：<br>vim /etc/rc.local<br>加入<br>/usr/local/mongodb/bin/mongod –dbpath=/usr/local/mongodb/data/ –logpath=/usr/local/mongodb/dblogs –fork</p>
<p>法2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># echo &quot;/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/dblogs --fork&quot; &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure>
<h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/dblogs --fork</div></pre></td></tr></table></figure>
<p>启动命令常用参数选项说明：<br>–dbpath    //指定数据库的目录<br>–auth    //用户验证<br>–port    //指定数据库的端口，默认是27017<br>–bind_ip    //绑定ip<br>–directoryperdb    //为每个bd创建一个独立子目录<br>–logpath    //指定日志存放目录<br>–logappend    //指定日志生成方式(追加/覆盖)<br>–pidfilepath    //指定进程文件路径，如果不知道，将不产生进程文件<br>–keyFile    //集群模式的关键标识<br>–journal    //启用日志<br>–nssize    //指定.ns文件的大小，单位MB，默认是16M，最大2GB<br>–maxConns    //最大的并发连接数<br>–notablescan    //不允许进行表扫描<br>–noprealloc    //关闭数据文件的预分配功能<br>–fork    //以后台Daemon形式运行服务<br>更多参数选项利用mongod –help进行查看</p>
<h3 id="关闭mongodb"><a href="#关闭mongodb" class="headerlink" title="关闭mongodb"></a>关闭mongodb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//法1</div><div class="line"># pkill mongod</div><div class="line">//法2</div><div class="line"># killall mongod</div></pre></td></tr></table></figure>
<p>最好用上面两种的一种，如果用kill -9 进程id，会重启不了mongodb，需要到data目录下把锁文件(mongod.lock)删除掉，具体操作如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/mongodb/data</div><div class="line"># rm -rf mongod.lock 	//把锁文件删除掉</div></pre></td></tr></table></figure>
<h3 id="用户授权（即登录需要用户名和密码）"><a href="#用户授权（即登录需要用户名和密码）" class="headerlink" title="用户授权（即登录需要用户名和密码）"></a>用户授权（即登录需要用户名和密码）</h3><p>1、每个mongodb实例中的数据库都有许多用户，如果启用了安全性认证后，只有数据库认证的用户才可以进行读写操作。mongodb默认的启动是不验证用户名和密码的，启动mongodb后，可以直接用mongo连接上来，对所有的库具有root权限。所以启动的时候指定参数，可以阻止客户端的访问和连接，只需在启动服务时指定 –auth参数即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --auth --logpath=/usr/local/mongodb/dblogs --fork</div></pre></td></tr></table></figure>
<p>2、现在还是可以通过/usr/local/mongodb/bin/mongo可以直接进入客户端操作的<br>因为现在没有管理员帐号，mongodb分两种管理员，一种为超级管理员，一种为数据库管理员(即只对自己的数据库有权限)</p>
<p>2.1、先通过/usr/local/mongodb/bin/mongo进入到客户端创建帐号</p>
<p>2.2、创建超级管理员（一定要进入admin数据库创建才行）<br>//先进入admin数据库<br>use admin;<br>//创建帐号root,密码为123<br>db.addUser(“root”, “123”);</p>
<p>2.3、创建数据库管理员<br>比如我需要为test数据库创建管理员，那我需要进入到test数据库先<br>use test;<br>db.addUser(“test”, “123”);</p>
<p>2.4测试登录<br>创建好帐号后，退出客户端，再重新登录进入客户端<br>exit;<br>/usr/local/mongodb/bin/mongo -uroot -p123 localhost:27017/admin    //超级管理员登录进入admin数据库</p>
<p>2.5总结<br>超级管理员需要进入admin数据库进行创建，数据库管理员需要进入到对应的数据库进行创建。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.mongoing.com/manual-zh/tutorial/insert-documents.html" target="_blank" rel="external">mongodb中文社区</a><br><a href="http://www.runoob.com/mongodb/mongodb-capped-collections.html" target="_blank" rel="external">菜鸟教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NoSQL数据库的优缺点&lt;br&gt;优点：简单的扩展、快速的读写、低廉的成本、灵活的数据模型&lt;br&gt;不足：不提供对SQL的支持、支持的特性不够丰富、现有的产品不够成熟&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://vonfly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>mysql-主从复制</title>
    <link href="https://vonfly.github.io/2017/03/20/mysql-master-slave/"/>
    <id>https://vonfly.github.io/2017/03/20/mysql-master-slave/</id>
    <published>2017-03-20T01:27:11.000Z</published>
    <updated>2017-05-18T02:15:18.060Z</updated>
    
    <content type="html"><![CDATA[<p>mysql主从复制和慢查询日志说明<br><a id="more"></a></p>
<h4 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h4><h5 id="MySQL-grant用户授权（先登录主服务器数据库进行用户授权）"><a href="#MySQL-grant用户授权（先登录主服务器数据库进行用户授权）" class="headerlink" title="MySQL grant用户授权（先登录主服务器数据库进行用户授权）"></a>MySQL grant用户授权（先登录主服务器数据库进行用户授权）</h5><p>在主服务器设置授权用户（授权所有权限关于所有数据库中所有表，给user这个用户从主机为192.168.10.2登录，密码为123456）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//方法1：</div><div class="line">mysql&gt; grant all on *.* to user@192.168.10.2 identified by &apos;123456&apos;;</div><div class="line">//方法2：</div><div class="line">mysql&gt; grant replication slave on *.* to user@192.168.10.2 identified by &apos;123456&apos;;</div><div class="line"></div><div class="line">//查看用户授权表（即mysql数据库中的user表）</div><div class="line">mysql&gt; select user,host,password from mysql.user;</div></pre></td></tr></table></figure></p>
<h5 id="修改主数据库服务器的配置文件my-cnf，开启big-log日志，并设置server-id的值"><a href="#修改主数据库服务器的配置文件my-cnf，开启big-log日志，并设置server-id的值" class="headerlink" title="修改主数据库服务器的配置文件my.cnf，开启big-log日志，并设置server-id的值"></a>修改主数据库服务器的配置文件my.cnf，开启big-log日志，并设置server-id的值</h5><p>log-bin=mysql-bin<br>server-id=1</p>
<h5 id="备份主服务器的数据库"><a href="#备份主服务器的数据库" class="headerlink" title="备份主服务器的数据库"></a>备份主服务器的数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//清除bin-log日志</div><div class="line">mysql&gt; reset master;</div><div class="line">//备份数据库</div><div class="line">mysql&gt; /usr/local/mysql/bin/mysqldump -uroot -p123456 test -l -F &gt; /tmp/test.sql</div></pre></td></tr></table></figure>
<h5 id="同步从服务器上的数据"><a href="#同步从服务器上的数据" class="headerlink" title="同步从服务器上的数据"></a>同步从服务器上的数据</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//先从主服务器复制一份test.sql到从服务器(192.168.10.2)下的tmp目录</div><div class="line">[root@localhost]<span class="comment"># scp /tmp/test.sql 192.168.10.2:/tmp/</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//登录从服务器数据库</div><div class="line">mysql&gt; /usr/local/mysql/bin/mysql -uroot -p123456 test</div><div class="line">//清空所有的big-log日志</div><div class="line">mysql&gt; reset master;</div><div class="line">//进行导入同步数据</div><div class="line">mysql&gt; /usr/local/mysql/bin/mysql -uroot -p123456 test &lt; /tmp/test.sql</div></pre></td></tr></table></figure>
<h5 id="配置从服务器的配置文件my-cnf"><a href="#配置从服务器的配置文件my-cnf" class="headerlink" title="配置从服务器的配置文件my.cnf"></a>配置从服务器的配置文件my.cnf</h5><p>log-bin=mysql-bin<br>server-id=2<br>master-host=192.168.10.1<br>master-user=user<br>master-password=123456<br>master-port=3306</p>
<h5 id="重启从服务器mysql-先关闭mysql，再重启mysql"><a href="#重启从服务器mysql-先关闭mysql，再重启mysql" class="headerlink" title="重启从服务器mysql(先关闭mysql，再重启mysql)"></a>重启从服务器mysql(先关闭mysql，再重启mysql)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//关闭方法1</div><div class="line">pkill mysqld</div><div class="line"></div><div class="line">//关闭方法2</div><div class="line">ps -aux | grep mysql	//先查看进程pid</div><div class="line">kill -15 pid	//正常关闭</div><div class="line"></div><div class="line">//重启mysql</div><div class="line">/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</div></pre></td></tr></table></figure>
<h5 id="查看从服务器是否已经同步了（查看相应的主从复制进程列表）"><a href="#查看从服务器是否已经同步了（查看相应的主从复制进程列表）" class="headerlink" title="查看从服务器是否已经同步了（查看相应的主从复制进程列表）"></a>查看从服务器是否已经同步了（查看相应的主从复制进程列表）</h5><p>方法1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show slave status\G</div></pre></td></tr></table></figure></p>
<p>如下图所示：<br>Slave_IO_Running:Yes    //此进程负责读取主服务器上的big-log日志，并且写入到从服务器上的big-log日志<br>Slave_SQL_Running:Yes    //此进程负责读取并且执行big-log日志<br>表示已经同步了（注意：以上两个都为Yes则表示成功，否则失败，错误原因可以从”last_error”字段的值中看到）</p>
<p>方法2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show processlist\G</div></pre></td></tr></table></figure></p>
<p>如下图所示：<br>state:waiting for master to send event    //表示连接主数据库为成功，而且成功获取big-log<br>state:has read all ready log;waiting for the slave i/o thread to update it    //表示成功执行big-log日志，正在等待着再次连接主数据库并更新获取big-log日志<br>表示已经同步了</p>
<h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>从数据库常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql&gt; start slave;	//启动复制进程</div><div class="line">mysql&gt; stop slave;	//停止复制进程</div><div class="line">mysql&gt; show slave status;	//查看数据库状态</div><div class="line">mysql&gt; change master to		//动态改变服务器的配置</div><div class="line">mysql&gt; show processlist		//查看数据库运行进程</div></pre></td></tr></table></figure></p>
<p>从数据库无法同步：<br>Show slave status显示slave_sql_running为No,seconds_behind_master为null<br>原因：<br>1、程序可能在slave上进行了写操作<br>2、也可能是slave机器(从服务器)重启后，事务回滚造成的</p>
<p>解决方法1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; slave stop;</div><div class="line">mysql&gt; set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;</div><div class="line">mysql&gt; slave start;</div></pre></td></tr></table></figure></p>
<p>解决方法2：<br>停止从服务器复制进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; slave stop;</div></pre></td></tr></table></figure></p>
<p>查看主服务器当前的bin-log日志名和偏移量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show master status;	//下一步需要用到日志名称和偏移量</div></pre></td></tr></table></figure></p>
<p>如图所示</p>
<p>最后到slave(从)服务器上执行手动同步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysql&gt; change master to</div><div class="line">master_host=&quot;192.168.10.1&quot;,</div><div class="line">master_user=&quot;user&quot;,</div><div class="line">master_password=&quot;123456&quot;,</div><div class="line">master_port=3306,</div><div class="line">master_log_file=&quot;mysql-bin.000003&quot;,		//对应上一步的日志名称</div><div class="line">master_log_pos=98;						//对应上一步的偏移量</div><div class="line"></div><div class="line">//启动slave(复制进程)</div><div class="line">mysql&gt; slave start;</div><div class="line">//最后再查看数据库状态</div><div class="line">mysql&gt; show slave status\G</div></pre></td></tr></table></figure></p>
<h4 id="MYSQL-bin-log日志"><a href="#MYSQL-bin-log日志" class="headerlink" title="MYSQL bin-log日志"></a>MYSQL bin-log日志</h4><h5 id="开启MYSQL-bin-log日志"><a href="#开启MYSQL-bin-log日志" class="headerlink" title="开启MYSQL bin-log日志"></a>开启MYSQL bin-log日志</h5><p>vim /etc/my.cnf<br>[mysqld]<br>….<br>log-bin=mysql-bin</p>
<h5 id="bin-log日志相关mysql指令"><a href="#bin-log日志相关mysql指令" class="headerlink" title="bin-log日志相关mysql指令"></a>bin-log日志相关mysql指令</h5><p>可以查看是否开启bin-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like &quot;%bin%&quot;;</div></pre></td></tr></table></figure></p>
<p>生成一个最新的bin-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; flush logs;</div></pre></td></tr></table></figure></p>
<p>查看big-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show binary logs;</div></pre></td></tr></table></figure></p>
<p>查看最后一个big-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show master status;</div></pre></td></tr></table></figure></p>
<p>清空所有的big-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; reset master;</div></pre></td></tr></table></figure></p>
<p>使用mysqlbiglog来查看big-log日志（打开mysql-bin.000002日志）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysqlbinlog --no-defaults mysql-bin.000002</span></div></pre></td></tr></table></figure></p>
<p>如果不加参数–no-defaults会报错，报错内容是说字符集有问题</p>
<h5 id="mysql备份和bin-log日志结合使用"><a href="#mysql备份和bin-log日志结合使用" class="headerlink" title="mysql备份和bin-log日志结合使用"></a>mysql备份和bin-log日志结合使用</h5><p>例子：</p>
<p>1、对test数据库进行备份数据，备份完成的同时生成一个新的log-bin日志文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysqldump -uroot -p123456 test -l -F &gt; /tmp/test.sql</span></div></pre></td></tr></table></figure></p>
<p>参数说明：-l为读锁(备份期间所有人都不能进行写的操作，但是可以进行读的操作)、-F(即相当于执行了flush logs指令),可以重新生成新的日志文件，其中包括log-bin日志</p>
<p>2、在备份完成后又添加了一些数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; insert into t1 values(3);</div><div class="line">mysql&gt; insert into t1 values(4);</div><div class="line">mysql&gt; insert into t1 values(5);</div></pre></td></tr></table></figure></p>
<p>3、此时突然数据库损坏或者人为删除<br>模拟人为删除表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; drop table t1;</div></pre></td></tr></table></figure></p>
<p>如何恢复数据？<br>步骤一，先用已经备份的t1.sql来恢复数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysql -uroot -p123456 test -f &lt; /tmp/test.sql</span></div><div class="line">参数<span class="_">-f</span>(可选参数)表示当遇到错误时，可以skip过去，继续执行下面的语句</div></pre></td></tr></table></figure></p>
<p>但是自从上次备份后添加或者修改的数据会丢失，怎么办？只能用big-log来恢复</p>
<p>先查看最后生成的big-log日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysqlbinlog --no-defaults mysql-bin.000005 | more</span></div></pre></td></tr></table></figure></p>
<p>截图如下：</p>
<p>找到对应的sql语句对应的end_log_post id<br>开始用big-log来恢复备份后添加或者修改的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysqlbinlog --no-defaults --stop-position='666' mysql-bin.000005 | /usr/local/mysql/bin/mysql -uroot -p123456 test</span></div></pre></td></tr></table></figure></p>
<p>mysqlbinlog可选参数说明：<br>–start-position=’20’<br>–stop-position=’111’<br>–start-date=’2017-01-18 00:00:00’<br>–stop-date=’2017-01-18 23:59:59’</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql主从复制和慢查询日志说明&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://vonfly.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://vonfly.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql-分区技术</title>
    <link href="https://vonfly.github.io/2017/03/16/mysql-partition/"/>
    <id>https://vonfly.github.io/2017/03/16/mysql-partition/</id>
    <published>2017-03-16T01:20:40.000Z</published>
    <updated>2017-05-18T02:15:24.657Z</updated>
    
    <content type="html"><![CDATA[<p>mysql-分区技术<br><a id="more"></a></p>
<h2 id="MYSQL分区技术"><a href="#MYSQL分区技术" class="headerlink" title="MYSQL分区技术"></a>MYSQL分区技术</h2><p>MYSQL的分区技术与水平分表有点类似，但是它是在逻辑层进行的水平分表，对于应用程序而言它还是一张表。<br>MYSQL5.1有5种分区类型：<br>RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区<br>LIST分区：类似于RANGE分区，区别在于LIST分区是基于列值分配一个离散集合中的某个值来进行选择<br>HASH分区：。。。<br>KEY分区：。。。</p>
<p>例子1：假定你创建了一个如下的表，该表保存有20家音像店的职员记录，这20家音像店的编号从1到20.如果你想将其分成4个小分区，那么你可以采用RANGE分区，创建的数据库表如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE employees(</div><div class="line">	id INT NOT NULL,</div><div class="line">	fname VARCHAR(30),</div><div class="line">	iname VARCHAR(30),</div><div class="line">	hired DATE NOT NULL DEFAULT &apos;1970-01-01&apos;,</div><div class="line">	separated DATE NOT NULL DEFAULT &apos;9999-12-31&apos;,</div><div class="line">	job_code INT NOT NULL,</div><div class="line">	store_id INT NOT NULL</div><div class="line">)engine=myisam default charset=utf8</div><div class="line">PARTITION BY RANGE(store_id)(</div><div class="line">	PARTITION p0 VALUES LESS THAN(6),</div><div class="line">	PARTITION p1 VALUES LESS THAN(11),</div><div class="line">	PARTITION p2 VALUES LESS THAN(16),</div><div class="line">	PARTITION p3 VALUES LESS THAN(21)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>例子2：假定你创建了一个如下的表，该表保存有20家音像店的职员记录，这20家音像店的编号从1到20。如果你想把不同时期离职的员工进行分别存储，那么你可以将日期字段separated(即离职时间)作为一个key，创建的数据库表如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE employees1(</div><div class="line">	id INT NOT NULL,</div><div class="line">	fname VARCHAR(30),</div><div class="line">	iname VARCHAR(30),</div><div class="line">	hired DATE NOT NULL DEFAULT &apos;1970-01-01&apos;,</div><div class="line">	separated DATE NOT NULL DEFAULT &apos;9999-12-31&apos;,</div><div class="line">	job_code INT NOT NULL,</div><div class="line">	store_id INT NOT NULL</div><div class="line">)</div><div class="line">PARTITION BY RANGE(YEAR(separated))(</div><div class="line">	PARTITION p0 VALUES LESS THAN(1991),</div><div class="line">	PARTITION p1 VALUES LESS THAN(1996),</div><div class="line">	PARTITION p2 VALUES LESS THAN(2001),</div><div class="line">	PARTITION p3 VALUES LESS THAN MAXVALUE</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>说明：YEAR()是mysql的一个日期函数，将日期类型的字段转换为整数类型，从而就可以作为RANGE分区的key。</p>
<h3 id="条件-range、list-分区算法管理"><a href="#条件-range、list-分区算法管理" class="headerlink" title="条件(range、list)分区算法管理"></a>条件(range、list)分区算法管理</h3><p>增加分区：<br>    alter table 表名 add partition(<br>        partition 分区名  values less than[in] (常量[列表]),<br>        partition 分区名  values less than[in] (常量[列表]),<br>        ….<br>    )<br>减少分区：<br>    alter table 表名 drop  partition 分区名称;<br>    减少分区，会丢失对应分区的数据。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; alter table employees1 add partition(</div><div class="line">	partition p4 values less than (2008),</div><div class="line">	partition p4 values less than (2009)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h3 id="innodb表数据结构"><a href="#innodb表数据结构" class="headerlink" title="innodb表数据结构"></a>innodb表数据结构</h3><p>对于innodb表的数据结构，首先要解决两个概念性的问题：共享表空间以及独占表空间。<br>共享表空间以及独占表空间都是针对数据的存储方式而言的。<br>共享表空间：某一个数据库的所有的表数据、索引文件全部放在一个文件中，默认这个共享表空间的文件路径在data目录下，默认的文件名为：ibdata1，初始化大小为10M。<br>独立表空间：每一个表都将会生成以独立的文件方式来进行存储，每一个表都有一个。frm表描述文件，还有一个.ibd文件。其中这个文件包括了单独一个表的数据内容以及索引内容，默认情况下他的存储位置也是在表的位置之中</p>
<h4 id="查看innodb表空间设置"><a href="#查看innodb表空间设置" class="headerlink" title="查看innodb表空间设置"></a>查看innodb表空间设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//为on表示是独立表空间，off表示共享表空间</div><div class="line">mysql&gt; show variables like &apos;innodb_file_per_table&apos;;</div></pre></td></tr></table></figure>
<h4 id="如何修改innodb表为独立表空间"><a href="#如何修改innodb表为独立表空间" class="headerlink" title="如何修改innodb表为独立表空间"></a>如何修改innodb表为独立表空间</h4><p>配置mysql的配置文件my.cnf<br>…<br>innodb_data_home_dir=”C:\mysql\data\”    //默认存在的，只需把前面井号去掉即可<br>innodb_log_group_home_dir=”C:\mysql\data\”    //默认存在的，只需把前面井号去掉即可<br>innodb_data_file_path=ibdata1:10M:autoextend    //默认存在的，只需把前面井号去掉即可<br>innodb_file_per_table=1</p>
<p>参数说明：<br>这些设置表示配置一个可扩展大小的尺寸为10MB的单独文件，名为ibdata1,没有给出文件的位置，所以默认的是在mysql的数据目录内。<br>innodb_data_home_dir    //代表为数据库文件所存放的目录<br>innodb_log_group_home_dir    //为日志存放目录<br>innodb_file_per_table    //是否使用共享以及独立表空间来<br>以上的几个参数必须在一起加入</p>
<h4 id="把共享表空间的表转移到独立表空间"><a href="#把共享表空间的表转移到独立表空间" class="headerlink" title="把共享表空间的表转移到独立表空间"></a>把共享表空间的表转移到独立表空间</h4><p>步骤：<br>1、使用mysqldump导出所有数据库表数据<br>2、停止mysql服务，修改参数（修改为独立表空间），并删除原先innodb共享表相关文件<br>3、重启mysql服务<br>4、重新导入数据</p>
<p>说明：<br>1、只有把innodb设置成独立表空间后，才能创建成功innodb表引擎的表分区<br>2、mysql5.6之后版本默认配置是独立表空间</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql-分区技术&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://vonfly.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://vonfly.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql-SQL语句技巧和优化</title>
    <link href="https://vonfly.github.io/2017/03/13/mysql-optimize/"/>
    <id>https://vonfly.github.io/2017/03/13/mysql-optimize/</id>
    <published>2017-03-13T01:16:46.000Z</published>
    <updated>2017-05-18T02:15:21.154Z</updated>
    
    <content type="html"><![CDATA[<p>SQL语句技巧和优化<br><a id="more"></a></p>
<h2 id="mysql-SQL语句技巧和优化"><a href="#mysql-SQL语句技巧和优化" class="headerlink" title="mysql SQL语句技巧和优化"></a>mysql SQL语句技巧和优化</h2><p>mysql5.5及之后版本默认存储引擎是innodb</p>
<h3 id="巧用RAND-提取随机行"><a href="#巧用RAND-提取随机行" class="headerlink" title="巧用RAND()提取随机行"></a>巧用RAND()提取随机行</h3><p>rand()是获取一个0-1之间的随机数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from st_vonfly order by rand();</div></pre></td></tr></table></figure></p>
<p>随机抽取3条数据样本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from st_vonfly order by rand() limit 3;</div></pre></td></tr></table></figure></p>
<h3 id="优化group-by语句"><a href="#优化group-by语句" class="headerlink" title="优化group by语句"></a>优化group by语句</h3><p>有的sql语句在执行的时候，本身默认会有排序效果<br>但是有的时候我们的业务不需要排序效果，就可以进行强制限制，进而“节省默认排序”的资源。</p>
<p>如果查询包含group by但用户想要避免排序结果的损耗，则可以使用order by null来禁止排序：</p>
<h3 id="优化嵌套查询"><a href="#优化嵌套查询" class="headerlink" title="优化嵌套查询"></a>优化嵌套查询</h3><p>表1如图：<br>CREATE TABLE <code>tp_user</code> (<br>  <code>id</code> int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  <code>name</code> varchar(16) NOT NULL,<br>  <code>parents_id</code> int(10) NOT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=MyISAM DEFAULT CHARSET=utf8<br>表2如图：<br>CREATE TABLE <code>tp_parents</code> (<br>  <code>id</code> int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  <code>parent_name</code> varchar(16) NOT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=MyISAM DEFAULT CHARSET=utf8</p>
<p>下面是采用嵌套查询的效果（可以使用更有效的连接查询(JOIN)替代）</p>
<p>mysql&gt; desc select <em> from tp_parents where id in(select parents_id from tp_user)<br>\G<br><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></em> 1. row <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong><br>           id: 1<br>  select_type: PRIMARY<br>        table: tp_parents<br>         type: ALL<br>possible_keys: NULL<br>          key: NULL<br>      key_len: NULL<br>          ref: NULL<br>         rows: 3<br>        Extra: Using where<br><strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong> 2. row <strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong><br>           id: 2<br>  select_type: DEPENDENT SUBQUERY<br>        table: tp_user<br>         type: ALL<br>possible_keys: NULL<br>          key: NULL<br>      key_len: NULL<br>          ref: NULL<br>         rows: 4<br>        Extra: Using where<br>2 rows in set (0.06 sec)</p>
<h4 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h4><p>优化表的类型<br>通过拆分提高表的访问效率<br>使用中间表提高统计查询速度</p>
<h4 id="MYSQL服务器优化"><a href="#MYSQL服务器优化" class="headerlink" title="MYSQL服务器优化"></a>MYSQL服务器优化</h4><h5 id="四种字符集问题-统一设置为utf8"><a href="#四种字符集问题-统一设置为utf8" class="headerlink" title="四种字符集问题(统一设置为utf8)"></a>四种字符集问题(统一设置为utf8)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; \s</div></pre></td></tr></table></figure>
<p>如何设置？<br>vim /etc/my.cnf<br>[client]</p>
<p>#password=your_password<br>port=3306<br>socket=/tmp/mysql.sock<br>default-character-set=utf8    //控制的是客户端字符集和连接字符集</p>
<p>[mysqld]<br>…….<br>myisam_sort_buffer_size=8M<br>character-set-server=utf8    //控制服务器字符集和数据库字符集<br>collation-server=utf8_general_ci    //校验字符集，主要针对的排序</p>
<p>查看中文字符集以及对应的校验字符集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show character set;</div></pre></td></tr></table></figure></p>
<p>如图所示：</p>
<h5 id="bin-log日志问题"><a href="#bin-log日志问题" class="headerlink" title="bin log日志问题"></a>bin log日志问题</h5><h5 id="slow-log慢查询日志问题"><a href="#slow-log慢查询日志问题" class="headerlink" title="slow log慢查询日志问题"></a>slow log慢查询日志问题</h5><p>可以查看是否开启慢查询日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like &quot;%slow%&quot;;</div></pre></td></tr></table></figure></p>
<p>设置的慢查询时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like &quot;%long%&quot;;</div></pre></td></tr></table></figure></p>
<p>开启慢查询日志和设置慢查询时间：<br>vim /etc/my.cnf<br>[mysqld]<br>…….<br>log_slow_queries=slow.log<br>long_query_time=5</p>
<h5 id="socket问题"><a href="#socket问题" class="headerlink" title="socket问题"></a>socket问题</h5><p>mysql socket无法登录<br>1.有时登录mysql时提示不能用socket登录，此时可以换成tcp方式去登录，但是只有测试时可以这样用，必须要在php去用之前把这个事情解决了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mysql -uroot -p123456 --protocol tcp -hlocalhost</div></pre></td></tr></table></figure>
<p>这样就可以登录，就不用mysql.socket来登录。<br>把mysql重新启动就会自动生成socket文件</p>
<h5 id="root密码丢失"><a href="#root密码丢失" class="headerlink" title="root密码丢失"></a>root密码丢失</h5><p>root密码丢失破解步骤<br>1.service mysqld stop    //把mysql关闭<br>2.mysqld_safe –skip-grant-tables –user=mysql &amp;    //跳过授权表mysql.user和mysql.db来重启mysql<br>3.mysql -uroot;    //登录进mysql<br>4.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; update mysql.user set password=password(&quot;123456&quot;) where user=&quot;root&quot; and host=&quot;localhost&quot;;</div></pre></td></tr></table></figure></p>
<h3 id="SQL语句的优化步骤"><a href="#SQL语句的优化步骤" class="headerlink" title="SQL语句的优化步骤"></a>SQL语句的优化步骤</h3><p>一、通过慢查询日志查看效率低的sql语句<br>二、通过explain或者desc解析sql语句(查看是否需要做索引)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">explain select * from table where id = 8\G</div><div class="line">desc select * from table where id = 8\G</div></pre></td></tr></table></figure></p>
<p>每一列的简单解释<br>id:1<br>select_type:SIMPLE    //表示select的类型，常见的取值有SIMPLE(简单表，即不使用表连接或者子查询)、PRIMARY(主查询，即外层的查询)、UNION(UNION中的第二个或者后面的查询语句)、SUBQUERY(子查询中的第一个SELECT)等<br>table:stu    //输出结果集的表<br>type:range    //表示表的连接类型，性能由好到查：system(表仅一行)、const(只一行匹配)、eq_ref(对于前面的每一行使用主键和唯一)、ref(同eq_ref，但没有使用主键和唯一索引)、ref_or_null(同前面，对null查询)、index_merge(索引合并优化)、unique_subquery(主键子查询)、index_subquery(非主键子查询)、range(表单中的范围查询)、index(都通过查询索引来得到数据)、all(通过全表扫描得到的数据)<br>possible_keys:name,ind_stu_name    //表查询时可能使用的索引<br>key:name    //表示实际使用的索引<br>key_len:50    //索引字段的长度<br>ref:NULL<br>rows:8    //扫描行的数量<br>Extra:Using where;Using index    //执行情况的说明和描述</p>
<p>总结：where 和 order by后边的条件字段都可以适当设置索引、分组字段也可以添加索引，避免产生临时表</p>
<h4 id="对表的优化和检测"><a href="#对表的优化和检测" class="headerlink" title="对表的优化和检测"></a>对表的优化和检测</h4><h5 id="检查一个或多个表是否有错误"><a href="#检查一个或多个表是否有错误" class="headerlink" title="检查一个或多个表是否有错误"></a>检查一个或多个表是否有错误</h5><p>语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CHECK TABLE tb1_name[,tb1_name]...[option]... 	option=&#123;QUICK|FAST|MEDIUM|EXTENDED|CHANGED&#125;</div></pre></td></tr></table></figure></p>
<p>例子（检查a1表是否有错误）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; check table a1;</div></pre></td></tr></table></figure></p>
<h5 id="对损坏或错误的表进行修复"><a href="#对损坏或错误的表进行修复" class="headerlink" title="对损坏或错误的表进行修复"></a>对损坏或错误的表进行修复</h5><p>语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; repair TABLE tb1_name[,tb1_name]...[option]...</div></pre></td></tr></table></figure></p>
<p>例子（修复a1表）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; repair table a1;</div></pre></td></tr></table></figure></p>
<h5 id="定期优化表（找访问较少的时间进行优化，防止影响业务）"><a href="#定期优化表（找访问较少的时间进行优化，防止影响业务）" class="headerlink" title="定期优化表（找访问较少的时间进行优化，防止影响业务）"></a>定期优化表（找访问较少的时间进行优化，防止影响业务）</h5><p>如果已经删除了表的一大部分，或者如果已经对含有可变长度行的表进行了很多的改动，则需要做定期优化。这个命令(optimize)可以将表中的空间碎片进行合并，但是此命令只对myisam、BDB和innobd表起作用。</p>
<p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; OPTIMIZE [LOCAL|NO_WRITE_TO_BINLOG] TABLE tb1_name [,tb1_name]</div></pre></td></tr></table></figure></p>
<p>例子(对a1表进行优化)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; optimize table a1;</div></pre></td></tr></table></figure></p>
<h5 id="字段类型选择"><a href="#字段类型选择" class="headerlink" title="字段类型选择"></a>字段类型选择</h5><p>原则：当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或者二进制类型，最后是字符类型。对于相同级别的数据类型，应该优先选择占用空间小的数据类型。</p>
<h6 id="信息最好存储为整型的-mysql运行速度快，运算速度快"><a href="#信息最好存储为整型的-mysql运行速度快，运算速度快" class="headerlink" title="信息最好存储为整型的(mysql运行速度快，运算速度快)"></a>信息最好存储为整型的(mysql运行速度快，运算速度快)</h6><p>时间信息可以存储为整型的(时间戳)，用int类型<br>select from_unixstamp(时间戳)  from 表名</p>
<p>set集合类型 多选：set(‘篮球’,’足球’,’棒球’,’乒乓球’);<br>enum枚举类型 单选： enum(‘男’,’女’,’保密’);<br>推荐使用set和enum类型，内部会通过整型信息参数具体计算、运行。</p>
<p>ip地址也可以变为整型信息进行存储(mysql内部有算法，把ip变为数字)：<br>mysql： inet_aton(ip)   inet_ntoa(数字)<br>php:      ip2long(ip)       long2ip(数字)</p>
<h6 id="尽量少的占据存储空间"><a href="#尽量少的占据存储空间" class="headerlink" title="尽量少的占据存储空间"></a>尽量少的占据存储空间</h6><p>tinyint : 0~255                1字节<br>smallint : 0~ 65535            2字节<br>mediumint : 0~1千6百多万    3字节<br>int : 0~40多亿                4字节</p>
<h6 id="数据的整合最好固定长度"><a href="#数据的整合最好固定长度" class="headerlink" title="数据的整合最好固定长度"></a>数据的整合最好固定长度</h6><p>char    :0~255个字符<br>varchar : 0~65535 字节 看表编码，如果是utf8存2万多汉字 gbk存3万多汉字</p>
<p>char(长度)<br>固定长度，运行速度快<br>长度：255字符限制<br>varchar(长度)<br>长度不固定，内容比较少要进行部位操作，该类型要保留1-2个字节保存当前数据的长度<br>长度：65535字节限制<br>     存储汉字，例如字符集utf8的(每个汉字占据3个字节)，最多可以存储65535/3-2字节<br>                例如字符集gbk的(每个汉字占据2个字节)，最多可以存储65535/2-2字节</p>
<p>如存储手机号码：char(11) ，可以选取固定长度的 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL语句技巧和优化&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://vonfly.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://vonfly.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql简单操作</title>
    <link href="https://vonfly.github.io/2017/03/08/mysql-commands/"/>
    <id>https://vonfly.github.io/2017/03/08/mysql-commands/</id>
    <published>2017-03-08T04:53:03.000Z</published>
    <updated>2017-05-16T01:40:01.135Z</updated>
    
    <content type="html"><![CDATA[<p>常用的一些mysql操作（mysql高性能优化、mysql深入浅出）<br><a id="more"></a></p>
<h4 id="mysql具体语法帮助"><a href="#mysql具体语法帮助" class="headerlink" title="mysql具体语法帮助"></a>mysql具体语法帮助</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ? contents 	//查看所有帮助大纲，然后通过帮助大纲再用?继续往下查询具体语法</div><div class="line">mysql&gt; ? index 	 //查看索引具体操作帮助信息</div><div class="line">mysql&gt; ? view 	//查看视图具体操作帮助信息</div><div class="line">mysql&gt; ? create view 	//创建视图具体操作帮助信息</div><div class="line"></div><div class="line">mysql&gt; ? reg%	//如果记不住全称，可以使用%来代替</div></pre></td></tr></table></figure>
<h4 id="结果进行行列颠倒（-G）"><a href="#结果进行行列颠倒（-G）" class="headerlink" title="结果进行行列颠倒（\G）"></a>结果进行行列颠倒（\G）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show plugins;</div><div class="line">mysql&gt; show plugins\G</div></pre></td></tr></table></figure>
<h4 id="mysql表复制（包括复制表结构和表数据）"><a href="#mysql表复制（包括复制表结构和表数据）" class="headerlink" title="mysql表复制（包括复制表结构和表数据）"></a>mysql表复制（包括复制表结构和表数据）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; create table vf_a2 like vf_a1;	//先复制表结构</div><div class="line">mysql&gt; insert into vf_a2 select * from vf_a1;	//复制表数据。说明：表vf_a1和表vf_a2字段完全一样的前提下用*，否则要复制某些字段要具体写字段</div></pre></td></tr></table></figure>
<h4 id="表名修改"><a href="#表名修改" class="headerlink" title="表名修改"></a>表名修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//把表名为t2修改为t1</div><div class="line">mysql&gt; rename table t2 to t1;</div></pre></td></tr></table></figure>
<h4 id="索引的创建、删除、查看"><a href="#索引的创建、删除、查看" class="headerlink" title="索引的创建、删除、查看"></a>索引的创建、删除、查看</h4><h5 id="方法一：-create-index（创建索引）、drop-index（删除索引）"><a href="#方法一：-create-index（创建索引）、drop-index（删除索引）" class="headerlink" title="方法一： create index（创建索引）、drop index（删除索引）"></a>方法一： create index（创建索引）、drop index（删除索引）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql&gt; create index in_name on vf_a1(name);	//为表vf_a1的name字段创建普通索引</div><div class="line"></div><div class="line">mysql&gt; create unique index un_name on vf_a1(name);	//为表vf_a1的name字段创建唯一索引</div><div class="line"></div><div class="line">mysql&gt; drop index in_name on vf_a1;	//删除表vf_a1名称为in_name的索引</div></pre></td></tr></table></figure>
<h5 id="方法二（常用以及全面的方法，可以创建普通索引、唯一-unique-索引和主键-primary-key-索引）："><a href="#方法二（常用以及全面的方法，可以创建普通索引、唯一-unique-索引和主键-primary-key-索引）：" class="headerlink" title="方法二（常用以及全面的方法，可以创建普通索引、唯一(unique)索引和主键(primary key)索引）："></a>方法二（常用以及全面的方法，可以创建普通索引、唯一(unique)索引和主键(primary key)索引）：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql&gt; alter table vf_a1 add index in_name(name);	//为表vf_a1的name字段创建普通索引</div><div class="line"></div><div class="line">mysql&gt; alter table vf_a1 add unique in_name(name);	//为表vf_a1的name字段创建唯一索引</div><div class="line"></div><div class="line">mysql&gt; alter table vf_a1 drop index in_name;	//删除表vf_a1名称为in_name的索引</div><div class="line"></div><div class="line"></div><div class="line">//删除主键索引（先删除主键字段的自增，然后再删除主键索引）</div><div class="line">mysql&gt; id int unsigned not null auto_increment	//原来字段</div><div class="line">mysql&gt; alter table vf_a1 modify id int unsigned not null;	//修改字段（不写auto_increment就是把auto_increment(自增)删除了）</div><div class="line">mysql&gt; alter table vf_a1 drop primary key;	//再删除主键索引</div><div class="line"></div><div class="line"></div><div class="line">//增加主键索引(先添加主键索引，再修改主键字段为自增)</div><div class="line">mysql&gt; alter table vf_a1 add primary key(id);</div><div class="line">mysql&gt; id int unsigned not null;	//原来字段</div><div class="line">mysql&gt; alter table vf_a1 modify id int unsigned not null auto_increment;	//修改主键字段为自增</div></pre></td></tr></table></figure>
<h5 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show index from vf_a1;	//查看表vf_a1下的索引</div></pre></td></tr></table></figure>
<h4 id="mysql视图（中间表，把满足条件的记录生成一张中间表，就可以直接对这张表进行增删改查，提高性能）"><a href="#mysql视图（中间表，把满足条件的记录生成一张中间表，就可以直接对这张表进行增删改查，提高性能）" class="headerlink" title="mysql视图（中间表，把满足条件的记录生成一张中间表，就可以直接对这张表进行增删改查，提高性能）"></a>mysql视图（中间表，把满足条件的记录生成一张中间表，就可以直接对这张表进行增删改查，提高性能）</h4><h5 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; create view v_a1 as select * from a1 where id&gt;8;</div></pre></td></tr></table></figure>
<h5 id="查看视图（即查看表）"><a href="#查看视图（即查看表）" class="headerlink" title="查看视图（即查看表）"></a>查看视图（即查看表）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show tables;</div></pre></td></tr></table></figure>
<h5 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; drop view v_a1;	//删除名称为v_a1的视图</div></pre></td></tr></table></figure>
<h4 id="mysql存储"><a href="#mysql存储" class="headerlink" title="mysql存储"></a>mysql存储</h4><p>需求：向表a1（有主键id和name两个字段）插入一百条数据，字段name的值依次为user1、user2、user3…..user100</p>
<p>先修改定界符，因为mysql存储很多语句都是以分号结束的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; \d //	//把语句定界符分号修改为//</div></pre></td></tr></table></figure></p>
<p>再创建存储<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; create procedure p1()</div><div class="line">	-&gt; begin</div><div class="line">	-&gt; set @i=1;</div><div class="line">	-&gt; while @i&lt;=100 do</div><div class="line">	-&gt; insert into a1(name) values(concat(&quot;user&quot;, @i));</div><div class="line">	-&gt; set @i=@i+1;</div><div class="line">	-&gt; end while;</div><div class="line">	-&gt; end//</div></pre></td></tr></table></figure></p>
<p>最后执行刚刚创建的存储p1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; call p1;</div><div class="line"></div><div class="line">mysql&gt; select * from a1;	//查看数据是否创建成功</div></pre></td></tr></table></figure></p>
<h5 id="查看mysql存储"><a href="#查看mysql存储" class="headerlink" title="查看mysql存储"></a>查看mysql存储</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show procedure status;	//查看存储状态</div><div class="line"></div><div class="line">mysql&gt; show create procedure p1;	//查看存储p1的具体信息</div></pre></td></tr></table></figure>
<h5 id="mysql事务处理-innodb表引擎才支持"><a href="#mysql事务处理-innodb表引擎才支持" class="headerlink" title="mysql事务处理(innodb表引擎才支持)"></a>mysql事务处理(innodb表引擎才支持)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//关闭自动提交功能</div><div class="line">mysql&gt; set autocommit=0;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//从表a1中删除了一条记录</div><div class="line">mysql&gt; delete from a1 where id=11;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//此时做一个p1还原点</div><div class="line">mysql&gt; savepoint p1;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//再次从表a1中删除了一条记录</div><div class="line">mysql&gt; delete from a1 where id=12;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//再次做一个p2还原点</div><div class="line">mysql&gt; savepoint p2;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//此时恢复到p1还原点，当然后面的p2这些还原点自动会失效</div><div class="line">mysql&gt; rollback to p1;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//如果退回到最原始的还原点</div><div class="line">mysql&gt; rollback;</div></pre></td></tr></table></figure>
<h5 id="清空表-清空内容以及auto-increment恢复成1开始"><a href="#清空表-清空内容以及auto-increment恢复成1开始" class="headerlink" title="清空表(清空内容以及auto_increment恢复成1开始)"></a>清空表(清空内容以及auto_increment恢复成1开始)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; truncate table tablename;</div></pre></td></tr></table></figure>
<h5 id="mysql变量使用（需要查些资料多学习下-如mysql手册）"><a href="#mysql变量使用（需要查些资料多学习下-如mysql手册）" class="headerlink" title="mysql变量使用（需要查些资料多学习下,如mysql手册）"></a>mysql变量使用（需要查些资料多学习下,如mysql手册）</h5><p>1、需求：查询排名<br>create table vo_students(<br>    id int unsigned not null auto_increment,<br>    name varchar(30) not null default ‘’ comment ‘名字’,<br>    score smallint not null default 0 comment ‘分数’,<br>    primary key (id)<br>)engine myisam default charset utf8;<br>insert into vo_students(name, score) values (‘zhang’, 100),(‘li’, 89),(‘sun’, 57),(‘zhao’, 100),(‘zhou’, 89),(‘qian’, 92);</p>
<p>具体方法：<br>set @pres:=0,@currs:=0,@rank:=0;<br>select name,(@currs:=score) as score, @rank:=if(@currs&lt;&gt;@pres,@rank:=@rank+1,@rank) as rank,@pres:=score as prev from vo_students order by score desc;</p>
<p>mysql内置函数——————————————————————-</p>
<p>字符串函数：</p>
<p>CONCAT(string2 [,….])     //连接字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select concat(&quot;hello &quot;, &quot;world&quot;);</div></pre></td></tr></table></figure></p>
<p>LCASE(sting2)     //转换成小写<br>UCASE(sting2)     //转换成大写</p>
<p>LENGTH(string2)     //string2的长度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select length(&quot;vonfly&quot;);</div></pre></td></tr></table></figure></p>
<p>LTRIM(string2)     //去除左边空格<br>RTRIM(string2)     //去除右边空格</p>
<p>REPEAT(string2,count)     //重复count次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select repeat(&quot;vonfly&quot;, 6);</div></pre></td></tr></table></figure></p>
<p>REPLACE(string2, search_str, replace_str)     //在string2中用replace_str替换search_str<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select replace(&quot;vonfly is my web&quot;, &quot;my&quot;, &quot;your&quot;);</div></pre></td></tr></table></figure></p>
<p>SUBSTR(string2, position [,length])     //从string2的position开始，取length个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select substr(&quot;vonfly is my web&quot;, 1, 5);</div></pre></td></tr></table></figure></p>
<p>SPACE(count) //生成count个空格</p>
<p>日期函数<br>CURDATE()     //返回当前日期<br>CURTIME()     //返回当前时间<br>NOW()         //返回当前的日期时间<br>UNLX_TIMESTAMP(date)     //返回当前date的UNIX时间戳<br>FROM_UNIXTIME()     //返回UNLX时间戳的日期值<br>YEAR(date)     //返回日期date的年份<br>DATEDIFF(expr1,expr2)     //返回起始时间expr1和结束时间expr2的天数</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的一些mysql操作（mysql高性能优化、mysql深入浅出）&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://vonfly.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://vonfly.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>收集、总结的一些PHP理论知识（对于面试有帮助）</title>
    <link href="https://vonfly.github.io/2017/02/28/php-knowledge/"/>
    <id>https://vonfly.github.io/2017/02/28/php-knowledge/</id>
    <published>2017-02-28T11:43:19.000Z</published>
    <updated>2017-02-28T12:01:08.955Z</updated>
    
    <content type="html"><![CDATA[<p>本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。主要用于自己学习。如发现本网站载有侵犯您著作权的侵权信息，可联系我删除(●’◡’●)</p>
<a id="more"></a>
<h4 id="用最少的代码写一个求3值最大值的函数"><a href="#用最少的代码写一个求3值最大值的函数" class="headerlink" title="用最少的代码写一个求3值最大值的函数"></a>用最少的代码写一个求3值最大值的函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">($a,$b,$c)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> $a &gt; $b ? ($a &gt; $c ? $a : $c) : ($b &gt; $c ? $b : $c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="用PHP打印出前一天的时间，打印格式是2007年5月10日22-21-21"><a href="#用PHP打印出前一天的时间，打印格式是2007年5月10日22-21-21" class="headerlink" title="用PHP打印出前一天的时间，打印格式是2007年5月10日22:21:21"></a>用PHP打印出前一天的时间，打印格式是2007年5月10日22:21:21</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'-1 day'</span>));</div></pre></td></tr></table></figure>
<h4 id="输出正在浏览当前页面用户的IP地址"><a href="#输出正在浏览当前页面用户的IP地址" class="headerlink" title="输出正在浏览当前页面用户的IP地址"></a>输出正在浏览当前页面用户的IP地址</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</div></pre></td></tr></table></figure>
<h4 id="查询（query）的字符串URL中第一个问号-之后的内容（比如http-localhost-text-php-id-1-amp-bi-2，查询出-id-1-amp-bi-2-）"><a href="#查询（query）的字符串URL中第一个问号-之后的内容（比如http-localhost-text-php-id-1-amp-bi-2，查询出-id-1-amp-bi-2-）" class="headerlink" title="查询（query）的字符串URL中第一个问号 ? 之后的内容（比如http://localhost/text.php?id=1&amp;bi=2，查询出 id=1&amp;bi=2 ）"></a>查询（query）的字符串URL中第一个问号 ? 之后的内容（比如<a href="http://localhost/text.php?id=1&amp;bi=2，查询出" target="_blank" rel="external">http://localhost/text.php?id=1&amp;bi=2，查询出</a> id=1&amp;bi=2 ）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"QUERY_STRING"</span>];</div></pre></td></tr></table></figure>
<h4 id="当前运行脚本所在的文档根目录"><a href="#当前运行脚本所在的文档根目录" class="headerlink" title="当前运行脚本所在的文档根目录"></a>当前运行脚本所在的文档根目录</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"DOCUMENT_ROOT"</span>];</div></pre></td></tr></table></figure>
<h4 id="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹"><a href="#写一个函数，能够遍历一个文件夹下的所有文件和子文件夹" class="headerlink" title="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹"></a>写一个函数，能够遍历一个文件夹下的所有文件和子文件夹</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_scandir</span><span class="params">($dir)</span></span></div><div class="line">&#123;</div><div class="line">	$files=<span class="keyword">array</span>();</div><div class="line">	<span class="keyword">if</span>(is_dir($dir))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>($handle=opendir($dir))</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">while</span>(($file=readdir($handle))!==<span class="keyword">false</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>($file!=<span class="string">"."</span> &amp;&amp; $file!=<span class="string">".."</span>)</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(is_dir($dir.<span class="string">"/"</span>.$file))</div><div class="line">					&#123;</div><div class="line">						$files[$file]=my_scandir($dir.<span class="string">"/"</span>.$file);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span></div><div class="line">					&#123;</div><div class="line">						$files[]=$dir.<span class="string">"/"</span>.$file;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			closedir($handle);</div><div class="line">			<span class="keyword">return</span> $files;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var_dump(my_scandir(<span class="string">"F:ali"</span>));</div></pre></td></tr></table></figure>
<h4 id="请用正则表达式（Regular-Expression）验证电子邮件的格式是否正确。"><a href="#请用正则表达式（Regular-Expression）验证电子邮件的格式是否正确。" class="headerlink" title="请用正则表达式（Regular Expression）验证电子邮件的格式是否正确。"></a>请用正则表达式（Regular Expression）验证电子邮件的格式是否正确。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$email = <span class="string">'1185236@163.com'</span>;</div><div class="line"><span class="keyword">if</span>( !preg_match(<span class="string">'/^[\w.]+@([\w.]+)\.[a-z]&#123;2,6&#125;$/i'</span>, $email) )</div><div class="line">&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"电子邮件格式不正确！"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"电子邮件格式正确！"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="用PHP写出显示客户端IP与服务器IP的代码"><a href="#用PHP写出显示客户端IP与服务器IP的代码" class="headerlink" title="用PHP写出显示客户端IP与服务器IP的代码"></a>用PHP写出显示客户端IP与服务器IP的代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"REMOTE_ADDR"</span>];		<span class="comment">//客户端IP</span></div><div class="line"><span class="keyword">echo</span> gethostbyname(<span class="string">"www.baidu.com"</span>);	<span class="comment">//服务器IP</span></div></pre></td></tr></table></figure>
<h4 id="如何修改SESSION的生存时间"><a href="#如何修改SESSION的生存时间" class="headerlink" title="如何修改SESSION的生存时间"></a>如何修改SESSION的生存时间</h4><p>方法1：将php.ini中的session.gc_maxlifetime设置为9999重启apache</p>
<p>方法2：在当前项目中修改<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$expire = <span class="number">3600</span> * <span class="number">3</span>;</div><div class="line">ini_set(<span class="string">'session.gc_maxlifetime'</span>, $expire);</div><div class="line">ini_set(<span class="string">'session.cookie_lifetime'</span>, $expire);</div></pre></td></tr></table></figure></p>
<h4 id="有一个网页地址-比如百度主页-http-www-baidu-com-如何得到它的内容"><a href="#有一个网页地址-比如百度主页-http-www-baidu-com-如何得到它的内容" class="headerlink" title="有一个网页地址, 比如百度主页: http://www.baidu.com/,如何得到它的内容?"></a>有一个网页地址, 比如百度主页: <a href="http://www.baidu.com/,如何得到它的内容?" target="_blank" rel="external">http://www.baidu.com/,如何得到它的内容?</a></h4><p>方法1：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$readcontents = fopen(<span class="string">"http://www.baidu.com/"</span>, <span class="string">"rb"</span>);</div><div class="line">$contents = stream_get_contents($readcontents);</div><div class="line">fclose($readcontents);</div><div class="line"><span class="keyword">echo</span> $contents;</div></pre></td></tr></table></figure></p>
<p>方法2：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$readcontents = file_get_contents(<span class="string">"http://www.baidu.com/"</span>);</div><div class="line"><span class="keyword">echo</span> $readcontents;</div></pre></td></tr></table></figure></p>
<h4 id="请说明php中传值与传引用的区别。什么时候传值什么时候传引用"><a href="#请说明php中传值与传引用的区别。什么时候传值什么时候传引用" class="headerlink" title="请说明php中传值与传引用的区别。什么时候传值什么时候传引用?"></a>请说明php中传值与传引用的区别。什么时候传值什么时候传引用?</h4><p>按值传递：函数范围内对值的任何改变在函数外部都会被忽略</p>
<p>按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改</p>
<p>优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。</p>
<p>按引用传递则不需要复制值，对于性能提高很有好处。</p>
<h4 id="写一个函数，尽可能高效的，从一个标准-url-里取出文件的扩展名"><a href="#写一个函数，尽可能高效的，从一个标准-url-里取出文件的扩展名" class="headerlink" title="写一个函数，尽可能高效的，从一个标准 url 里取出文件的扩展名"></a>写一个函数，尽可能高效的，从一个标准 url 里取出文件的扩展名</h4><p>例如: <a href="http://www.sina.com.cn/abc/de/fg.php?id=1" target="_blank" rel="external">http://www.sina.com.cn/abc/de/fg.php?id=1</a> 需要取出 php 或 .php<br>方法1：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span><span class="params">($url)</span></span>&#123;</div><div class="line">	$arr = parse_url($url);</div><div class="line">	$file = basename($arr[<span class="string">'path'</span>]);</div><div class="line">	$ext = explode(<span class="string">"."</span>, $file);</div><div class="line">	<span class="keyword">return</span> $ext[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> getExt(<span class="string">'http://www.sina.com.cn/abc/de/fg.php?id=1'</span>);</div></pre></td></tr></table></figure></p>
<p>方法2：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span><span class="params">($url)</span> </span>&#123;</div><div class="line">	$url = basename($url);</div><div class="line">	$pos1 = strpos($url, <span class="string">"."</span>);</div><div class="line">	$pos2 = strpos($url, <span class="string">"?"</span>);</div><div class="line">	$length = $pos2 - $pos1 - <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(strstr($url, <span class="string">"?"</span>))&#123;</div><div class="line">		<span class="keyword">return</span> substr($url, $pos1 + <span class="number">1</span>, $length);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> substr($url, $pos1);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> getExt(<span class="string">'http://www.sina.com.cn/abc/de/fg.php?id=1'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="使用五种以上方式获取一个文件的扩展名"><a href="#使用五种以上方式获取一个文件的扩展名" class="headerlink" title="使用五种以上方式获取一个文件的扩展名"></a>使用五种以上方式获取一个文件的扩展名</h4><p>要求：dir/upload.image.jpg，找出 .jpg 或者 jpg ，<br>必须使用PHP自带的处理函数进行处理，方法不能明显重复，可以封装成函数，比如 get_ext1($file_name), get_ext2($file_name)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload.image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext1</span><span class="params">($file_name)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> strrchr($file_name, <span class="string">'.'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext1($file_name);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload.image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext2</span><span class="params">($file_name)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> substr( $file_name, strrpos($file_name, <span class="string">'.'</span>) );</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext2($file_name);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload/image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext3</span><span class="params">($file_name)</span></span>&#123;</div><div class="line">	$stack = explode(<span class="string">'.'</span>, $file_name);</div><div class="line">	$fruit = array_pop($stack);</div><div class="line">	<span class="keyword">return</span> $fruit;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext3($file_name);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload/image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext4</span><span class="params">($file_name)</span></span>&#123;</div><div class="line">	$p = pathinfo($file_name);</div><div class="line">	<span class="keyword">return</span> $p[<span class="string">'extension'</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext4($file_name);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload/image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext5</span><span class="params">($file_name)</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span> strrev(substr(strrev($file_name), <span class="number">0</span>, strpos(strrev($file_name), <span class="string">'.'</span>)));</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext5($file_name);</div></pre></td></tr></table></figure>
<h4 id="输出以下值"><a href="#输出以下值" class="headerlink" title="输出以下值"></a>输出以下值</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$str1 = <span class="keyword">null</span>;</div><div class="line">$str2 = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">echo</span> $str1==$str2 ? <span class="string">'相等'</span> : <span class="string">'不相等'</span>;</div><div class="line"><span class="comment">//输出相等</span></div><div class="line"></div><div class="line">$str3 = <span class="string">''</span>;</div><div class="line">$str4 = <span class="number">0</span>;</div><div class="line"><span class="keyword">echo</span> $str3==$str4 ? <span class="string">'相等'</span> : <span class="string">'不相等'</span>;</div><div class="line"><span class="comment">//输出相等</span></div><div class="line"></div><div class="line">$str5 = <span class="number">0</span>;</div><div class="line">$str6 = <span class="string">'0'</span>;</div><div class="line"><span class="keyword">echo</span> $str5===$str6 ? <span class="string">'相等'</span> : <span class="string">'不相等'</span>;</div><div class="line"><span class="comment">//输出不相等</span></div></pre></td></tr></table></figure>
<h4 id="MySQL数据库中的字段类型varchar和char的主要区别是什么-那种字段的查找效率要高，为什么"><a href="#MySQL数据库中的字段类型varchar和char的主要区别是什么-那种字段的查找效率要高，为什么" class="headerlink" title="MySQL数据库中的字段类型varchar和char的主要区别是什么?那种字段的查找效率要高，为什么?"></a>MySQL数据库中的字段类型varchar和char的主要区别是什么?那种字段的查找效率要高，为什么?</h4><p>varchar是变长，节省存储空间，char是固定长度。查找效率要char型快，因为varchar是非定长，必须先查找长度，然后进行数据的提取，比char定长类型多了一个步骤，所以效率低一些</p>
<h4 id="写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）"><a href="#写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）" class="headerlink" title="写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）"></a>写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）</h4><p>MyISAM、InnoDB、BDB（Berkeley DB）、Merge、Memory（Heap）、Example、Federated、Archive、CSV、Blackhole、MaxDB 等等十几个引擎</p>
<h4 id="求两个日期的差数，例如2007-2-5-2007-3-6-的日期差数"><a href="#求两个日期的差数，例如2007-2-5-2007-3-6-的日期差数" class="headerlink" title="求两个日期的差数，例如2007-2-5 ~ 2007-3-6 的日期差数"></a>求两个日期的差数，例如2007-2-5 ~ 2007-3-6 的日期差数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_days</span><span class="params">($date1, $date2)</span></span></div><div class="line">&#123;</div><div class="line">	$time1 = strtotime($date1);</div><div class="line">	$time2 = strtotime($date2);</div><div class="line">	<span class="keyword">return</span> abs($time2-$time1)/<span class="number">86400</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_days(<span class="string">'2007-2-5'</span>, <span class="string">'2007-2-6'</span>);</div></pre></td></tr></table></figure>
<h4 id="请写一个函数，实现以下功能："><a href="#请写一个函数，实现以下功能：" class="headerlink" title="请写一个函数，实现以下功能："></a>请写一个函数，实现以下功能：</h4><p>字符串”open_door” 转换成 “OpenDoor”、”make_by_id” 转换成 “MakeById”<br>方法一：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_explode</span><span class="params">($str)</span></span>&#123;</div><div class="line">	$str_arr=explode(<span class="string">"_"</span>,$str);</div><div class="line">	$str_implode=implode(<span class="string">" "</span>, $str_arr);</div><div class="line">	$str_implode=implode(<span class="string">""</span>, explode(<span class="string">" "</span>,ucwords($str_implode)));</div><div class="line">	<span class="keyword">return</span> $str_implode;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> str_explode(<span class="string">'open_door'</span>);</div></pre></td></tr></table></figure></p>
<p>方法二：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$str = <span class="string">'open_door'</span>;</div><div class="line">$expStr = explode(<span class="string">"_"</span>, $str);</div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($expStr); $i++)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">echo</span> ucwords($expStr[$i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法三：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> str_replace(<span class="string">' '</span>, <span class="string">''</span>, ucwords( str_replace(<span class="string">'_'</span>, <span class="string">' '</span>, <span class="string">'open_door'</span>) ) );</div></pre></td></tr></table></figure></p>
<h4 id="echo-count-“abc”-输出什么"><a href="#echo-count-“abc”-输出什么" class="headerlink" title="echo count(“abc”); 输出什么?"></a>echo count(“abc”); 输出什么?</h4><p>答案：1<br>说明：count — 计算数组中的单元数目或对象中的属性个数<br>int count ( mixed$var [, int $mode ] ), 如果 var 不是数组类型或者实现了 Countable 接口的对象，将返回1，有一个例外，如果 var 是 NULL 则结果是 0。</p>
<p>对于对象，如果安装了 SPL，可以通过实现 Countable 接口来调用 count()。该接口只有一个方法 count()，此方法返回 count() 函数的返回值。</p>
<h4 id="有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）"><a href="#有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）" class="headerlink" title="有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）"></a>有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span><span class="params">(&amp;$arr)</span></span></div><div class="line">&#123;</div><div class="line">	$cnt = count($arr);</div><div class="line">	$flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $cnt; $i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>($flag == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		$flag = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt; $cnt-$i<span class="number">-1</span>; $j++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>($arr[$j] &gt; $arr[$j+<span class="number">1</span>])</div><div class="line">			&#123;</div><div class="line">				$tmp = $arr[$j];</div><div class="line">				$arr[$j] = $arr[$j+<span class="number">1</span>];</div><div class="line">				$arr[$j+<span class="number">1</span>] = $tmp;</div><div class="line">				$flag = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$test=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">7</span>);</div><div class="line">BubbleSort($test);</div><div class="line">var_dump($test);</div></pre></td></tr></table></figure>
<h4 id="请举例说明在你的开发过程中用什么方法来加快页面的加载速度"><a href="#请举例说明在你的开发过程中用什么方法来加快页面的加载速度" class="headerlink" title="请举例说明在你的开发过程中用什么方法来加快页面的加载速度"></a>请举例说明在你的开发过程中用什么方法来加快页面的加载速度</h4><p>答：要用到服务器资源时才打开，及时关闭服务器资源，数据库添加索引，页面可生成静态，图片等大文件单独服务器。使用代码优化工具</p>
<h4 id="HTTP协议中GET、POST和HEAD的区别"><a href="#HTTP协议中GET、POST和HEAD的区别" class="headerlink" title="HTTP协议中GET、POST和HEAD的区别?"></a>HTTP协议中GET、POST和HEAD的区别?</h4><p>HEAD： 只请求页面的首部。</p>
<p>GET： 请求指定的页面信息，并返回实体主体。</p>
<p>POST： 请求服务器接受所指定的文档作为对所标识的URI的新的从属实体。</p>
<p>（1）HTTP 定义了与服务器交互的不同方法，最基本的方法是 GET 和 POST。事实上 GET 适用于多数请求，而保留 POST 仅用于更新站点。</p>
<p>（2）在FORM提交的时候，如果不指定Method，则默认为GET请 求，Form中提交的数据将会附加在url之后，以?分开与url分开。字母数字字符原样发送，但空格转换为“+“号，其它符号转换为%XX,其中XX为 该符号以16进制表示的ASCII（或ISO Latin-1）值。GET请求请提交的数据放置在HTTP请求协议头中，而POST提交的数据则放在实体数据中；</p>
<p>GET方式提交的数据最多只能有1024字节，而POST则没有此限制。</p>
<p>（3）GET 这个是浏览器用语向服务器请求最常用的方法。POST这个方法也是用来传送数据的，但是与GET不同的是，使用POST的时候，数据不是附在URI后面传递的，而是要做为独立的行来传递，此时还必须要发送一个Content_length标题，以标明数据长度，随后一个空白行，然后就是实际传送的数据。网页的表单通常是用POST来传送的。</p>
<h4 id="Cookie和session的区别，禁止了cookie后session能正常使用吗-session的缺点是什么-session在服务器端是存在哪里的-是共有的还是私有的"><a href="#Cookie和session的区别，禁止了cookie后session能正常使用吗-session的缺点是什么-session在服务器端是存在哪里的-是共有的还是私有的" class="headerlink" title="Cookie和session的区别，禁止了cookie后session能正常使用吗?session的缺点是什么?session在服务器端是存在哪里的?是共有的还是私有的?"></a>Cookie和session的区别，禁止了cookie后session能正常使用吗?session的缺点是什么?session在服务器端是存在哪里的?是共有的还是私有的?</h4><p>答：<br>COOKIE保存在客户端，用户通过手段可以进行修改，不安全，单个cookie允许的最大值是3k。</p>
<p>而SESSION保存在服务器端，相对比较安全，大小没有限制。</p>
<p>Session依赖于cookie进行传递。</p>
<p>禁用了cookie之后session不能正常使用。</p>
<p>Session的缺点：保存在服务器端，每次读取都从服务器进行读取，对服务器有资源消耗。</p>
<p>Session保存在服务器端的文件或数据库中，默认保存在文件中，文件路径由php配置文件的session.save_path指定。</p>
<p>Session文件是公有的。</p>
<h4 id="写几个魔术方法并说明作用"><a href="#写几个魔术方法并说明作用" class="headerlink" title="写几个魔术方法并说明作用?"></a>写几个魔术方法并说明作用?</h4><p>__call()当调用不存在的方法时会自动调用的方法</p>
<p>__autoload()在实例化一个尚未被定义的类是会自动调用次方法来加载类文件</p>
<p>__set()当给未定义的变量赋值时会自动调用的方法</p>
<p>__get()当获取未定义变量的值时会自动调用的方法</p>
<p>__construct()构造方法，实例化类时自动调用的方法</p>
<p>__destroy()销毁对象时自动调用的方法</p>
<p>__unset()当对一个未定义变量调用unset()时自动调用的方法</p>
<p>__isset()当对一个未定义变量调用isset()方法时自动调用的方法</p>
<p>__clone()克隆一个对象</p>
<p>__tostring()当输出一个对象时自动调用的方法</p>
<h4 id="数组中下标最好是什么类型的，为什么"><a href="#数组中下标最好是什么类型的，为什么" class="headerlink" title="数组中下标最好是什么类型的，为什么?"></a>数组中下标最好是什么类型的，为什么?</h4><p>数组的下标最好是数字类型的，数字类型的处理速度快</p>
<h4 id="i和i-哪一个效率高，为什么"><a href="#i和i-哪一个效率高，为什么" class="headerlink" title="++i和i++哪一个效率高，为什么?"></a>++i和i++哪一个效率高，为什么?</h4><p>++i效率比i++的效率更高，因为++i少了一个返回i的过程。</p>
<h4 id="echo-、print-、print-r-的区别"><a href="#echo-、print-、print-r-的区别" class="headerlink" title="echo()、print()、print_r()的区别?"></a>echo()、print()、print_r()的区别?</h4><p>echo 是php语法，可以输出多个变量，不能输出数组。</p>
<p>Print()是php中的函数，只能输出简单的变量。</p>
<p>Print_r()是php中的函数，可以输出变量也可以输出数组。</p>
<h4 id="框架中什么是单一入口和多入口，单一入口的优缺点"><a href="#框架中什么是单一入口和多入口，单一入口的优缺点" class="headerlink" title="框架中什么是单一入口和多入口，单一入口的优缺点?"></a>框架中什么是单一入口和多入口，单一入口的优缺点?</h4><p>1、多入口就是通过访问不同的文件来完成用户请求。<br>单一入口只web程序所有的请求都指向一个脚本文件的。<br>2、单一入口更容易控制权限，方便对http请求可以进行安全性检查。<br>缺点：URL看起来不那么美观，特别是对搜索引擎来说不友好。</p>
<h4 id="提示类型200、404、502是什么意思。"><a href="#提示类型200、404、502是什么意思。" class="headerlink" title="提示类型200、404、502是什么意思。"></a>提示类型200、404、502是什么意思。</h4><p>200是请求成功，404是文件未找到，502是服务器内部错误。</p>
<h4 id="你对Memcach的理解，优点有哪些"><a href="#你对Memcach的理解，优点有哪些" class="headerlink" title="你对Memcach的理解，优点有哪些?"></a>你对Memcach的理解，优点有哪些?</h4><p>Memcache是一种缓存技术，在一定的时间内将动态网页经过解析之后保存到文件，下次访问时动态网页就直接调用这个文件，而不必在重新访问数据库。使用memcache做缓存的好处是：提高网站的访问速度，减轻高并发时服务器的压力。</p>
<p>Memcache的优点：稳定、配置简单、多机分布式存储、速度快。</p>
<h4 id="对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题"><a href="#对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题" class="headerlink" title="对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题:"></a>对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题:</h4><p>a) 索引的目的是什么?</p>
<p>b) 索引对数据库系统的负面影响是什么?</p>
<p>c) 为数据表建立索引的原则有哪些?</p>
<p>d) 什么情况下不宜建立索引?</p>
<p>答：<br>索引的目的：</p>
<p>1、快速访问数据表中的特定信息，提高检索速度</p>
<p>2、创建唯一性索引，保证数据库表中每一行数据的唯一性</p>
<p>3、加速表和表之间的连接</p>
<p>4、使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p>
<p>负面影响：创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改的时候索引也要动态维护，这样就降低了数据的维护速度。</p>
<p>建立索引的原则：</p>
<p>1、在最频繁使用的、用以缩小查询范围的字段上建立索引</p>
<p>2、在平频繁使用的、需要排序的字段上建立索引</p>
<p>什么情况下不宜建立索引：</p>
<p>1、对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引</p>
<p>2、对于一些特殊的数据类型，不宜建立索引，比如文本字段(text)等。</p>
<h4 id="web应用中-数据库的读取频率远高于写入频率-如何优化MySQL而应对此种情景"><a href="#web应用中-数据库的读取频率远高于写入频率-如何优化MySQL而应对此种情景" class="headerlink" title="web应用中,数据库的读取频率远高于写入频率, 如何优化MySQL而应对此种情景 ?"></a>web应用中,数据库的读取频率远高于写入频率, 如何优化MySQL而应对此种情景 ?</h4><p>使用memcache缓存技术，将动态数据缓存到文件，访问动态页面时直接调用缓存文件，而不必重新访问数据库，这样就减少了查询数据库的次数。</p>
<p>如果网站的访问量很大，可以把数据库读写服务器分开，使用多态服务器去处理数据库查询，使用较少的服务器去处理数据库的写入和修改。</p>
<h4 id="include与require的区别"><a href="#include与require的区别" class="headerlink" title="include与require的区别?"></a>include与require的区别?</h4><p>Php在遇到include时就重新解释一次，如果一个页面中出现10次include，php就重新解释10次，而php遇到require时只解释一次，即使页面中出现多次require，php也直解释一次。</p>
<p>使用require包含文件时，被包含的文件当成了当前文件的一个组成部分，如果被包含的文件中有语法错误或者文件不存在，程序就提示错误信息，并结束执行。</p>
<p>使用include包含文件时，相当于指定了文件的路径，被包含的文件中有语法错误或者文件不存在时，页面只是给出警告信息，不响应程序本身的执行。</p>
<h4 id="PHP字符串中单引号与双引号的区别"><a href="#PHP字符串中单引号与双引号的区别" class="headerlink" title="PHP字符串中单引号与双引号的区别?"></a>PHP字符串中单引号与双引号的区别?</h4><p>单引号不能解释变量，而双引号可以解释变量。<br>单引号不能转义字符，在双引号中可以转义字符。</p>
<h4 id="php中-模板引擎的目的是什么-你用过哪些模板引擎"><a href="#php中-模板引擎的目的是什么-你用过哪些模板引擎" class="headerlink" title="php中,模板引擎的目的是什么? 你用过哪些模板引擎?"></a>php中,模板引擎的目的是什么? 你用过哪些模板引擎?</h4><p>使用模板引擎的目的是使程序的逻辑代码和html界面代码分离开，是程序的结构更清晰。<br>使用过的模板引擎：Smarty、ThinkPHP的ThinkTemplate</p>
<h4 id="指出以下代码片段中的SQL注入漏洞以及解决方法-magic-quotes-gpc-off"><a href="#指出以下代码片段中的SQL注入漏洞以及解决方法-magic-quotes-gpc-off" class="headerlink" title="指出以下代码片段中的SQL注入漏洞以及解决方法(magic_quotes_gpc = off)"></a>指出以下代码片段中的SQL注入漏洞以及解决方法(magic_quotes_gpc = off)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_query(<span class="string">"select id,title from content where catid='&#123;$_GET[catid]&#125;' and title like '%$_GET[keywords]%'"</span>, $link);</div></pre></td></tr></table></figure>
<p>注入漏洞主要存在用户提交的数据上，这里的注入漏洞主要是$_GET[catid]和$_GET[keyword]</p>
<p>解决注入漏洞：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$_GET[catid]=intval($_GET[catid]);</div><div class="line"></div><div class="line">$sql=<span class="string">"select id,title from content where catid='&#123;$_GET[catid]&#125;' and title like '%$_GET[keywords]%"</span>;</div><div class="line"></div><div class="line">$sql=addslashes($sql);</div><div class="line"></div><div class="line">mysql_query($sql);</div></pre></td></tr></table></figure></p>
<h4 id="MyISAM-和-InnoDB-的基本区别"><a href="#MyISAM-和-InnoDB-的基本区别" class="headerlink" title="MyISAM 和 InnoDB 的基本区别?"></a>MyISAM 和 InnoDB 的基本区别?</h4><p>MYISAM不支持外键和事务处理，采用表锁机制，查询速度稍快，数据存储文件有3个，InnoDB支持外键和事务处理，采用行锁机制，查询速度比MYISAM稍慢，数据存储文件只有一个。</p>
<h4 id="写出匹配URL的正则表达式"><a href="#写出匹配URL的正则表达式" class="headerlink" title="写出匹配URL的正则表达式."></a>写出匹配URL的正则表达式.</h4><p>/^http:\/\/www.([\w]+).([\w]+)$/</p>
<h4 id="写一个函数实现字符串翻转"><a href="#写一个函数实现字符串翻转" class="headerlink" title="写一个函数实现字符串翻转"></a>写一个函数实现字符串翻转</h4><p>方法一：strrev(‘abcdef’);<br>方法二：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">str</span><span class="params">($a)</span></span>&#123;</div><div class="line">	$len = strlen($a);</div><div class="line">	$b = <span class="string">""</span>;</div><div class="line">	<span class="keyword">for</span>($i = $len<span class="number">-1</span>; $i &gt;= <span class="number">0</span>; $i--)</div><div class="line">	&#123;</div><div class="line">		$b .= $a[$i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> $b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> str(<span class="string">'abcdef'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="不断在文件hello-txt头部写入一行“Hello-World”字符串，要求代码完整"><a href="#不断在文件hello-txt头部写入一行“Hello-World”字符串，要求代码完整" class="headerlink" title="不断在文件hello.txt头部写入一行“Hello World”字符串，要求代码完整"></a>不断在文件hello.txt头部写入一行“Hello World”字符串，要求代码完整</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$fp=fopen(<span class="string">'hello.txt'</span>, <span class="string">'r'</span>);</div><div class="line"></div><div class="line">$str=<span class="string">'hello!'</span>.<span class="string">"\n"</span>;</div><div class="line"></div><div class="line">$str.=fread($fp, filesize(<span class="string">'./hello.txt'</span>));</div><div class="line"></div><div class="line">fclose($fp);</div><div class="line"></div><div class="line">$fp1=fopen(<span class="string">'hello.txt'</span>, <span class="string">'w'</span>);</div><div class="line"></div><div class="line">fwrite($fp1, $str);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。主要用于自己学习。如发现本网站载有侵犯您著作权的侵权信息，可联系我删除(●’◡’●)&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://vonfly.github.io/categories/PHP/"/>
    
    
      <category term="面试" scheme="https://vonfly.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="理论知识" scheme="https://vonfly.github.io/tags/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>搭建SVN服务器</title>
    <link href="https://vonfly.github.io/2017/02/26/server-build-svn/"/>
    <id>https://vonfly.github.io/2017/02/26/server-build-svn/</id>
    <published>2017-02-26T01:24:08.000Z</published>
    <updated>2017-05-15T02:57:21.057Z</updated>
    
    <content type="html"><![CDATA[<p>在 Centos5.5 上搭建SVN服务器并实现自动同步至web目录。<br><a id="more"></a></p>
<h2 id="一、搭建svn环境并创建仓库："><a href="#一、搭建svn环境并创建仓库：" class="headerlink" title="一、搭建svn环境并创建仓库："></a>一、搭建svn环境并创建仓库：</h2><h3 id="安装Subversion"><a href="#安装Subversion" class="headerlink" title="安装Subversion"></a>安装Subversion</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y subversion</div></pre></td></tr></table></figure>
<h3 id="检测是否安装成功-查看svn版本号"><a href="#检测是否安装成功-查看svn版本号" class="headerlink" title="检测是否安装成功(查看svn版本号)"></a>检测是否安装成功(查看svn版本号)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnserve --version</div></pre></td></tr></table></figure>
<h3 id="创建版本库（没有规定在哪创建目录）"><a href="#创建版本库（没有规定在哪创建目录）" class="headerlink" title="创建版本库（没有规定在哪创建目录）"></a>创建版本库（没有规定在哪创建目录）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir /home/svn	//先建目录</div><div class="line">cd /home/svn		//进入目录</div><div class="line">svnadmin create /home/svn/test	//创建版本库</div><div class="line">cd test	//进入创建的版本库</div><div class="line">ls		//会看到自动生成的版本库文件（如下图）</div></pre></td></tr></table></figure>
<p><img src="http://olixffhc0.bkt.clouddn.com/server_svn1.jpg" alt="版本库文件列表"></p>
<h2 id="创建用户组及用户"><a href="#创建用户组及用户" class="headerlink" title="创建用户组及用户"></a>创建用户组及用户</h2><p>进入版本库中的配置目录conf</p>
<h3 id="修改权限配置文件"><a href="#修改权限配置文件" class="headerlink" title="修改权限配置文件"></a>修改权限配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim authz</div></pre></td></tr></table></figure>
<p><img src="http://olixffhc0.bkt.clouddn.com/server_svn2.jpg" alt="权限配置"></p>
<h3 id="配置用户名命令文件"><a href="#配置用户名命令文件" class="headerlink" title="配置用户名命令文件"></a>配置用户名命令文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim passwd</div></pre></td></tr></table></figure>
<p><img src="http://olixffhc0.bkt.clouddn.com/server_svn3.jpg" alt="用户名密码配置"></p>
<h3 id="配置SVN服务综合配置文件"><a href="#配置SVN服务综合配置文件" class="headerlink" title="配置SVN服务综合配置文件"></a>配置SVN服务综合配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim svnserve.conf</div></pre></td></tr></table></figure>
<p>//找到以下配置项，将前面的#号去掉（注意：所有配置项前面不能留空格），然后做相应的配置<br>anon-access = none      //匿名用户访问权限:无<br>auth-access = write     //普通用户访问权限:写<br>password-db = passwd    //引入密码文件<br>authz-db = authz        //引入权限配置文件<br>realm = /home/svn/test   //版本库所在</p>
<h3 id="启动svn服务"><a href="#启动svn服务" class="headerlink" title="启动svn服务"></a>启动svn服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnserve -d -r /home/svn</div></pre></td></tr></table></figure>
<p>其中 -d表示(独立端口运行)    -r表示(仓库地址)<br>svn服务走svn协议，端口号是3690</p>
<p>如果提示：svnserve: E000098: Can’t bind server socket: Address already in use<br>证明现在svn已经被启动了，由于我们修改了配置文件，因此要重启svn服务，所以要先关闭svn再重启svn</p>
<p>查看svn服务详情（如下图所示）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux | grep svn</div></pre></td></tr></table></figure></p>
<p>将svn服务强制停止  其中790为svn服务的ID号，-9是kill的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -9 790</div></pre></td></tr></table></figure></p>
<p>最后再重新运行 svnserve -d -r /var/svn</p>
<h3 id="测试有没有成功"><a href="#测试有没有成功" class="headerlink" title="测试有没有成功"></a>测试有没有成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /www</div><div class="line">mkdir test</div><div class="line">svn co svn://localhost/test /www/test --username vonfly(SVN账号) --password vonfly(SVN密码)</div></pre></td></tr></table></figure>
<p>如果提示：Checked out revision 0.<br>表示checkout成功<br><img src="http://olixffhc0.bkt.clouddn.com/server_svn4.jpg" alt="Checked"></p>
<h2 id="本地拉取、推送（本地要先安装SVN客户端）"><a href="#本地拉取、推送（本地要先安装SVN客户端）" class="headerlink" title="本地拉取、推送（本地要先安装SVN客户端）"></a>本地拉取、推送（本地要先安装SVN客户端）</h2><p>输入远程链接：svn://服务器iP地址/test，再输入用户名和密码即可链接</p>
<h2 id="本地commit时自动同步到web目录"><a href="#本地commit时自动同步到web目录" class="headerlink" title="本地commit时自动同步到web目录"></a>本地commit时自动同步到web目录</h2><p>实现本地更新同步到服务器项目：配置项目仓库的钩子配置,可以把钩子看成是WEB项目于SVN项目仓库之间的一个关联，通过向SVN项目仓库提交脚本代码，利用钩子shell脚本可以自动向web项目中将脚本文件更新过去</p>
<h3 id="进入-var-svn-project-hooks下，建立post-commit文件"><a href="#进入-var-svn-project-hooks下，建立post-commit文件" class="headerlink" title="进入/var/svn/project/hooks下，建立post-commit文件"></a>进入/var/svn/project/hooks下，建立post-commit文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /var/svn/project/hooks</div><div class="line">vim post-commit</div></pre></td></tr></table></figure>
<p>在该文件里添加如下代码：</p>
<p>#!/bin/sh<br>export LANG=zh_CN.UTF-8<br>SVN_PATH=/usr/bin/svn   //这里不用改<br>WEB_PATH=/www/test  //对应自己web目录<br>//这里的用户随便一个就好<br>$SVN_PATH update $WEB_PATH –username ‘vonfly’ –password ‘vonfly’ –no-auth-cache</p>
<p><img src="http://olixffhc0.bkt.clouddn.com/server_svn5.jpg" alt="post-commit"></p>
<h3 id="给post-commit-执行权限"><a href="#给post-commit-执行权限" class="headerlink" title="给post-commit 执行权限"></a>给post-commit 执行权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 755 post-commit</div></pre></td></tr></table></figure>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="具体权限表示"><a href="#具体权限表示" class="headerlink" title="具体权限表示"></a>具体权限表示</h3><p>r(read)读【有update操作】    w(write)写【有commit操作】</p>
<h3 id="开启只操作某个目录的权限"><a href="#开启只操作某个目录的权限" class="headerlink" title="开启只操作某个目录的权限"></a>开启只操作某个目录的权限</h3><p>要求：给帐号设置只操作temp目录的权限，只能给操作temp目录的用户只读权限<br>对应的权限文件（authz）设置<br>[test:/temp]<br>temp1 = r<br>temp2 = r<br>…..<br>对应的本地客户端拉取就要：输入远程链接：svn://服务器iP地址/test/temp<br>说明：这样的设置不会影响到之前[test:/]的设置，两个设置可以共存</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Centos5.5 上搭建SVN服务器并实现自动同步至web目录。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonfly.github.io/categories/Linux/"/>
    
    
      <category term="SVN" scheme="https://vonfly.github.io/tags/SVN/"/>
    
      <category term="Centos" scheme="https://vonfly.github.io/tags/Centos/"/>
    
      <category term="版本控制" scheme="https://vonfly.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Sublime使用技巧</title>
    <link href="https://vonfly.github.io/2017/02/17/sublime/"/>
    <id>https://vonfly.github.io/2017/02/17/sublime/</id>
    <published>2017-02-17T12:33:48.000Z</published>
    <updated>2017-02-24T12:30:05.382Z</updated>
    
    <content type="html"><![CDATA[<p>sublime使用技巧，平时用的时候觉得不错的功能就会把它分享给大家(●’◡’●)<br><a id="more"></a></p>
<h2 id="sublime右键快捷方式添加"><a href="#sublime右键快捷方式添加" class="headerlink" title="sublime右键快捷方式添加"></a>sublime右键快捷方式添加</h2><p>window下，开始-&gt;运行-&gt;regedit<br>到 HKEY_CLASSES_ROOT*\shell目录下<br>新建sublime(随便你起什么名字)<br>再到新建好的sublime目录下新建command(固定名字)</p>
<p>最后的目录结构【HKEY_CLASSES_ROOT*\shell\sublime\command】</p>
<p>第一个双引号是你的软件安装目录<br>“E:\Sublime Text 3  Build 3103 x64 Portable Cracked (2016.02.11)\sublime_text.exe” -p –remote-tab-silent “%1”</p>
<p>window如何查看软件安装目录，如下图说明：<br><img src="http://olixffhc0.bkt.clouddn.com/sublime2.jpg" alt="window如何查看软件安装目录"></p>
<p>选中上一步建好的文件command，然后双击右边的默认，把上边的内容复制进去即可。如下图说明<br><img src="http://olixffhc0.bkt.clouddn.com/sublime1.jpg" alt="sublime1"></p>
<p>随便找个文件sublime能够识别的文件，鼠标右击就可以看到刚刚添加的快捷键了，可以直接打开</p>
<h2 id="Sublime-text-2-3-中-Package-Control-的安装与使用方法"><a href="#Sublime-text-2-3-中-Package-Control-的安装与使用方法" class="headerlink" title="Sublime text 2/3 中 Package Control 的安装与使用方法"></a>Sublime text 2/3 中 Package Control 的安装与使用方法</h2><p>从菜单 View - Show Console 或者 ctrl + ~ 快捷键，调出 console。<br>将以下 Python 代码粘贴进去并 enter 执行，不出意外即完成安装。<br>以下提供 ST3 和 ST2 的安装代码：</p>
<p>Sublime Text 3：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), <span class="string">'wb'</span>).write(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).read())</div></pre></td></tr></table></figure></p>
<p>Sublime Text 2：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2,os; pf=<span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) <span class="keyword">else</span> <span class="keyword">None</span>; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), <span class="string">'wb'</span> ).write( urllib2.urlopen( <span class="string">'http://sublime.wbond.net/'</span> +pf.replace( <span class="string">' '</span>,<span class="string">'%20'</span> )).read()); print( <span class="string">'Please restart Sublime Text to finish installation'</span>)</div></pre></td></tr></table></figure></p>
<p>常用的一些插件：<br>AdvancedNewFile        快速创建新文件<br>Better Completion    全能代码提示(需要自己配置一下插件，需要提示的库)<br>CodeFormatter        代码格式化<br>ConverToUTF8    支持 GBK, BIG5, EUC-KR, EUC-JP, Shift_JIS 等编码的插件<br>DocBlockr        代码块注释<br>Emmet<br>File Header    自动更新保存时间，文件模板<br>Side Bar<br>Monokai Extended    主题配置<br>SideBarEnhancements    增强型侧边栏</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sublime使用技巧，平时用的时候觉得不错的功能就会把它分享给大家(●’◡’●)&lt;br&gt;
    
    </summary>
    
      <category term="其它" scheme="https://vonfly.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="软件使用技巧" scheme="https://vonfly.github.io/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
      <category term="右键快捷方式添加" scheme="https://vonfly.github.io/tags/%E5%8F%B3%E9%94%AE%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E6%B7%BB%E5%8A%A0/"/>
    
  </entry>
  
  <entry>
    <title>收集、总结的一些理论知识（对于面试有帮助）</title>
    <link href="https://vonfly.github.io/2017/02/09/theoretical-knowledge/"/>
    <id>https://vonfly.github.io/2017/02/09/theoretical-knowledge/</id>
    <published>2017-02-09T13:01:03.000Z</published>
    <updated>2017-02-28T11:41:18.979Z</updated>
    
    <content type="html"><![CDATA[<p>本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。为什么要写这个页面呢？一来自己的理论知识相对比较薄弱，每次面试的时候，有很多理论知识都回答不上，所以要加深巩固自己的理论知识。二来自己写一遍或者抄一遍总会有点印象，对以后的工作多多少少会有点帮助(●’◡’●)</p>
<a id="more"></a>
<h1 id="javascript理论知识"><a href="#javascript理论知识" class="headerlink" title="javascript理论知识"></a>javascript理论知识</h1><h2 id="xml与json区别"><a href="#xml与json区别" class="headerlink" title="xml与json区别"></a>xml与json区别</h2><p>相同点：</p>
<blockquote>
<ul>
<li>都是一种通用协议</li>
<li>都可以用来描述数据</li>
</ul>
</blockquote>
<p>不同点：</p>
<blockquote>
<ul>
<li>JSON相对于XML来讲，数据的体积小，传递的速度更快些。</li>
<li>xml专用带宽大，json占用带宽小</li>
<li>json没有xml这么通用</li>
<li>json可以和js对象互相转换，和js是天生的一对，因此广泛用于前端开发</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。为什么要写这个页面呢？一来自己的理论知识相对比较薄弱，每次面试的时候，有很多理论知识都回答不上，所以要加深巩固自己的理论知识。二来自己写一遍或者抄一遍总会有点印象，对以后的工作多多少少会有点帮助(●’◡’●)&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://vonfly.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试" scheme="https://vonfly.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="理论知识" scheme="https://vonfly.github.io/tags/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>初识gulp</title>
    <link href="https://vonfly.github.io/2016/11/02/gulp/"/>
    <id>https://vonfly.github.io/2016/11/02/gulp/</id>
    <published>2016-11-02T15:40:09.000Z</published>
    <updated>2017-03-27T13:35:33.987Z</updated>
    
    <content type="html"><![CDATA[<p>初识gulp自动化构建工具。一开始只是听过这个东西，没有尝试用过。听起来好像很高大上的样子，一直想要去尝试用一下，但一直没有去用过。一来现在的项目没有用到；二来之前好像确实是挺忙的，没有找到什么合适的时间去尝试用下；三来嘛感觉这么高大上的东西可能学起来应该会很难，会花费很多时间。<br>ps：很多事情只有去尝试了才会知道难不难，很多东西你觉得难可能是因为你没有用过它，或者不知道它是用来做什么的，只有你勇敢的踏出一步去尝试用下，你就会发现其实没有那么难。(●’◡’●)<br><a id="more"></a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。<br>利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。<br>Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。<br>通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</p>
<h2 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h2><ol>
<li><p>全局安装 gulp：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global gulp</div></pre></td></tr></table></figure>
</li>
<li><p>作为项目的开发依赖（devDependencies）安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录下创建一个名为 gulpfile.js 的文件：<br>var gulp = require(‘gulp’);</p>
</li>
</ol>
<p>gulp.task(‘default’, function() {<br>  // 将你的默认的任务代码放在这<br>});</p>
<ol>
<li>运行 gulp：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp default</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如博客gulpfile.js代码为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 压缩html</span></div><div class="line">gulp.task(<span class="string">"minhtml"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> gulp.src(<span class="string">"public/**/*.html"</span>)</div><div class="line">	.pipe(htmlmin())</div><div class="line">	.pipe(gulp.dest(<span class="string">"./public"</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="常用的一些插件"><a href="#常用的一些插件" class="headerlink" title="常用的一些插件"></a>常用的一些插件</h2><blockquote>
<ul>
<li>gulp-minify-css    压缩css</li>
<li>gulp-uglify    压缩js</li>
<li>gulp-htmlmin    压缩html</li>
<li>gulp-imagemin    压缩图片<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install [plugins-name] --save</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>上述命令安装插件的同时也会把插件作为项目依赖写入package.json文件.</p>
<p>参考：<br><a href="http://gulpjs.com/" target="_blank" rel="external">guly官网(包含插件搜索)</a><br><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">guly中文网站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初识gulp自动化构建工具。一开始只是听过这个东西，没有尝试用过。听起来好像很高大上的样子，一直想要去尝试用一下，但一直没有去用过。一来现在的项目没有用到；二来之前好像确实是挺忙的，没有找到什么合适的时间去尝试用下；三来嘛感觉这么高大上的东西可能学起来应该会很难，会花费很多时间。&lt;br&gt;ps：很多事情只有去尝试了才会知道难不难，很多东西你觉得难可能是因为你没有用过它，或者不知道它是用来做什么的，只有你勇敢的踏出一步去尝试用下，你就会发现其实没有那么难。(●’◡’●)&lt;br&gt;
    
    </summary>
    
      <category term="自动化构建工具" scheme="https://vonfly.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gulp" scheme="https://vonfly.github.io/tags/gulp/"/>
    
      <category term="代码优化" scheme="https://vonfly.github.io/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一些常用的linux-commands</title>
    <link href="https://vonfly.github.io/2016/09/06/linux-commands/"/>
    <id>https://vonfly.github.io/2016/09/06/linux-commands/</id>
    <published>2016-09-06T15:00:08.000Z</published>
    <updated>2017-05-18T02:11:45.588Z</updated>
    
    <content type="html"><![CDATA[<p>常用的一些Linux命令<br><a id="more"></a></p>
<h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="查看目录下的文件"><a href="#查看目录下的文件" class="headerlink" title="查看目录下的文件"></a>查看目录下的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls</div><div class="line">ls -l	//显示文件的详细信息(包括权限信息)</div><div class="line">ls -al	//显示文件的详细信息(包括隐藏文件)</div></pre></td></tr></table></figure>
<h3 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd 目录名字</div></pre></td></tr></table></figure>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir newdir1	//创建单个新目录</div><div class="line">mkdir -p newdir1/newdir2/newdir3	//递归创建多级目录</div></pre></td></tr></table></figure>
<h3 id="移动目录"><a href="#移动目录" class="headerlink" title="移动目录"></a>移动目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv dir1 dir2	//dir1目录移动到dir2的目录下</div><div class="line">mv dir1 newdir 	//dir1移动到当前目录下，并改名字为newdir</div></pre></td></tr></table></figure>
<h3 id="复制（复制目录一般要加-R参数）"><a href="#复制（复制目录一般要加-R参数）" class="headerlink" title="复制（复制目录一般要加-R参数）"></a>复制（复制目录一般要加-R参数）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp -R dir1 newdir	//dir1复制到当前目录，并改名字为 newdir</div><div class="line">cp file dir1	//file文件复制到dir1下</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm file		//删除file文件</div><div class="line">rm -rf dir	//递归强制删除目录</div></pre></td></tr></table></figure>
<h3 id="查看当前操作目录位置"><a href="#查看当前操作目录位置" class="headerlink" title="查看当前操作目录位置"></a>查看当前操作目录位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pwd</div></pre></td></tr></table></figure>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat filename	//一次性把全部内容输出到终端</div><div class="line">more filename	//通过敲回车方式逐行查看文件内容，q键结束查看</div><div class="line">less filename	//&quot;上下左右&quot;键方式查看文件各部分内容，q键结束查看</div><div class="line">head -n filename    //查看文件的前n行内容</div><div class="line">tail -n filename    //查看文件的最后n行内容</div><div class="line">wc filename         //查看文件内容行数</div></pre></td></tr></table></figure>
<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch filename 	//在当前目录创建filename文件</div></pre></td></tr></table></figure>
<h3 id="给文件追加内容"><a href="#给文件追加内容" class="headerlink" title="给文件追加内容"></a>给文件追加内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo 内容 &gt; 文件	//把内容以覆盖写方式添加到文件中</div><div class="line">echo 内容 &gt;&gt; 文件	//把内容以追加方式添加到文件中</div><div class="line">//例：echo vonfly &gt; test</div></pre></td></tr></table></figure>
<p>说明：如果文件不存在会自动创建</p>
<h3 id="文件主人、组别设置"><a href="#文件主人、组别设置" class="headerlink" title="文件主人、组别设置"></a>文件主人、组别设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown 主人 filename</div><div class="line">chown 主人.组别名称 filename</div></pre></td></tr></table></figure>
<p>##组和用户的操作</p>
<h3 id="组的操作"><a href="#组的操作" class="headerlink" title="组的操作"></a>组的操作</h3><p>对应配置文件：/etc/group<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">groupadd 组名	//创建组（例：groupadd php）创建php这个组</div><div class="line">groupmod -n 新组名 原组名	//修改组（例：groupmod -n php python）把php这个组修改成python</div></pre></td></tr></table></figure></p>
<h3 id="用户的操作"><a href="#用户的操作" class="headerlink" title="用户的操作"></a>用户的操作</h3><p>对应配置文件：/etc/passwd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">useradd -g 组编号 用户名	//创建用户，顺便分组</div><div class="line">usermod -l 新用户名 原用户名	//修改用户名</div><div class="line">userdel -r 用户名	//删除用户信息同时删除用户家目录</div></pre></td></tr></table></figure></p>
<p>设置用户密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd 用户名	//例：passwd vonfly	(给vonfly设置新密码)</div></pre></td></tr></table></figure></p>
<h2 id="权限操作"><a href="#权限操作" class="headerlink" title="权限操作"></a>权限操作</h2><h3 id="字母相对方式设置权限"><a href="#字母相对方式设置权限" class="headerlink" title="字母相对方式设置权限"></a>字母相对方式设置权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod u+/-rwx,g+/-rwx,o+/-rwx filename	//主人，同组用户，其他组用户增加或减少权限，可以设置一个或多个权限</div><div class="line">chmod +w,-x filename	//统一给每一个组别设置统一权限（相当于给主人，同组用户，其他组用户增加了读的权限，减少了执行的权限）</div></pre></td></tr></table></figure>
<h3 id="数字绝对方式设置权限（会直接覆盖之前的权限）"><a href="#数字绝对方式设置权限（会直接覆盖之前的权限）" class="headerlink" title="数字绝对方式设置权限（会直接覆盖之前的权限）"></a>数字绝对方式设置权限（会直接覆盖之前的权限）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 621 filename	//表示给主人设置成读写权限，同组用户设置写权限，其他组用户设置执行权限</div><div class="line">chmod -R 777 dirname	//-R参数表示递归方式设置目录权限</div></pre></td></tr></table></figure>
<p>说明：<br>读：4，写：2，执行：1<br>0表示没有权限<br>1表示执行权限<br>2表示写权限<br>3表示写、执行权限<br>4表示读权限<br>5表示读、执行权限<br>6表示读、写权限<br>7表示读、写、执行权限</p>
<p>文件的读写执行具体表示：<br>读：表示是否可以查看文件内容<br>写：表示是否可以修改该文件<br>执行：一般表示执行shell脚本程序文件</p>
<p>目录的读写执行具体表示：<br>读：表示是否可以查看该目录下的文件信息<br>写：表示是否可以给该目录创建、删除文件<br>执行：表示用户是否可以通过cd进入该目录</p>
<h2 id="find文件查找指令"><a href="#find文件查找指令" class="headerlink" title="find文件查找指令"></a>find文件查找指令</h2><p>参数说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-name</td>
<td style="text-align:right">根据文件名字查找文件</td>
</tr>
<tr>
<td>-size</td>
<td style="text-align:right">根据文件大小查找文件</td>
</tr>
<tr>
<td>-maxdepth</td>
<td style="text-align:right">限制最深层次查找文件</td>
</tr>
<tr>
<td>-mindepth</td>
<td style="text-align:right">限制最浅层次查找文件</td>
</tr>
<tr>
<td>-perm</td>
<td style="text-align:right">把符合某个权限的文件给查找出来</td>
</tr>
<tr>
<td>-user</td>
<td style="text-align:right">根据主人查找文件</td>
</tr>
<tr>
<td>-group</td>
<td style="text-align:right">根据组别查找文件</td>
</tr>
</tbody>
</table>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">find /home -name vonfly		//在home目录下查找vonfly文件</div><div class="line">find /home -name &quot;v*&quot;		//在home目录下模糊查找带v字符开始的文件</div><div class="line"></div><div class="line">find /home -size 100c	//在home目录下找大小为100字节的文件</div><div class="line">find /home -size 100	//在home目录下找大小为100*512字节的文件</div><div class="line">find /home -size +10k	//在home目录下找大小大于10的文件</div><div class="line">find /home -size -10k	//在home目录下找大小小于10的文件</div><div class="line"></div><div class="line">find /home -maxdepth 3 -name vonfly		//在home目录下限制最深为3个目录层次，进行vonfly文件查找</div></pre></td></tr></table></figure>
<h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><h3 id="查看指令可以使用的参数"><a href="#查看指令可以使用的参数" class="headerlink" title="查看指令可以使用的参数"></a>查看指令可以使用的参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man 指令名称	//例：man useradd</div></pre></td></tr></table></figure>
<h3 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">su -	//切换到root超级管理员</div><div class="line">su vonfly	//切换到vonfly普通用户</div><div class="line">exit	//退回到原用户</div></pre></td></tr></table></figure>
<p>说明：一般su和exit是配对使用的，否则用户切换会叠加</p>
<h3 id="查看当前用户是谁"><a href="#查看当前用户是谁" class="headerlink" title="查看当前用户是谁"></a>查看当前用户是谁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">whoami	//显示当前正在操作系统的用户</div><div class="line">who am i 	//显示登录系统的用户</div></pre></td></tr></table></figure>
<h3 id="查看指令对应的可执行-二进制-文件位置"><a href="#查看指令对应的可执行-二进制-文件位置" class="headerlink" title="查看指令对应的可执行(二进制)文件位置"></a>查看指令对应的可执行(二进制)文件位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">which 指令名称	(如：which pwd)</div></pre></td></tr></table></figure>
<h3 id="查看系统活跃的进程"><a href="#查看系统活跃的进程" class="headerlink" title="查看系统活跃的进程"></a>查看系统活跃的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps -A</div><div class="line">ps -aux</div></pre></td></tr></table></figure>
<h3 id="将文本指定的信息匹配出来"><a href="#将文本指定的信息匹配出来" class="headerlink" title="将文本指定的信息匹配出来"></a>将文本指定的信息匹配出来</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep 关键字 文件的路径	//例：grep php ./test.txt 表示在当前文件test.txt中找php关键字</div></pre></td></tr></table></figure>
<h3 id="通过进程名称来查询程序-如mysql-是否有启用（管道使用）"><a href="#通过进程名称来查询程序-如mysql-是否有启用（管道使用）" class="headerlink" title="通过进程名称来查询程序(如mysql)是否有启用（管道使用）"></a>通过进程名称来查询程序(如mysql)是否有启用（管道使用）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps aux | grep mysql</div><div class="line">pstree -p | grep mysql	//方法2</div></pre></td></tr></table></figure>
<h3 id="通过端口查看程序是否有启用（管道使用）"><a href="#通过端口查看程序是否有启用（管道使用）" class="headerlink" title="通过端口查看程序是否有启用（管道使用）"></a>通过端口查看程序是否有启用（管道使用）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">netstat -anpl | grep 3306	//查看mysql（默认监听3306端口）</div><div class="line">netstat -anpl | grep 9000	//查看php（默认监听9000端口）</div><div class="line">netstat -tunpl | grep :3306	//方法2</div></pre></td></tr></table></figure>
<h3 id="查看系统分区情况"><a href="#查看系统分区情况" class="headerlink" title="查看系统分区情况"></a>查看系统分区情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df -lh</div><div class="line">df -h</div></pre></td></tr></table></figure>
<h3 id="查看目录或者文件的大小"><a href="#查看目录或者文件的大小" class="headerlink" title="查看目录或者文件的大小"></a>查看目录或者文件的大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du -h filename</div></pre></td></tr></table></figure>
<h3 id="关闭指定进程号的进程"><a href="#关闭指定进程号的进程" class="headerlink" title="关闭指定进程号的进程"></a>关闭指定进程号的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kill -9 pid		//强制关闭</div><div class="line">kill -15 pid	//正常关闭</div></pre></td></tr></table></figure>
<h3 id="查看内存使用"><a href="#查看内存使用" class="headerlink" title="查看内存使用"></a>查看内存使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">free -m</div></pre></td></tr></table></figure>
<h3 id="查看CPU使用"><a href="#查看CPU使用" class="headerlink" title="查看CPU使用"></a>查看CPU使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top</div></pre></td></tr></table></figure>
<h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shutdown -h now</div></pre></td></tr></table></figure>
<h3 id="可以切换终端"><a href="#可以切换终端" class="headerlink" title="可以切换终端"></a>可以切换终端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alt+f(1-6),共有6个终端</div></pre></td></tr></table></figure>
<h3 id="实时跟踪一个命令的执行结果-如跟踪ls-lh命令"><a href="#实时跟踪一个命令的执行结果-如跟踪ls-lh命令" class="headerlink" title="实时跟踪一个命令的执行结果(如跟踪ls -lh命令)"></a>实时跟踪一个命令的执行结果(如跟踪ls -lh命令)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">可以切换终端来查看具体效果</div><div class="line">watch -n1 ls -lh</div></pre></td></tr></table></figure>
<h3 id="加压方式"><a href="#加压方式" class="headerlink" title="加压方式"></a>加压方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.tar.gz------------------&gt; tar zxvf 压缩包名.tar.gz</div><div class="line">.tar.bz2-----------------&gt; tar jxvf 压缩包名.tar.bz2</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的一些Linux命令&lt;br&gt;
    
    </summary>
    
      <category term="命令" scheme="https://vonfly.github.io/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="linux" scheme="https://vonfly.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>一些常用的git-commands</title>
    <link href="https://vonfly.github.io/2016/06/18/git-commands/"/>
    <id>https://vonfly.github.io/2016/06/18/git-commands/</id>
    <published>2016-06-18T12:08:16.000Z</published>
    <updated>2017-02-23T12:39:51.802Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>常用的一些git命令以及平时项目遇到的一些问题解决方法<br><a id="more"></a></p>
<h3 id="git一些命令"><a href="#git一些命令" class="headerlink" title="git一些命令"></a>git一些命令</h3><p>在当前目录新建一个Git代码库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure></p>
<p>新建一个目录，将其初始化为Git代码库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init [project-name]</div></pre></td></tr></table></figure>
<p>下载一个项目和它的整个代码历史</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> [url]</div></pre></td></tr></table></figure>
<h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h4><p>添加指定文件到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add [file1] [file2] ...</div></pre></td></tr></table></figure></p>
<p>添加指定目录到暂存区，包括子目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add [dir]</div></pre></td></tr></table></figure></p>
<p>将所有修改过的工作文件提交暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ add .</div></pre></td></tr></table></figure></p>
<p>添加每个变化前，都会要求确认，<br>对于同一个文件的多处变化，可以实现分次提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add -p</div></pre></td></tr></table></figure></p>
<p>删除暂存区文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm file.name</div></pre></td></tr></table></figure></p>
<p>(工作区和暂存区都存在的情况下)删除工作区文件，同时删除暂存区文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm <span class="_">-f</span> file.name</div></pre></td></tr></table></figure></p>
<p>(工作区和暂存区都存在的情况下)不删除工作区文件，删除暂存区文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm --cached file.name</div></pre></td></tr></table></figure></p>
<p>改名文件，并且将这个改名放入暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure></p>
<h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><p>提交暂存区到仓库区（提交说明要用英文引号）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m [提交说明]</div></pre></td></tr></table></figure></p>
<p>提交暂存区到仓库区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit [file1] [file2] ... -m [提交说明]</div></pre></td></tr></table></figure></p>
<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>列出所有本地分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure></p>
<p>列出所有远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div></pre></td></tr></table></figure></p>
<p>列出所有本地分支和远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-a</span></div></pre></td></tr></table></figure></p>
<p>新建一个分支，但依然停留在当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch [branch-name]</div></pre></td></tr></table></figure></p>
<p>新建一个分支，并切换到该分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b [branch]</div></pre></td></tr></table></figure></p>
<p>新建一个分支，指向指定commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch [branch] [commit]</div></pre></td></tr></table></figure></p>
<p>新建一个分支，与指定的远程分支建立追踪关系<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --track [branch] [remote-branch]</div></pre></td></tr></table></figure></p>
<p>切换到指定分支，并更新工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [branch-name]</div></pre></td></tr></table></figure></p>
<p>切换到上一个分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -</div></pre></td></tr></table></figure></p>
<p>建立追踪关系，在现有分支与指定的远程分支之间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div></pre></td></tr></table></figure></p>
<p>合并指定分支到当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge [branch]</div></pre></td></tr></table></figure></p>
<p>选择一个commit，合并进当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git cherry-pick [commit]</div></pre></td></tr></table></figure></p>
<p>删除分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-d</span> [branch-name]</div></pre></td></tr></table></figure></p>
<p>删除远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure></p>
<h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><p>显示有变更的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure></p>
<p>显示当前分支的版本历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span></div></pre></td></tr></table></figure></p>
<p>显示之后版本历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div></pre></td></tr></table></figure></p>
<p>显示commit历史，以及每次commit发生变更的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --stat</div></pre></td></tr></table></figure></p>
<p>搜索提交历史，根据关键词<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div></pre></td></tr></table></figure></p>
<p>显示某个文件的版本历史，包括文件改名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --follow [file]</div><div class="line">$ git whatchanged [file]</div></pre></td></tr></table></figure></p>
<p>显示指定文件相关的每一次diff<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -p [file]</div></pre></td></tr></table></figure></p>
<p>显示过去5次提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</div></pre></td></tr></table></figure></p>
<p>显示指定文件是什么人在什么时间修改过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git blame [file]</div></pre></td></tr></table></figure></p>
<p>显示暂存区和工作区的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff</div></pre></td></tr></table></figure></p>
<p>显示暂存区和上一个commit的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff --cached [file]</div></pre></td></tr></table></figure></p>
<p>显示工作区与当前分支最新commit之间的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD</div></pre></td></tr></table></figure></p>
<p>显示两次提交之间的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff [first-branch]...[second-branch]</div></pre></td></tr></table></figure></p>
<h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><p>下载远程仓库的所有变动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch [remote]</div></pre></td></tr></table></figure></p>
<p>显示所有远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div></pre></td></tr></table></figure></p>
<p>显示某个远程仓库的信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote show [remote]</div></pre></td></tr></table></figure></p>
<p>增加一个新的远程仓库，并命名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add [shortname] [url]</div></pre></td></tr></table></figure></p>
<p>取回远程仓库的变化，并与本地分支合并<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull [remote] [branch]</div></pre></td></tr></table></figure></p>
<p>上传本地指定分支到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] [branch]</div></pre></td></tr></table></figure></p>
<p>推送所有分支到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure></p>
<h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><p>恢复暂存区的指定文件到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [file]</div></pre></td></tr></table></figure></p>
<p>恢复某个commit的指定文件到暂存区和工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [commit] [file]</div></pre></td></tr></table></figure></p>
<p>恢复暂存区的所有文件到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout .</div></pre></td></tr></table></figure></p>
<h5 id="整个版本的撤销"><a href="#整个版本的撤销" class="headerlink" title="整个版本的撤销"></a>整个版本的撤销</h5><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset [file]</div></pre></td></tr></table></figure></p>
<p>重置暂存区与工作区，与上一次commit保持一致<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard [commit]</div></pre></td></tr></table></figure></p>
<h4 id="显示当前的Git配置"><a href="#显示当前的Git配置" class="headerlink" title="显示当前的Git配置"></a>显示当前的Git配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --list</div></pre></td></tr></table></figure>
<p>编辑Git配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config <span class="_">-e</span> [--global]</div></pre></td></tr></table></figure></p>
<p>设置提交代码时的用户信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config [--global] user.name <span class="string">"your username"</span></div><div class="line">$ git config [--global] user.email <span class="string">"your e-mail"</span></div></pre></td></tr></table></figure></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="多人协作解决冲突"><a href="#多人协作解决冲突" class="headerlink" title="多人协作解决冲突"></a>多人协作解决冲突</h4><p>推荐方法1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git fetch</div><div class="line">$ git diff master origin/master</div><div class="line">$ git merge orgin/master</div></pre></td></tr></table></figure></p>
<p>方法2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">阮一峰-常用 Git 命令清单</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;常用的一些git命令以及平时项目遇到的一些问题解决方法&lt;br&gt;
    
    </summary>
    
      <category term="命令" scheme="https://vonfly.github.io/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="命令使用" scheme="https://vonfly.github.io/tags/%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    
      <category term="git" scheme="https://vonfly.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>多台电脑共同管理hexo博客</title>
    <link href="https://vonfly.github.io/2016/02/18/hexo-version-control/"/>
    <id>https://vonfly.github.io/2016/02/18/hexo-version-control/</id>
    <published>2016-02-18T02:33:57.000Z</published>
    <updated>2017-02-18T01:34:29.014Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo搭建博客，如果换了电脑怎么更新博客？如果你有备份源文件那还好，但是每次都要备份感觉太麻烦了。<br>这里介绍一种方法就是使用github分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。<br>网上也有其他的方法，大家可以去搜一下，自己看看哪种适合自己，我用这种方法一方面我git命令也不太熟，所以想多写写，多学学。<br><a id="more"></a></p>
<p>先删除主题文件下的.git文件，<br>可以直接删除或者执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm -rf .git</div></pre></td></tr></table></figure>
<p>然后在本地博客文件夹下边依次输入以下指令(部分指令因为有提示可以自己修改下)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git checkout -b hexo</div><div class="line">$ git remote add origin git@github.com:vonfly（你自己giuhub账号名）/vonfly.github.io（项目名）.git</div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"提交说明"</span></div><div class="line">$ git push origin hexo</div></pre></td></tr></table></figure>
<p>执行到这里我们就已经把本地的源文件添加到了分支hexo上。</p>
<p>说明：博客文件夹下根目录.gitignore（此文件的作用是因此忽略所写的文件或者目录，加快push速度。）可以不修改，我的就没有修改，如果不修改的话<br>在；另外一台电脑上克隆下来的博客项目就要先运行一下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>我的.gitignore文件内容为<br>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p>
<p>当然你也可以把node_modules/去掉，这样在另外的电脑克隆下来的项目就不用在运行上面的命令了</p>
<p>扩展：</p>
<h3 id="github常见操作和常见错误！"><a href="#github常见操作和常见错误！" class="headerlink" title="github常见操作和常见错误！"></a>github常见操作和常见错误！</h3><h4 id="如果输入-git-remote-add-origin-git-github-com-vonfly（github帐号名）-vonfly-github-io（项目名）-git"><a href="#如果输入-git-remote-add-origin-git-github-com-vonfly（github帐号名）-vonfly-github-io（项目名）-git" class="headerlink" title="如果输入$ git remote add origin git@github.com:vonfly（github帐号名）/vonfly.github.io（项目名）.git"></a>如果输入$ git remote add origin git@github.com:vonfly（github帐号名）/vonfly.github.io（项目名）.git</h4><p>提示出错信息：fatal: remote origin already exists.</p>
<p>解决办法如下：<br>    1、先输入$ git remote rm origin<br>    2、再输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git 就不会报错了！</p>
<h4 id="如果输入-git-remote-rm-origin-还是报错的话，"><a href="#如果输入-git-remote-rm-origin-还是报错的话，" class="headerlink" title="如果输入$ git remote rm origin 还是报错的话，"></a>如果输入$ git remote rm origin 还是报错的话，</h4><p>error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容<br>4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc<br>5、找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！</p>
<h4 id="如果输入-git-push-origin-master"><a href="#如果输入-git-push-origin-master" class="headerlink" title="如果输入$ git push origin master"></a>如果输入$ git push origin master</h4><p>提示出错信息：error:failed to push som refs to …….<br>解决办法如下：<br>    1、先输入$ git pull origin master //先把远程服务器github上面的文件拉下来<br>    2、再输入$ git push origin master<br>    3、如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository.<br>    4、则需要重新输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用hexo搭建博客，如果换了电脑怎么更新博客？如果你有备份源文件那还好，但是每次都要备份感觉太麻烦了。&lt;br&gt;这里介绍一种方法就是使用github分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。&lt;br&gt;网上也有其他的方法，大家可以去搜一下，自己看看哪种适合自己，我用这种方法一方面我git命令也不太熟，所以想多写写，多学学。&lt;br&gt;
    
    </summary>
    
      <category term="其它" scheme="https://vonfly.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="hexo" scheme="https://vonfly.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>常用的一些命令</title>
    <link href="https://vonfly.github.io/2016/02/16/common-commands/"/>
    <id>https://vonfly.github.io/2016/02/16/common-commands/</id>
    <published>2016-02-16T12:20:58.000Z</published>
    <updated>2017-02-20T12:16:02.027Z</updated>
    
    <content type="html"><![CDATA[<p>平时写博客会用到的一些命令<br><a id="more"></a></p>
<h3 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h3><p>init 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init [folder]</div></pre></td></tr></table></figure></p>
<p>new 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure></p>
<p>generate 生成网站(即生成静态文件)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d, –deploy</td>
<td style="text-align:right">文件生成后立即部署网站</td>
</tr>
<tr>
<td>-w, –watch</td>
<td style="text-align:right">监视文件变动</td>
</tr>
</tbody>
</table>
<p>server 启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="external">http://localhost:4000/。</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p, –port</td>
<td style="text-align:right">重设端口</td>
</tr>
<tr>
<td>-s, –static</td>
<td style="text-align:right">只使用静态文件</td>
</tr>
<tr>
<td>-l, –log</td>
<td style="text-align:right">启动日志记录，使用覆盖记录格式</td>
</tr>
</tbody>
</table>
<p>deploy 部署网站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-g, –generate</td>
<td style="text-align:right">部署之前预先生成静态文件</td>
</tr>
</tbody>
</table>
<p>clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure></p>
<p>version 显示 Hexo 版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo version</div></pre></td></tr></table></figure></p>
<p>安装 Hexo Algolia 扩展（用于页面搜索）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-algolia@0.2.0</div></pre></td></tr></table></figure></p>
<p>来更新 Index（相当于把博客下的文章更新到algolia数据库）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo algolia</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时写博客会用到的一些命令&lt;br&gt;
    
    </summary>
    
      <category term="命令" scheme="https://vonfly.github.io/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="命令使用" scheme="https://vonfly.github.io/tags/%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    
      <category term="hexo" scheme="https://vonfly.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法-本页面主要用于自己学习</title>
    <link href="https://vonfly.github.io/2016/02/07/markdown-grammar/"/>
    <id>https://vonfly.github.io/2016/02/07/markdown-grammar/</id>
    <published>2016-02-07T14:39:13.000Z</published>
    <updated>2017-02-24T12:30:51.121Z</updated>
    
    <content type="html"><![CDATA[<p>本页面主要用于自己学习的，方便以后写作。当然了，偶尔忘记可以查看一下，文章最底下也有链接，大家可以查看链接的语法说明(●’◡’●)</p>
<a id="more"></a>
<h1 id="欢迎使用-Cmd-Markdown-编辑阅读器"><a href="#欢迎使用-Cmd-Markdown-编辑阅读器" class="headerlink" title="欢迎使用 Cmd Markdown 编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>
<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external">Todo 列表</a></h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># A comment</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>
<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="external">甘特图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">title 项目开发流程</div><div class="line">section 项目确定</div><div class="line">    需求分析       :a1, 2016-06-22, 3d</div><div class="line">    可行性报告     :after a1, 5d</div><div class="line">    概念验证       : 5d</div><div class="line">section 项目实施</div><div class="line">    概要设计      :2016-07-05  , 5d</div><div class="line">    详细设计      :2016-07-08, 10d</div><div class="line">    编码          :2016-07-15, 10d</div><div class="line">    测试          :2016-07-22, 5d</div><div class="line">section 发布验收</div><div class="line">    发布: 2d</div><div class="line">    验收: 3d</div></pre></td></tr></table></figure>
<h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="external">@ghosert</a><br>2016 年 07月 07日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
<p>参考：<br><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd Markdown 编辑阅读器</a><br><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">Markdown 语法说明 (简体中文版)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本页面主要用于自己学习的，方便以后写作。当然了，偶尔忘记可以查看一下，文章最底下也有链接，大家可以查看链接的语法说明(●’◡’●)&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="https://vonfly.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="Markdown语法" scheme="https://vonfly.github.io/tags/Markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
