<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编程、人生</title>
  <subtitle>前端 | 后台 | linux</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vonfly.github.io/"/>
  <updated>2017-02-28T11:54:17.811Z</updated>
  <id>https://vonfly.github.io/</id>
  
  <author>
    <name>阿东</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>收集、总结的一些PHP理论知识（对于面试有帮助）</title>
    <link href="https://vonfly.github.io/2017/02/28/php-knowledge/"/>
    <id>https://vonfly.github.io/2017/02/28/php-knowledge/</id>
    <published>2017-02-28T11:43:19.000Z</published>
    <updated>2017-02-28T11:54:17.811Z</updated>
    
    <content type="html"><![CDATA[<p>本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。主要用于自己学习。如发现本网站载有侵犯您著作权的侵权信息，可联系我删除(●’◡’●)</p>
<a id="more"></a>
<h4 id="用最少的代码写一个求3值最大值的函数"><a href="#用最少的代码写一个求3值最大值的函数" class="headerlink" title="用最少的代码写一个求3值最大值的函数"></a>用最少的代码写一个求3值最大值的函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">($a,$b,$c)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> $a &gt; $b ? ($a &gt; $c ? $a : $c) : ($b &gt; $c ? $b : $c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="用PHP打印出前一天的时间，打印格式是2007年5月10日22-21-21"><a href="#用PHP打印出前一天的时间，打印格式是2007年5月10日22-21-21" class="headerlink" title="用PHP打印出前一天的时间，打印格式是2007年5月10日22:21:21"></a>用PHP打印出前一天的时间，打印格式是2007年5月10日22:21:21</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'-1 day'</span>));</div></pre></td></tr></table></figure>
<h4 id="输出正在浏览当前页面用户的IP地址"><a href="#输出正在浏览当前页面用户的IP地址" class="headerlink" title="输出正在浏览当前页面用户的IP地址"></a>输出正在浏览当前页面用户的IP地址</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</div></pre></td></tr></table></figure>
<h4 id="查询（query）的字符串URL中第一个问号-之后的内容（比如http-localhost-text-php-id-1-amp-bi-2，查询出-id-1-amp-bi-2-）"><a href="#查询（query）的字符串URL中第一个问号-之后的内容（比如http-localhost-text-php-id-1-amp-bi-2，查询出-id-1-amp-bi-2-）" class="headerlink" title="查询（query）的字符串URL中第一个问号 ? 之后的内容（比如http://localhost/text.php?id=1&amp;bi=2，查询出 id=1&amp;bi=2 ）"></a>查询（query）的字符串URL中第一个问号 ? 之后的内容（比如<a href="http://localhost/text.php?id=1&amp;bi=2，查询出" target="_blank" rel="external">http://localhost/text.php?id=1&amp;bi=2，查询出</a> id=1&amp;bi=2 ）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"QUERY_STRING"</span>];</div></pre></td></tr></table></figure>
<h4 id="当前运行脚本所在的文档根目录"><a href="#当前运行脚本所在的文档根目录" class="headerlink" title="当前运行脚本所在的文档根目录"></a>当前运行脚本所在的文档根目录</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"DOCUMENT_ROOT"</span>];</div></pre></td></tr></table></figure>
<h4 id="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹"><a href="#写一个函数，能够遍历一个文件夹下的所有文件和子文件夹" class="headerlink" title="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹"></a>写一个函数，能够遍历一个文件夹下的所有文件和子文件夹</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_scandir</span><span class="params">($dir)</span></span></div><div class="line">&#123;</div><div class="line">	$files=<span class="keyword">array</span>();</div><div class="line">	<span class="keyword">if</span>(is_dir($dir))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>($handle=opendir($dir))</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">while</span>(($file=readdir($handle))!==<span class="keyword">false</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>($file!=<span class="string">"."</span> &amp;&amp; $file!=<span class="string">".."</span>)</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(is_dir($dir.<span class="string">"/"</span>.$file))</div><div class="line">					&#123;</div><div class="line">						$files[$file]=my_scandir($dir.<span class="string">"/"</span>.$file);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span></div><div class="line">					&#123;</div><div class="line">						$files[]=$dir.<span class="string">"/"</span>.$file;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			closedir($handle);</div><div class="line">			<span class="keyword">return</span> $files;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var_dump(my_scandir(<span class="string">"F:ali"</span>));</div></pre></td></tr></table></figure>
<h4 id="请用正则表达式（Regular-Expression）验证电子邮件的格式是否正确。"><a href="#请用正则表达式（Regular-Expression）验证电子邮件的格式是否正确。" class="headerlink" title="请用正则表达式（Regular Expression）验证电子邮件的格式是否正确。"></a>请用正则表达式（Regular Expression）验证电子邮件的格式是否正确。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$email = <span class="string">'1185236@163.com'</span>;</div><div class="line"><span class="keyword">if</span>( !preg_match(<span class="string">'/^[\w.]+@([\w.]+)\.[a-z]&#123;2,6&#125;$/i'</span>, $email) )</div><div class="line">&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"电子邮件格式不正确！"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"电子邮件格式正确！"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="用PHP写出显示客户端IP与服务器IP的代码"><a href="#用PHP写出显示客户端IP与服务器IP的代码" class="headerlink" title="用PHP写出显示客户端IP与服务器IP的代码"></a>用PHP写出显示客户端IP与服务器IP的代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"REMOTE_ADDR"</span>];		<span class="comment">//客户端IP</span></div><div class="line"><span class="keyword">echo</span> gethostbyname(<span class="string">"www.baidu.com"</span>);	<span class="comment">//服务器IP</span></div></pre></td></tr></table></figure>
<h4 id="如何修改SESSION的生存时间"><a href="#如何修改SESSION的生存时间" class="headerlink" title="如何修改SESSION的生存时间"></a>如何修改SESSION的生存时间</h4><p>方法1：将php.ini中的session.gc_maxlifetime设置为9999重启apache</p>
<p>方法2：在当前项目中修改<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$expire = <span class="number">3600</span> * <span class="number">3</span>;</div><div class="line">ini_set(<span class="string">'session.gc_maxlifetime'</span>, $expire);</div><div class="line">ini_set(<span class="string">'session.cookie_lifetime'</span>, $expire);</div></pre></td></tr></table></figure></p>
<h4 id="有一个网页地址-比如百度主页-http-www-baidu-com-如何得到它的内容"><a href="#有一个网页地址-比如百度主页-http-www-baidu-com-如何得到它的内容" class="headerlink" title="有一个网页地址, 比如百度主页: http://www.baidu.com/,如何得到它的内容?"></a>有一个网页地址, 比如百度主页: <a href="http://www.baidu.com/,如何得到它的内容?" target="_blank" rel="external">http://www.baidu.com/,如何得到它的内容?</a></h4><p>方法1：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$readcontents = fopen(<span class="string">"http://www.baidu.com/"</span>, <span class="string">"rb"</span>);</div><div class="line">$contents = stream_get_contents($readcontents);</div><div class="line">fclose($readcontents);</div><div class="line"><span class="keyword">echo</span> $contents;</div></pre></td></tr></table></figure></p>
<p>方法2：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$readcontents = file_get_contents(<span class="string">"http://www.baidu.com/"</span>);</div><div class="line"><span class="keyword">echo</span> $readcontents;</div></pre></td></tr></table></figure></p>
<h4 id="请说明php中传值与传引用的区别。什么时候传值什么时候传引用"><a href="#请说明php中传值与传引用的区别。什么时候传值什么时候传引用" class="headerlink" title="请说明php中传值与传引用的区别。什么时候传值什么时候传引用?"></a>请说明php中传值与传引用的区别。什么时候传值什么时候传引用?</h4><p>按值传递：函数范围内对值的任何改变在函数外部都会被忽略</p>
<p>按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改</p>
<p>优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。</p>
<p>按引用传递则不需要复制值，对于性能提高很有好处。</p>
<h4 id="写一个函数，尽可能高效的，从一个标准-url-里取出文件的扩展名"><a href="#写一个函数，尽可能高效的，从一个标准-url-里取出文件的扩展名" class="headerlink" title="写一个函数，尽可能高效的，从一个标准 url 里取出文件的扩展名"></a>写一个函数，尽可能高效的，从一个标准 url 里取出文件的扩展名</h4><p>例如: <a href="http://www.sina.com.cn/abc/de/fg.php?id=1" target="_blank" rel="external">http://www.sina.com.cn/abc/de/fg.php?id=1</a> 需要取出 php 或 .php<br>方法1：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span><span class="params">($url)</span></span>&#123;</div><div class="line">	$arr = parse_url($url);</div><div class="line">	$file = basename($arr[<span class="string">'path'</span>]);</div><div class="line">	$ext = explode(<span class="string">"."</span>, $file);</div><div class="line">	<span class="keyword">return</span> $ext[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> getExt(<span class="string">'http://www.sina.com.cn/abc/de/fg.php?id=1'</span>);</div></pre></td></tr></table></figure></p>
<p>方法2：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span><span class="params">($url)</span> </span>&#123;</div><div class="line">	$url = basename($url);</div><div class="line">	$pos1 = strpos($url, <span class="string">"."</span>);</div><div class="line">	$pos2 = strpos($url, <span class="string">"?"</span>);</div><div class="line">	$length = $pos2 - $pos1 - <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(strstr($url, <span class="string">"?"</span>))&#123;</div><div class="line">		<span class="keyword">return</span> substr($url, $pos1 + <span class="number">1</span>, $length);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> substr($url, $pos1);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> getExt(<span class="string">'http://www.sina.com.cn/abc/de/fg.php?id=1'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="使用五种以上方式获取一个文件的扩展名"><a href="#使用五种以上方式获取一个文件的扩展名" class="headerlink" title="使用五种以上方式获取一个文件的扩展名"></a>使用五种以上方式获取一个文件的扩展名</h4><p>要求：dir/upload.image.jpg，找出 .jpg 或者 jpg ，<br>必须使用PHP自带的处理函数进行处理，方法不能明显重复，可以封装成函数，比如 get_ext1($file_name), get_ext2($file_name)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload.image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext1</span><span class="params">($file_name)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> strrchr($file_name, <span class="string">'.'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext1($file_name);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload.image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext2</span><span class="params">($file_name)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> substr( $file_name, strrpos($file_name, <span class="string">'.'</span>) );</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext2($file_name);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload/image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext3</span><span class="params">($file_name)</span></span>&#123;</div><div class="line">	$stack = explode(<span class="string">'.'</span>, $file_name);</div><div class="line">	$fruit = array_pop($stack);</div><div class="line">	<span class="keyword">return</span> $fruit;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext3($file_name);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload/image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext4</span><span class="params">($file_name)</span></span>&#123;</div><div class="line">	$p = pathinfo($file_name);</div><div class="line">	<span class="keyword">return</span> $p[<span class="string">'extension'</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext4($file_name);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$file_name = <span class="string">'dir/upload/image.jpg'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext5</span><span class="params">($file_name)</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span> strrev(substr(strrev($file_name), <span class="number">0</span>, strpos(strrev($file_name), <span class="string">'.'</span>)));</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_ext5($file_name);</div></pre></td></tr></table></figure>
<h4 id="输出以下值"><a href="#输出以下值" class="headerlink" title="输出以下值"></a>输出以下值</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$str1 = <span class="keyword">null</span>;</div><div class="line">$str2 = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">echo</span> $str1==$str2 ? <span class="string">'相等'</span> : <span class="string">'不相等'</span>;</div><div class="line"><span class="comment">//输出相等</span></div><div class="line"></div><div class="line">$str3 = <span class="string">''</span>;</div><div class="line">$str4 = <span class="number">0</span>;</div><div class="line"><span class="keyword">echo</span> $str3==$str4 ? <span class="string">'相等'</span> : <span class="string">'不相等'</span>;</div><div class="line"><span class="comment">//输出相等</span></div><div class="line"></div><div class="line">$str5 = <span class="number">0</span>;</div><div class="line">$str6 = <span class="string">'0'</span>;</div><div class="line"><span class="keyword">echo</span> $str5===$str6 ? <span class="string">'相等'</span> : <span class="string">'不相等'</span>;</div><div class="line"><span class="comment">//输出不相等</span></div></pre></td></tr></table></figure>
<h4 id="MySQL数据库中的字段类型varchar和char的主要区别是什么-那种字段的查找效率要高，为什么"><a href="#MySQL数据库中的字段类型varchar和char的主要区别是什么-那种字段的查找效率要高，为什么" class="headerlink" title="MySQL数据库中的字段类型varchar和char的主要区别是什么?那种字段的查找效率要高，为什么?"></a>MySQL数据库中的字段类型varchar和char的主要区别是什么?那种字段的查找效率要高，为什么?</h4><p>varchar是变长，节省存储空间，char是固定长度。查找效率要char型快，因为varchar是非定长，必须先查找长度，然后进行数据的提取，比char定长类型多了一个步骤，所以效率低一些</p>
<h4 id="写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）"><a href="#写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）" class="headerlink" title="写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）"></a>写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）</h4><p>MyISAM、InnoDB、BDB（Berkeley DB）、Merge、Memory（Heap）、Example、Federated、Archive、CSV、Blackhole、MaxDB 等等十几个引擎</p>
<h4 id="求两个日期的差数，例如2007-2-5-2007-3-6-的日期差数"><a href="#求两个日期的差数，例如2007-2-5-2007-3-6-的日期差数" class="headerlink" title="求两个日期的差数，例如2007-2-5 ~ 2007-3-6 的日期差数"></a>求两个日期的差数，例如2007-2-5 ~ 2007-3-6 的日期差数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_days</span><span class="params">($date1, $date2)</span></span></div><div class="line">&#123;</div><div class="line">	$time1 = strtotime($date1);</div><div class="line">	$time2 = strtotime($date2);</div><div class="line">	<span class="keyword">return</span> abs($time2-$time1)/<span class="number">86400</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> get_days(<span class="string">'2007-2-5'</span>, <span class="string">'2007-2-6'</span>);</div></pre></td></tr></table></figure>
<h4 id="请写一个函数，实现以下功能："><a href="#请写一个函数，实现以下功能：" class="headerlink" title="请写一个函数，实现以下功能："></a>请写一个函数，实现以下功能：</h4><p>字符串”open_door” 转换成 “OpenDoor”、”make_by_id” 转换成 “MakeById”<br>方法一：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_explode</span><span class="params">($str)</span></span>&#123;</div><div class="line">	$str_arr=explode(<span class="string">"_"</span>,$str);</div><div class="line">	$str_implode=implode(<span class="string">" "</span>, $str_arr);</div><div class="line">	$str_implode=implode(<span class="string">""</span>, explode(<span class="string">" "</span>,ucwords($str_implode)));</div><div class="line">	<span class="keyword">return</span> $str_implode;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> str_explode(<span class="string">'open_door'</span>);</div></pre></td></tr></table></figure></p>
<p>方法二：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$str = <span class="string">'open_door'</span>;</div><div class="line">$expStr = explode(<span class="string">"_"</span>, $str);</div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($expStr); $i++)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">echo</span> ucwords($expStr[$i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法三：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> str_replace(<span class="string">' '</span>, <span class="string">''</span>, ucwords( str_replace(<span class="string">'_'</span>, <span class="string">' '</span>, <span class="string">'open_door'</span>) ) );</div></pre></td></tr></table></figure></p>
<h4 id="echo-count-“abc”-输出什么"><a href="#echo-count-“abc”-输出什么" class="headerlink" title="echo count(“abc”); 输出什么?"></a>echo count(“abc”); 输出什么?</h4><p>答案：1<br>说明：count — 计算数组中的单元数目或对象中的属性个数<br>int count ( mixed$var [, int $mode ] ), 如果 var 不是数组类型或者实现了 Countable 接口的对象，将返回1，有一个例外，如果 var 是 NULL 则结果是 0。</p>
<p>对于对象，如果安装了 SPL，可以通过实现 Countable 接口来调用 count()。该接口只有一个方法 count()，此方法返回 count() 函数的返回值。</p>
<h3 id="有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）"><a href="#有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）" class="headerlink" title="有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）"></a>有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span><span class="params">(&amp;$arr)</span></span></div><div class="line">&#123;</div><div class="line">	$cnt = count($arr);</div><div class="line">	$flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $cnt; $i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>($flag == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		$flag = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt; $cnt-$i<span class="number">-1</span>; $j++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>($arr[$j] &gt; $arr[$j+<span class="number">1</span>])</div><div class="line">			&#123;</div><div class="line">				$tmp = $arr[$j];</div><div class="line">				$arr[$j] = $arr[$j+<span class="number">1</span>];</div><div class="line">				$arr[$j+<span class="number">1</span>] = $tmp;</div><div class="line">				$flag = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$test=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">7</span>);</div><div class="line">BubbleSort($test);</div><div class="line">var_dump($test);</div></pre></td></tr></table></figure>
<h4 id="请举例说明在你的开发过程中用什么方法来加快页面的加载速度"><a href="#请举例说明在你的开发过程中用什么方法来加快页面的加载速度" class="headerlink" title="请举例说明在你的开发过程中用什么方法来加快页面的加载速度"></a>请举例说明在你的开发过程中用什么方法来加快页面的加载速度</h4><p>答：要用到服务器资源时才打开，及时关闭服务器资源，数据库添加索引，页面可生成静态，图片等大文件单独服务器。使用代码优化工具</p>
<h4 id="HTTP协议中GET、POST和HEAD的区别"><a href="#HTTP协议中GET、POST和HEAD的区别" class="headerlink" title="HTTP协议中GET、POST和HEAD的区别?"></a>HTTP协议中GET、POST和HEAD的区别?</h4><p>HEAD： 只请求页面的首部。</p>
<p>GET： 请求指定的页面信息，并返回实体主体。</p>
<p>POST： 请求服务器接受所指定的文档作为对所标识的URI的新的从属实体。</p>
<p>（1）HTTP 定义了与服务器交互的不同方法，最基本的方法是 GET 和 POST。事实上 GET 适用于多数请求，而保留 POST 仅用于更新站点。</p>
<p>（2）在FORM提交的时候，如果不指定Method，则默认为GET请 求，Form中提交的数据将会附加在url之后，以?分开与url分开。字母数字字符原样发送，但空格转换为“+“号，其它符号转换为%XX,其中XX为 该符号以16进制表示的ASCII（或ISO Latin-1）值。GET请求请提交的数据放置在HTTP请求协议头中，而POST提交的数据则放在实体数据中；</p>
<p>GET方式提交的数据最多只能有1024字节，而POST则没有此限制。</p>
<p>（3）GET 这个是浏览器用语向服务器请求最常用的方法。POST这个方法也是用来传送数据的，但是与GET不同的是，使用POST的时候，数据不是附在URI后面传递的，而是要做为独立的行来传递，此时还必须要发送一个Content_length标题，以标明数据长度，随后一个空白行，然后就是实际传送的数据。网页的表单通常是用POST来传送的。</p>
<h4 id="Cookie和session的区别，禁止了cookie后session能正常使用吗-session的缺点是什么-session在服务器端是存在哪里的-是共有的还是私有的"><a href="#Cookie和session的区别，禁止了cookie后session能正常使用吗-session的缺点是什么-session在服务器端是存在哪里的-是共有的还是私有的" class="headerlink" title="Cookie和session的区别，禁止了cookie后session能正常使用吗?session的缺点是什么?session在服务器端是存在哪里的?是共有的还是私有的?"></a>Cookie和session的区别，禁止了cookie后session能正常使用吗?session的缺点是什么?session在服务器端是存在哪里的?是共有的还是私有的?</h4><p>答：<br>COOKIE保存在客户端，用户通过手段可以进行修改，不安全，单个cookie允许的最大值是3k。</p>
<p>而SESSION保存在服务器端，相对比较安全，大小没有限制。</p>
<p>Session依赖于cookie进行传递。</p>
<p>禁用了cookie之后session不能正常使用。</p>
<p>Session的缺点：保存在服务器端，每次读取都从服务器进行读取，对服务器有资源消耗。</p>
<p>Session保存在服务器端的文件或数据库中，默认保存在文件中，文件路径由php配置文件的session.save_path指定。</p>
<p>Session文件是公有的。</p>
<h4 id="写几个魔术方法并说明作用"><a href="#写几个魔术方法并说明作用" class="headerlink" title="写几个魔术方法并说明作用?"></a>写几个魔术方法并说明作用?</h4><p>__call()当调用不存在的方法时会自动调用的方法</p>
<p>__autoload()在实例化一个尚未被定义的类是会自动调用次方法来加载类文件</p>
<p>__set()当给未定义的变量赋值时会自动调用的方法</p>
<p>__get()当获取未定义变量的值时会自动调用的方法</p>
<p>__construct()构造方法，实例化类时自动调用的方法</p>
<p>__destroy()销毁对象时自动调用的方法</p>
<p>__unset()当对一个未定义变量调用unset()时自动调用的方法</p>
<p>__isset()当对一个未定义变量调用isset()方法时自动调用的方法</p>
<p>__clone()克隆一个对象</p>
<p>__tostring()当输出一个对象时自动调用的方法</p>
<h4 id="数组中下标最好是什么类型的，为什么"><a href="#数组中下标最好是什么类型的，为什么" class="headerlink" title="数组中下标最好是什么类型的，为什么?"></a>数组中下标最好是什么类型的，为什么?</h4><p>数组的下标最好是数字类型的，数字类型的处理速度快</p>
<h4 id="i和i-哪一个效率高，为什么"><a href="#i和i-哪一个效率高，为什么" class="headerlink" title="++i和i++哪一个效率高，为什么?"></a>++i和i++哪一个效率高，为什么?</h4><p>++i效率比i++的效率更高，因为++i少了一个返回i的过程。</p>
<h4 id="echo-、print-、print-r-的区别"><a href="#echo-、print-、print-r-的区别" class="headerlink" title="echo()、print()、print_r()的区别?"></a>echo()、print()、print_r()的区别?</h4><p>echo 是php语法，可以输出多个变量，不能输出数组。</p>
<p>Print()是php中的函数，只能输出简单的变量。</p>
<p>Print_r()是php中的函数，可以输出变量也可以输出数组。</p>
<h4 id="框架中什么是单一入口和多入口，单一入口的优缺点"><a href="#框架中什么是单一入口和多入口，单一入口的优缺点" class="headerlink" title="框架中什么是单一入口和多入口，单一入口的优缺点?"></a>框架中什么是单一入口和多入口，单一入口的优缺点?</h4><p>1、多入口就是通过访问不同的文件来完成用户请求。<br>单一入口只web程序所有的请求都指向一个脚本文件的。<br>2、单一入口更容易控制权限，方便对http请求可以进行安全性检查。<br>缺点：URL看起来不那么美观，特别是对搜索引擎来说不友好。</p>
<h4 id="提示类型200、404、502是什么意思。"><a href="#提示类型200、404、502是什么意思。" class="headerlink" title="提示类型200、404、502是什么意思。"></a>提示类型200、404、502是什么意思。</h4><p>200是请求成功，404是文件未找到，502是服务器内部错误。</p>
<h4 id="你对Memcach的理解，优点有哪些"><a href="#你对Memcach的理解，优点有哪些" class="headerlink" title="你对Memcach的理解，优点有哪些?"></a>你对Memcach的理解，优点有哪些?</h4><p>Memcache是一种缓存技术，在一定的时间内将动态网页经过解析之后保存到文件，下次访问时动态网页就直接调用这个文件，而不必在重新访问数据库。使用memcache做缓存的好处是：提高网站的访问速度，减轻高并发时服务器的压力。</p>
<p>Memcache的优点：稳定、配置简单、多机分布式存储、速度快。</p>
<h4 id="对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题"><a href="#对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题" class="headerlink" title="对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题:"></a>对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题:</h4><p>a) 索引的目的是什么?</p>
<p>b) 索引对数据库系统的负面影响是什么?</p>
<p>c) 为数据表建立索引的原则有哪些?</p>
<p>d) 什么情况下不宜建立索引?</p>
<p>答：<br>索引的目的：</p>
<p>1、快速访问数据表中的特定信息，提高检索速度</p>
<p>2、创建唯一性索引，保证数据库表中每一行数据的唯一性</p>
<p>3、加速表和表之间的连接</p>
<p>4、使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p>
<p>负面影响：创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改的时候索引也要动态维护，这样就降低了数据的维护速度。</p>
<p>建立索引的原则：</p>
<p>1、在最频繁使用的、用以缩小查询范围的字段上建立索引</p>
<p>2、在平频繁使用的、需要排序的字段上建立索引</p>
<p>什么情况下不宜建立索引：</p>
<p>1、对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引</p>
<p>2、对于一些特殊的数据类型，不宜建立索引，比如文本字段(text)等。</p>
<h4 id="web应用中-数据库的读取频率远高于写入频率-如何优化MySQL而应对此种情景"><a href="#web应用中-数据库的读取频率远高于写入频率-如何优化MySQL而应对此种情景" class="headerlink" title="web应用中,数据库的读取频率远高于写入频率, 如何优化MySQL而应对此种情景 ?"></a>web应用中,数据库的读取频率远高于写入频率, 如何优化MySQL而应对此种情景 ?</h4><p>使用memcache缓存技术，将动态数据缓存到文件，访问动态页面时直接调用缓存文件，而不必重新访问数据库，这样就减少了查询数据库的次数。</p>
<p>如果网站的访问量很大，可以把数据库读写服务器分开，使用多态服务器去处理数据库查询，使用较少的服务器去处理数据库的写入和修改。</p>
<h4 id="include与require的区别"><a href="#include与require的区别" class="headerlink" title="include与require的区别?"></a>include与require的区别?</h4><p>Php在遇到include时就重新解释一次，如果一个页面中出现10次include，php就重新解释10次，而php遇到require时只解释一次，即使页面中出现多次require，php也直解释一次。</p>
<p>使用require包含文件时，被包含的文件当成了当前文件的一个组成部分，如果被包含的文件中有语法错误或者文件不存在，程序就提示错误信息，并结束执行。</p>
<p>使用include包含文件时，相当于指定了文件的路径，被包含的文件中有语法错误或者文件不存在时，页面只是给出警告信息，不响应程序本身的执行。</p>
<h4 id="PHP字符串中单引号与双引号的区别"><a href="#PHP字符串中单引号与双引号的区别" class="headerlink" title="PHP字符串中单引号与双引号的区别?"></a>PHP字符串中单引号与双引号的区别?</h4><p>单引号不能解释变量，而双引号可以解释变量。<br>单引号不能转义字符，在双引号中可以转义字符。</p>
<h4 id="php中-模板引擎的目的是什么-你用过哪些模板引擎"><a href="#php中-模板引擎的目的是什么-你用过哪些模板引擎" class="headerlink" title="php中,模板引擎的目的是什么? 你用过哪些模板引擎?"></a>php中,模板引擎的目的是什么? 你用过哪些模板引擎?</h4><p>使用模板引擎的目的是使程序的逻辑代码和html界面代码分离开，是程序的结构更清晰。<br>使用过的模板引擎：Smarty、ThinkPHP的ThinkTemplate</p>
<h4 id="指出以下代码片段中的SQL注入漏洞以及解决方法-magic-quotes-gpc-off"><a href="#指出以下代码片段中的SQL注入漏洞以及解决方法-magic-quotes-gpc-off" class="headerlink" title="指出以下代码片段中的SQL注入漏洞以及解决方法(magic_quotes_gpc = off)"></a>指出以下代码片段中的SQL注入漏洞以及解决方法(magic_quotes_gpc = off)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_query(<span class="string">"select id,title from content where catid='&#123;$_GET[catid]&#125;' and title like '%$_GET[keywords]%'"</span>, $link);</div></pre></td></tr></table></figure>
<p>注入漏洞主要存在用户提交的数据上，这里的注入漏洞主要是$_GET[catid]和$_GET[keyword]</p>
<p>解决注入漏洞：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$_GET[catid]=intval($_GET[catid]);</div><div class="line"></div><div class="line">$sql=<span class="string">"select id,title from content where catid='&#123;$_GET[catid]&#125;' and title like '%$_GET[keywords]%"</span>;</div><div class="line"></div><div class="line">$sql=addslashes($sql);</div><div class="line"></div><div class="line">mysql_query($sql);</div></pre></td></tr></table></figure></p>
<h4 id="MyISAM-和-InnoDB-的基本区别"><a href="#MyISAM-和-InnoDB-的基本区别" class="headerlink" title="MyISAM 和 InnoDB 的基本区别?"></a>MyISAM 和 InnoDB 的基本区别?</h4><p>MYISAM不支持外键和事务处理，采用表锁机制，查询速度稍快，数据存储文件有3个，InnoDB支持外键和事务处理，采用行锁机制，查询速度比MYISAM稍慢，数据存储文件只有一个。</p>
<h4 id="写出匹配URL的正则表达式"><a href="#写出匹配URL的正则表达式" class="headerlink" title="写出匹配URL的正则表达式."></a>写出匹配URL的正则表达式.</h4><p>/^http:\/\/www.([\w]+).([\w]+)$/</p>
<h4 id="写一个函数实现字符串翻转"><a href="#写一个函数实现字符串翻转" class="headerlink" title="写一个函数实现字符串翻转"></a>写一个函数实现字符串翻转</h4><p>方法一：strrev(‘abcdef’);<br>方法二：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">str</span><span class="params">($a)</span></span>&#123;</div><div class="line">	$len = strlen($a);</div><div class="line">	$b = <span class="string">""</span>;</div><div class="line">	<span class="keyword">for</span>($i = $len<span class="number">-1</span>; $i &gt;= <span class="number">0</span>; $i--)</div><div class="line">	&#123;</div><div class="line">		$b .= $a[$i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> $b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> str(<span class="string">'abcdef'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="不断在文件hello-txt头部写入一行“Hello-World”字符串，要求代码完整"><a href="#不断在文件hello-txt头部写入一行“Hello-World”字符串，要求代码完整" class="headerlink" title="不断在文件hello.txt头部写入一行“Hello World”字符串，要求代码完整"></a>不断在文件hello.txt头部写入一行“Hello World”字符串，要求代码完整</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$fp=fopen(<span class="string">'hello.txt'</span>, <span class="string">'r'</span>);</div><div class="line"></div><div class="line">$str=<span class="string">'hello!'</span>.<span class="string">"\n"</span>;</div><div class="line"></div><div class="line">$str.=fread($fp, filesize(<span class="string">'./hello.txt'</span>));</div><div class="line"></div><div class="line">fclose($fp);</div><div class="line"></div><div class="line">$fp1=fopen(<span class="string">'hello.txt'</span>, <span class="string">'w'</span>);</div><div class="line"></div><div class="line">fwrite($fp1, $str);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。主要用于自己学习。如发现本网站载有侵犯您著作权的侵权信息，可联系我删除(●’◡’●)&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://vonfly.github.io/categories/PHP/"/>
    
    
      <category term="面试" scheme="https://vonfly.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="理论知识" scheme="https://vonfly.github.io/tags/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>搭建SVN服务器</title>
    <link href="https://vonfly.github.io/2017/02/26/server-build-svn/"/>
    <id>https://vonfly.github.io/2017/02/26/server-build-svn/</id>
    <published>2017-02-26T01:24:08.000Z</published>
    <updated>2017-02-27T13:07:10.314Z</updated>
    
    <content type="html"><![CDATA[<p>在 Centos5.5 上搭建SVN服务器并实现自动同步至web目录。<br><a id="more"></a></p>
<h2 id="一、搭建svn环境并创建仓库："><a href="#一、搭建svn环境并创建仓库：" class="headerlink" title="一、搭建svn环境并创建仓库："></a>一、搭建svn环境并创建仓库：</h2><h3 id="安装Subversion"><a href="#安装Subversion" class="headerlink" title="安装Subversion"></a>安装Subversion</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y subversion</div></pre></td></tr></table></figure>
<h3 id="检测是否安装成功-查看svn版本号"><a href="#检测是否安装成功-查看svn版本号" class="headerlink" title="检测是否安装成功(查看svn版本号)"></a>检测是否安装成功(查看svn版本号)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnserve --version</div></pre></td></tr></table></figure>
<h3 id="创建版本库（没有规定在哪创建目录）"><a href="#创建版本库（没有规定在哪创建目录）" class="headerlink" title="创建版本库（没有规定在哪创建目录）"></a>创建版本库（没有规定在哪创建目录）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir /home/svn	//先建目录</div><div class="line">cd /home/svn		//进入目录</div><div class="line">svnadmin create /home/svn/test	//创建版本库</div><div class="line">cd test	//进入创建的版本库</div><div class="line">ls		//会看到自动生成的版本库文件（如下图）</div></pre></td></tr></table></figure>
<p><img src="http://olixffhc0.bkt.clouddn.com/server_svn1.jpg" alt="版本库文件列表"></p>
<h2 id="创建用户组及用户"><a href="#创建用户组及用户" class="headerlink" title="创建用户组及用户"></a>创建用户组及用户</h2><p>进入版本库中的配置目录conf</p>
<h3 id="修改权限配置文件"><a href="#修改权限配置文件" class="headerlink" title="修改权限配置文件"></a>修改权限配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim authz</div></pre></td></tr></table></figure>
<p><img src="http://olixffhc0.bkt.clouddn.com/server_svn2.jpg" alt="权限配置"></p>
<h3 id="配置用户名命令文件"><a href="#配置用户名命令文件" class="headerlink" title="配置用户名命令文件"></a>配置用户名命令文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim passwd</div></pre></td></tr></table></figure>
<p><img src="http://olixffhc0.bkt.clouddn.com/server_svn3.jpg" alt="用户名密码配置"></p>
<h3 id="配置SVN服务综合配置文件"><a href="#配置SVN服务综合配置文件" class="headerlink" title="配置SVN服务综合配置文件"></a>配置SVN服务综合配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim svnserve.conf</div></pre></td></tr></table></figure>
<p>//找到以下配置项，将前面的#号去掉（注意：所有配置项前面不能留空格），然后做相应的配置<br>anon-access = none      //匿名用户访问权限:无<br>auth-access = write     //普通用户访问权限:写<br>password-db = passwd    //密码文件<br>authz-db = authz        //权限配置文件<br>realm = /home/svn/test   //版本库所在</p>
<h3 id="启动svn服务"><a href="#启动svn服务" class="headerlink" title="启动svn服务"></a>启动svn服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnserve -d -r /home/svn</div></pre></td></tr></table></figure>
<p>如果提示：svnserve: E000098: Can’t bind server socket: Address already in use<br>证明现在svn已经被启动了，由于我们修改了配置文件，因此要重启svn服务，所以要先关闭svn再重启svn</p>
<p>查看svn服务详情（如下图所示）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux|grep svn</div></pre></td></tr></table></figure></p>
<p>将svn服务强制停止  其中790为svn服务的ID号，-9是kill的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -9 790</div></pre></td></tr></table></figure></p>
<p>最后再重新运行 svnserve -d -r /var/svn</p>
<h3 id="测试有没有成功"><a href="#测试有没有成功" class="headerlink" title="测试有没有成功"></a>测试有没有成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /www</div><div class="line">mkdir test</div><div class="line">svn co svn://localhost/test /www/test --username vonfly(SVN账号) --password vonfly(SVN密码)</div></pre></td></tr></table></figure>
<p>如果提示：Checked out revision 0.<br>表示checkout成功<br><img src="http://olixffhc0.bkt.clouddn.com/server_svn4.jpg" alt="Checked"></p>
<h2 id="本地拉取、推送（本地要先安装SVN客户端）"><a href="#本地拉取、推送（本地要先安装SVN客户端）" class="headerlink" title="本地拉取、推送（本地要先安装SVN客户端）"></a>本地拉取、推送（本地要先安装SVN客户端）</h2><p>输入远程链接：svn://服务器iP地址/test，再输入用户名和密码即可链接</p>
<h2 id="本地commit时自动同步到web目录"><a href="#本地commit时自动同步到web目录" class="headerlink" title="本地commit时自动同步到web目录"></a>本地commit时自动同步到web目录</h2><p>实现本地更新同步到服务器项目：配置项目仓库的钩子配置,可以把钩子看成是WEB项目于SVN项目仓库之间的一个关联，通过向SVN项目仓库提交脚本代码，利用钩子shell脚本可以自动向web项目中将脚本文件更新过去</p>
<h3 id="进入-var-svn-project-hooks下，建立post-commit文件"><a href="#进入-var-svn-project-hooks下，建立post-commit文件" class="headerlink" title="进入/var/svn/project/hooks下，建立post-commit文件"></a>进入/var/svn/project/hooks下，建立post-commit文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /var/svn/project/hooks</div><div class="line">vim post-commit</div></pre></td></tr></table></figure>
<p>在该文件里添加如下代码：</p>
<p>#!/bin/sh<br>export LANG=zh_CN.UTF-8<br>SVN_PATH=/usr/bin/svn   //这里不用改<br>WEB_PATH=/www/test  //对应自己web目录<br>//这里的用户随便一个就好<br>$SVN_PATH update $WEB_PATH –username ‘vonfly’ –password ‘vonfly’ –no-auth-cache</p>
<p><img src="http://olixffhc0.bkt.clouddn.com/server_svn5.jpg" alt="post-commit"></p>
<h3 id="给post-commit-执行权限"><a href="#给post-commit-执行权限" class="headerlink" title="给post-commit 执行权限"></a>给post-commit 执行权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 755 post-commit</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Centos5.5 上搭建SVN服务器并实现自动同步至web目录。&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://vonfly.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="SVN" scheme="https://vonfly.github.io/tags/SVN/"/>
    
      <category term="Centos" scheme="https://vonfly.github.io/tags/Centos/"/>
    
      <category term="版本控制" scheme="https://vonfly.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Sublime使用技巧</title>
    <link href="https://vonfly.github.io/2017/02/17/sublime/"/>
    <id>https://vonfly.github.io/2017/02/17/sublime/</id>
    <published>2017-02-17T12:33:48.000Z</published>
    <updated>2017-02-24T12:30:05.382Z</updated>
    
    <content type="html"><![CDATA[<p>sublime使用技巧，平时用的时候觉得不错的功能就会把它分享给大家(●’◡’●)<br><a id="more"></a></p>
<h2 id="sublime右键快捷方式添加"><a href="#sublime右键快捷方式添加" class="headerlink" title="sublime右键快捷方式添加"></a>sublime右键快捷方式添加</h2><p>window下，开始-&gt;运行-&gt;regedit<br>到 HKEY_CLASSES_ROOT*\shell目录下<br>新建sublime(随便你起什么名字)<br>再到新建好的sublime目录下新建command(固定名字)</p>
<p>最后的目录结构【HKEY_CLASSES_ROOT*\shell\sublime\command】</p>
<p>第一个双引号是你的软件安装目录<br>“E:\Sublime Text 3  Build 3103 x64 Portable Cracked (2016.02.11)\sublime_text.exe” -p –remote-tab-silent “%1”</p>
<p>window如何查看软件安装目录，如下图说明：<br><img src="http://olixffhc0.bkt.clouddn.com/sublime2.jpg" alt="window如何查看软件安装目录"></p>
<p>选中上一步建好的文件command，然后双击右边的默认，把上边的内容复制进去即可。如下图说明<br><img src="http://olixffhc0.bkt.clouddn.com/sublime1.jpg" alt="sublime1"></p>
<p>随便找个文件sublime能够识别的文件，鼠标右击就可以看到刚刚添加的快捷键了，可以直接打开</p>
<h2 id="Sublime-text-2-3-中-Package-Control-的安装与使用方法"><a href="#Sublime-text-2-3-中-Package-Control-的安装与使用方法" class="headerlink" title="Sublime text 2/3 中 Package Control 的安装与使用方法"></a>Sublime text 2/3 中 Package Control 的安装与使用方法</h2><p>从菜单 View - Show Console 或者 ctrl + ~ 快捷键，调出 console。<br>将以下 Python 代码粘贴进去并 enter 执行，不出意外即完成安装。<br>以下提供 ST3 和 ST2 的安装代码：</p>
<p>Sublime Text 3：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), <span class="string">'wb'</span>).write(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).read())</div></pre></td></tr></table></figure></p>
<p>Sublime Text 2：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2,os; pf=<span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) <span class="keyword">else</span> <span class="keyword">None</span>; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), <span class="string">'wb'</span> ).write( urllib2.urlopen( <span class="string">'http://sublime.wbond.net/'</span> +pf.replace( <span class="string">' '</span>,<span class="string">'%20'</span> )).read()); print( <span class="string">'Please restart Sublime Text to finish installation'</span>)</div></pre></td></tr></table></figure></p>
<p>常用的一些插件：<br>AdvancedNewFile        快速创建新文件<br>Better Completion    全能代码提示(需要自己配置一下插件，需要提示的库)<br>CodeFormatter        代码格式化<br>ConverToUTF8    支持 GBK, BIG5, EUC-KR, EUC-JP, Shift_JIS 等编码的插件<br>DocBlockr        代码块注释<br>Emmet<br>File Header    自动更新保存时间，文件模板<br>Side Bar<br>Monokai Extended    主题配置<br>SideBarEnhancements    增强型侧边栏</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sublime使用技巧，平时用的时候觉得不错的功能就会把它分享给大家(●’◡’●)&lt;br&gt;
    
    </summary>
    
      <category term="其它" scheme="https://vonfly.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="软件使用技巧" scheme="https://vonfly.github.io/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
      <category term="右键快捷方式添加" scheme="https://vonfly.github.io/tags/%E5%8F%B3%E9%94%AE%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E6%B7%BB%E5%8A%A0/"/>
    
  </entry>
  
  <entry>
    <title>收集、总结的一些理论知识（对于面试有帮助）</title>
    <link href="https://vonfly.github.io/2017/02/09/theoretical-knowledge/"/>
    <id>https://vonfly.github.io/2017/02/09/theoretical-knowledge/</id>
    <published>2017-02-09T13:01:03.000Z</published>
    <updated>2017-02-28T11:41:18.979Z</updated>
    
    <content type="html"><![CDATA[<p>本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。为什么要写这个页面呢？一来自己的理论知识相对比较薄弱，每次面试的时候，有很多理论知识都回答不上，所以要加深巩固自己的理论知识。二来自己写一遍或者抄一遍总会有点印象，对以后的工作多多少少会有点帮助(●’◡’●)</p>
<a id="more"></a>
<h1 id="javascript理论知识"><a href="#javascript理论知识" class="headerlink" title="javascript理论知识"></a>javascript理论知识</h1><h2 id="xml与json区别"><a href="#xml与json区别" class="headerlink" title="xml与json区别"></a>xml与json区别</h2><p>相同点：</p>
<blockquote>
<ul>
<li>都是一种通用协议</li>
<li>都可以用来描述数据</li>
</ul>
</blockquote>
<p>不同点：</p>
<blockquote>
<ul>
<li>JSON相对于XML来讲，数据的体积小，传递的速度更快些。</li>
<li>xml专用带宽大，json占用带宽小</li>
<li>json没有xml这么通用</li>
<li>json可以和js对象互相转换，和js是天生的一对，因此广泛用于前端开发</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。为什么要写这个页面呢？一来自己的理论知识相对比较薄弱，每次面试的时候，有很多理论知识都回答不上，所以要加深巩固自己的理论知识。二来自己写一遍或者抄一遍总会有点印象，对以后的工作多多少少会有点帮助(●’◡’●)&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://vonfly.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试" scheme="https://vonfly.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="理论知识" scheme="https://vonfly.github.io/tags/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>初识gulp</title>
    <link href="https://vonfly.github.io/2016/11/02/gulp/"/>
    <id>https://vonfly.github.io/2016/11/02/gulp/</id>
    <published>2016-11-02T15:40:09.000Z</published>
    <updated>2017-02-23T12:39:27.067Z</updated>
    
    <content type="html"><![CDATA[<p>初识gulp自动化构建工具。一开始只是听过这个东西，没有尝试用过。听起来好像很高大上的样子，一直想要去尝试用一下，但一直没有去用过。一来现在的项目没有用到；二来之前好像确实是挺忙的，没有找到什么合适的时间去尝试用下；三来嘛感觉这么高大上的东西可能学起来应该会很难，会花费很多时间。<br>ps：很多事情只有去尝试了才会知道难不难，很多东西你觉得难可能是因为你没有用过它，或者不知道它是用来做什么的，只有你勇敢的踏出一步去尝试用下，你就会发现其实没有那么难。(●’◡’●)<br><a id="more"></a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。<br>利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。<br>Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。<br>通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</p>
<h2 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h2><ol>
<li><p>全局安装 gulp：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global gulp</div></pre></td></tr></table></figure>
</li>
<li><p>作为项目的开发依赖（devDependencies）安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录下创建一个名为 gulpfile.js 的文件：<br>var gulp = require(‘gulp’);</p>
</li>
</ol>
<p>gulp.task(‘default’, function() {<br>  // 将你的默认的任务代码放在这<br>});</p>
<ol>
<li>运行 gulp：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp default</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="常用的一些插件"><a href="#常用的一些插件" class="headerlink" title="常用的一些插件"></a>常用的一些插件</h2><blockquote>
<ul>
<li>gulp-minify-css    压缩css</li>
<li>gulp-uglify    压缩js</li>
<li>gulp-htmlmin    压缩html</li>
<li>gulp-imagemin    压缩图片<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install [plugins-name] --save</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>上述命令安装插件的同时也会把插件作为项目依赖写入package.json文件.</p>
<p>参考：<br><a href="http://gulpjs.com/" target="_blank" rel="external">guly官网(包含插件搜索)</a><br><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">guly中文网站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初识gulp自动化构建工具。一开始只是听过这个东西，没有尝试用过。听起来好像很高大上的样子，一直想要去尝试用一下，但一直没有去用过。一来现在的项目没有用到；二来之前好像确实是挺忙的，没有找到什么合适的时间去尝试用下；三来嘛感觉这么高大上的东西可能学起来应该会很难，会花费很多时间。&lt;br&gt;ps：很多事情只有去尝试了才会知道难不难，很多东西你觉得难可能是因为你没有用过它，或者不知道它是用来做什么的，只有你勇敢的踏出一步去尝试用下，你就会发现其实没有那么难。(●’◡’●)&lt;br&gt;
    
    </summary>
    
      <category term="自动化构建工具" scheme="https://vonfly.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gulp" scheme="https://vonfly.github.io/tags/gulp/"/>
    
      <category term="代码优化" scheme="https://vonfly.github.io/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一些常用的git-commands</title>
    <link href="https://vonfly.github.io/2016/06/18/git-commands/"/>
    <id>https://vonfly.github.io/2016/06/18/git-commands/</id>
    <published>2016-06-18T12:08:16.000Z</published>
    <updated>2017-02-23T12:39:51.802Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>常用的一些git命令以及平时项目遇到的一些问题解决方法<br><a id="more"></a></p>
<h3 id="git一些命令"><a href="#git一些命令" class="headerlink" title="git一些命令"></a>git一些命令</h3><p>在当前目录新建一个Git代码库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure></p>
<p>新建一个目录，将其初始化为Git代码库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init [project-name]</div></pre></td></tr></table></figure>
<p>下载一个项目和它的整个代码历史</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> [url]</div></pre></td></tr></table></figure>
<h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h4><p>添加指定文件到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add [file1] [file2] ...</div></pre></td></tr></table></figure></p>
<p>添加指定目录到暂存区，包括子目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add [dir]</div></pre></td></tr></table></figure></p>
<p>将所有修改过的工作文件提交暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ add .</div></pre></td></tr></table></figure></p>
<p>添加每个变化前，都会要求确认，<br>对于同一个文件的多处变化，可以实现分次提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add -p</div></pre></td></tr></table></figure></p>
<p>删除暂存区文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm file.name</div></pre></td></tr></table></figure></p>
<p>(工作区和暂存区都存在的情况下)删除工作区文件，同时删除暂存区文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm <span class="_">-f</span> file.name</div></pre></td></tr></table></figure></p>
<p>(工作区和暂存区都存在的情况下)不删除工作区文件，删除暂存区文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm --cached file.name</div></pre></td></tr></table></figure></p>
<p>改名文件，并且将这个改名放入暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure></p>
<h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><p>提交暂存区到仓库区（提交说明要用英文引号）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m [提交说明]</div></pre></td></tr></table></figure></p>
<p>提交暂存区到仓库区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit [file1] [file2] ... -m [提交说明]</div></pre></td></tr></table></figure></p>
<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>列出所有本地分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure></p>
<p>列出所有远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div></pre></td></tr></table></figure></p>
<p>列出所有本地分支和远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-a</span></div></pre></td></tr></table></figure></p>
<p>新建一个分支，但依然停留在当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch [branch-name]</div></pre></td></tr></table></figure></p>
<p>新建一个分支，并切换到该分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b [branch]</div></pre></td></tr></table></figure></p>
<p>新建一个分支，指向指定commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch [branch] [commit]</div></pre></td></tr></table></figure></p>
<p>新建一个分支，与指定的远程分支建立追踪关系<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --track [branch] [remote-branch]</div></pre></td></tr></table></figure></p>
<p>切换到指定分支，并更新工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [branch-name]</div></pre></td></tr></table></figure></p>
<p>切换到上一个分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -</div></pre></td></tr></table></figure></p>
<p>建立追踪关系，在现有分支与指定的远程分支之间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div></pre></td></tr></table></figure></p>
<p>合并指定分支到当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge [branch]</div></pre></td></tr></table></figure></p>
<p>选择一个commit，合并进当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git cherry-pick [commit]</div></pre></td></tr></table></figure></p>
<p>删除分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch <span class="_">-d</span> [branch-name]</div></pre></td></tr></table></figure></p>
<p>删除远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure></p>
<h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><p>显示有变更的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure></p>
<p>显示当前分支的版本历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span></div></pre></td></tr></table></figure></p>
<p>显示之后版本历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div></pre></td></tr></table></figure></p>
<p>显示commit历史，以及每次commit发生变更的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --stat</div></pre></td></tr></table></figure></p>
<p>搜索提交历史，根据关键词<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div></pre></td></tr></table></figure></p>
<p>显示某个文件的版本历史，包括文件改名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --follow [file]</div><div class="line">$ git whatchanged [file]</div></pre></td></tr></table></figure></p>
<p>显示指定文件相关的每一次diff<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -p [file]</div></pre></td></tr></table></figure></p>
<p>显示过去5次提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</div></pre></td></tr></table></figure></p>
<p>显示指定文件是什么人在什么时间修改过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git blame [file]</div></pre></td></tr></table></figure></p>
<p>显示暂存区和工作区的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff</div></pre></td></tr></table></figure></p>
<p>显示暂存区和上一个commit的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff --cached [file]</div></pre></td></tr></table></figure></p>
<p>显示工作区与当前分支最新commit之间的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD</div></pre></td></tr></table></figure></p>
<p>显示两次提交之间的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff [first-branch]...[second-branch]</div></pre></td></tr></table></figure></p>
<h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><p>下载远程仓库的所有变动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch [remote]</div></pre></td></tr></table></figure></p>
<p>显示所有远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div></pre></td></tr></table></figure></p>
<p>显示某个远程仓库的信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote show [remote]</div></pre></td></tr></table></figure></p>
<p>增加一个新的远程仓库，并命名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add [shortname] [url]</div></pre></td></tr></table></figure></p>
<p>取回远程仓库的变化，并与本地分支合并<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull [remote] [branch]</div></pre></td></tr></table></figure></p>
<p>上传本地指定分支到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] [branch]</div></pre></td></tr></table></figure></p>
<p>推送所有分支到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure></p>
<h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><p>恢复暂存区的指定文件到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [file]</div></pre></td></tr></table></figure></p>
<p>恢复某个commit的指定文件到暂存区和工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout [commit] [file]</div></pre></td></tr></table></figure></p>
<p>恢复暂存区的所有文件到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout .</div></pre></td></tr></table></figure></p>
<h5 id="整个版本的撤销"><a href="#整个版本的撤销" class="headerlink" title="整个版本的撤销"></a>整个版本的撤销</h5><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset [file]</div></pre></td></tr></table></figure></p>
<p>重置暂存区与工作区，与上一次commit保持一致<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard [commit]</div></pre></td></tr></table></figure></p>
<h4 id="显示当前的Git配置"><a href="#显示当前的Git配置" class="headerlink" title="显示当前的Git配置"></a>显示当前的Git配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --list</div></pre></td></tr></table></figure>
<p>编辑Git配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config <span class="_">-e</span> [--global]</div></pre></td></tr></table></figure></p>
<p>设置提交代码时的用户信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config [--global] user.name <span class="string">"your username"</span></div><div class="line">$ git config [--global] user.email <span class="string">"your e-mail"</span></div></pre></td></tr></table></figure></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="多人协作解决冲突"><a href="#多人协作解决冲突" class="headerlink" title="多人协作解决冲突"></a>多人协作解决冲突</h4><p>推荐方法1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git fetch</div><div class="line">$ git diff master origin/master</div><div class="line">$ git merge orgin/master</div></pre></td></tr></table></figure></p>
<p>方法2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure></p>
<p>参考：<br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">阮一峰-常用 Git 命令清单</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;常用的一些git命令以及平时项目遇到的一些问题解决方法&lt;br&gt;
    
    </summary>
    
      <category term="命令" scheme="https://vonfly.github.io/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="命令使用" scheme="https://vonfly.github.io/tags/%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    
      <category term="git" scheme="https://vonfly.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>多台电脑共同管理hexo博客</title>
    <link href="https://vonfly.github.io/2016/02/18/hexo-version-control/"/>
    <id>https://vonfly.github.io/2016/02/18/hexo-version-control/</id>
    <published>2016-02-18T02:33:57.000Z</published>
    <updated>2017-02-18T01:34:29.014Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo搭建博客，如果换了电脑怎么更新博客？如果你有备份源文件那还好，但是每次都要备份感觉太麻烦了。<br>这里介绍一种方法就是使用github分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。<br>网上也有其他的方法，大家可以去搜一下，自己看看哪种适合自己，我用这种方法一方面我git命令也不太熟，所以想多写写，多学学。<br><a id="more"></a></p>
<p>先删除主题文件下的.git文件，<br>可以直接删除或者执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm -rf .git</div></pre></td></tr></table></figure>
<p>然后在本地博客文件夹下边依次输入以下指令(部分指令因为有提示可以自己修改下)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git checkout -b hexo</div><div class="line">$ git remote add origin git@github.com:vonfly（你自己giuhub账号名）/vonfly.github.io（项目名）.git</div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"提交说明"</span></div><div class="line">$ git push origin hexo</div></pre></td></tr></table></figure>
<p>执行到这里我们就已经把本地的源文件添加到了分支hexo上。</p>
<p>说明：博客文件夹下根目录.gitignore（此文件的作用是因此忽略所写的文件或者目录，加快push速度。）可以不修改，我的就没有修改，如果不修改的话<br>在；另外一台电脑上克隆下来的博客项目就要先运行一下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>我的.gitignore文件内容为<br>.DS_Store<br>Thumbs.db<br>db.json<br><em>.log<br>node_modules/<br>public/<br>.deploy</em>/</p>
<p>当然你也可以把node_modules/去掉，这样在另外的电脑克隆下来的项目就不用在运行上面的命令了</p>
<p>扩展：</p>
<h3 id="github常见操作和常见错误！"><a href="#github常见操作和常见错误！" class="headerlink" title="github常见操作和常见错误！"></a>github常见操作和常见错误！</h3><h4 id="如果输入-git-remote-add-origin-git-github-com-vonfly（github帐号名）-vonfly-github-io（项目名）-git"><a href="#如果输入-git-remote-add-origin-git-github-com-vonfly（github帐号名）-vonfly-github-io（项目名）-git" class="headerlink" title="如果输入$ git remote add origin git@github.com:vonfly（github帐号名）/vonfly.github.io（项目名）.git"></a>如果输入$ git remote add origin git@github.com:vonfly（github帐号名）/vonfly.github.io（项目名）.git</h4><p>提示出错信息：fatal: remote origin already exists.</p>
<p>解决办法如下：<br>    1、先输入$ git remote rm origin<br>    2、再输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git 就不会报错了！</p>
<h4 id="如果输入-git-remote-rm-origin-还是报错的话，"><a href="#如果输入-git-remote-rm-origin-还是报错的话，" class="headerlink" title="如果输入$ git remote rm origin 还是报错的话，"></a>如果输入$ git remote rm origin 还是报错的话，</h4><p>error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容<br>4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc<br>5、找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！</p>
<h4 id="如果输入-git-push-origin-master"><a href="#如果输入-git-push-origin-master" class="headerlink" title="如果输入$ git push origin master"></a>如果输入$ git push origin master</h4><p>提示出错信息：error:failed to push som refs to …….<br>解决办法如下：<br>    1、先输入$ git pull origin master //先把远程服务器github上面的文件拉下来<br>    2、再输入$ git push origin master<br>    3、如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository.<br>    4、则需要重新输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用hexo搭建博客，如果换了电脑怎么更新博客？如果你有备份源文件那还好，但是每次都要备份感觉太麻烦了。&lt;br&gt;这里介绍一种方法就是使用github分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。&lt;br&gt;网上也有其他的方法，大家可以去搜一下，自己看看哪种适合自己，我用这种方法一方面我git命令也不太熟，所以想多写写，多学学。&lt;br&gt;
    
    </summary>
    
      <category term="其它" scheme="https://vonfly.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="hexo" scheme="https://vonfly.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>常用的一些命令</title>
    <link href="https://vonfly.github.io/2016/02/16/common-commands/"/>
    <id>https://vonfly.github.io/2016/02/16/common-commands/</id>
    <published>2016-02-16T12:20:58.000Z</published>
    <updated>2017-02-20T12:16:02.027Z</updated>
    
    <content type="html"><![CDATA[<p>平时写博客会用到的一些命令<br><a id="more"></a></p>
<h3 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h3><p>init 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init [folder]</div></pre></td></tr></table></figure></p>
<p>new 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure></p>
<p>generate 生成网站(即生成静态文件)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d, –deploy</td>
<td style="text-align:right">文件生成后立即部署网站</td>
</tr>
<tr>
<td>-w, –watch</td>
<td style="text-align:right">监视文件变动</td>
</tr>
</tbody>
</table>
<p>server 启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="external">http://localhost:4000/。</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p, –port</td>
<td style="text-align:right">重设端口</td>
</tr>
<tr>
<td>-s, –static</td>
<td style="text-align:right">只使用静态文件</td>
</tr>
<tr>
<td>-l, –log</td>
<td style="text-align:right">启动日志记录，使用覆盖记录格式</td>
</tr>
</tbody>
</table>
<p>deploy 部署网站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-g, –generate</td>
<td style="text-align:right">部署之前预先生成静态文件</td>
</tr>
</tbody>
</table>
<p>clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure></p>
<p>version 显示 Hexo 版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo version</div></pre></td></tr></table></figure></p>
<p>安装 Hexo Algolia 扩展（用于页面搜索）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-algolia@0.2.0</div></pre></td></tr></table></figure></p>
<p>来更新 Index（相当于把博客下的文章更新到algolia数据库）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo algolia</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时写博客会用到的一些命令&lt;br&gt;
    
    </summary>
    
      <category term="命令" scheme="https://vonfly.github.io/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="hexo" scheme="https://vonfly.github.io/tags/hexo/"/>
    
      <category term="命令使用" scheme="https://vonfly.github.io/tags/%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法-本页面主要用于自己学习</title>
    <link href="https://vonfly.github.io/2016/02/07/markdown-grammar/"/>
    <id>https://vonfly.github.io/2016/02/07/markdown-grammar/</id>
    <published>2016-02-07T14:39:13.000Z</published>
    <updated>2017-02-24T12:30:51.121Z</updated>
    
    <content type="html"><![CDATA[<p>本页面主要用于自己学习的，方便以后写作。当然了，偶尔忘记可以查看一下，文章最底下也有链接，大家可以查看链接的语法说明(●’◡’●)</p>
<a id="more"></a>
<h1 id="欢迎使用-Cmd-Markdown-编辑阅读器"><a href="#欢迎使用-Cmd-Markdown-编辑阅读器" class="headerlink" title="欢迎使用 Cmd Markdown 编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>
<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external">Todo 列表</a></h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># A comment</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>
<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="external">甘特图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">title 项目开发流程</div><div class="line">section 项目确定</div><div class="line">    需求分析       :a1, 2016-06-22, 3d</div><div class="line">    可行性报告     :after a1, 5d</div><div class="line">    概念验证       : 5d</div><div class="line">section 项目实施</div><div class="line">    概要设计      :2016-07-05  , 5d</div><div class="line">    详细设计      :2016-07-08, 10d</div><div class="line">    编码          :2016-07-15, 10d</div><div class="line">    测试          :2016-07-22, 5d</div><div class="line">section 发布验收</div><div class="line">    发布: 2d</div><div class="line">    验收: 3d</div></pre></td></tr></table></figure>
<h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="external">@ghosert</a><br>2016 年 07月 07日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
<p>参考：<br><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd Markdown 编辑阅读器</a><br><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">Markdown 语法说明 (简体中文版)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本页面主要用于自己学习的，方便以后写作。当然了，偶尔忘记可以查看一下，文章最底下也有链接，大家可以查看链接的语法说明(●’◡’●)&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="https://vonfly.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="Markdown语法" scheme="https://vonfly.github.io/tags/Markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>GitHub+Hexo+Next搭建免费独立个人博客</title>
    <link href="https://vonfly.github.io/2016/01/22/hello-world/"/>
    <id>https://vonfly.github.io/2016/01/22/hello-world/</id>
    <published>2016-01-22T12:20:58.000Z</published>
    <updated>2017-02-18T01:46:46.587Z</updated>
    
    <content type="html"><![CDATA[<p>我为什么要搭建个人博客呢，一来有自己的博客会显得高大尚一点，二来也可以当作学习新知识</p>
<a id="more"></a>
<h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><p>node.js Git 是必须工具</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>前往<a href="https://git-scm.com/downloads" target="_blank" rel="external">Git官网</a>下载Windows版本压缩包，下载完成后解压安装。（一直下一步即可）</p>
<p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"your username"</span></div><div class="line">$ git config --global user.email <span class="string">"your e-mail"</span></div></pre></td></tr></table></figure></p>
<p>重申一遍，你只需要做一次这个设置。如果你传递了 –global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>前往<a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js官方</a>下载网站，选择适合自己系统的进行下载，下载完成后同样解压安装。（一直下一步即可）</p>
<h3 id="注册Github账户"><a href="#注册Github账户" class="headerlink" title="注册Github账户"></a>注册Github账户</h3><p>前往Github网站，注册一个新用户。创建一个新的repository</p>
<p>在自己的Github主页右上角的加号,创建一个新的repository。比如我的Github用户名为vonfly，那么我创建的repository的名字应该是 vonfly.github.io</p>
<h3 id="给本机配置SSH-Key"><a href="#给本机配置SSH-Key" class="headerlink" title="给本机配置SSH-Key"></a>给本机配置SSH-Key</h3><p>打开Git Bash，在命令行中输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"your e-mail"</span></div></pre></td></tr></table></figure>
<p>之后一直回车，就可以了<br>成功之后在命令行中找到这两段<br>Your identification has been saved in /c/Users/XZY-06/.ssh/id_rsa.<br>Your public key has been saved in /c/Users/XZY-06/.ssh/id_rsa.pub.<br>打开所对应的文件夹，找到 id_rsa.pub文件，用编辑器打开，复制其中的全部内容。<br>登陆你的GitHub账户，依次点击账号Settings &gt; SSH and GPG keys &gt; new SSH key，把id_rsa.<br>pub中的内容拷贝进去key项，title项随意填 。</p>
<p>至此就已经配置完SSH-Key了</p>
<h3 id="安装Hexo（安装需要花一些时间）"><a href="#安装Hexo（安装需要花一些时间）" class="headerlink" title="安装Hexo（安装需要花一些时间）"></a>安装Hexo（安装需要花一些时间）</h3><p>点击鼠标右键，看是否有Git bash Here选项。如果没有可以前往Git安装根目录，启动git-base.exe也可以。在命令行中输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h3 id="创建myblog文件夹"><a href="#创建myblog文件夹" class="headerlink" title="创建myblog文件夹"></a>创建myblog文件夹</h3><p>找到想要放置博客的文件夹，比如（F:\myblog），在该目录下鼠标右击打开Gitbash工具。在命令行中输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>这里init后面可以跟文件目录，比如我想在F:\text下创建博客文件夹，那么可以用下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init F:\text</div></pre></td></tr></table></figure>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>在myblog目录下，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<h3 id="安装完后的目录结构"><a href="#安装完后的目录结构" class="headerlink" title="安装完后的目录结构"></a>安装完后的目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">├── _config.yml //网站的配置信息（也就是站点配置文件）</div><div class="line">├── package.json //应用程序数据，指明hexo的版本等信息</div><div class="line">├── scaffolds //模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</div><div class="line">├── <span class="built_in">source</span> //文章源码目录，该目录下的markdown和html文件均会被hexo处理。</div><div class="line">| ├── _posts  //新建的文章都将存放在此目录下。编辑&lt;文件名&gt;.md文件可修改内容。</div><div class="line">└── themes //主题文件夹。Hexo会根据主题来生成静态页面。</div></pre></td></tr></table></figure>
<h3 id="本地调试（在myblog目录下，依次执行以下命令）"><a href="#本地调试（在myblog目录下，依次执行以下命令）" class="headerlink" title="本地调试（在myblog目录下，依次执行以下命令）"></a>本地调试（在myblog目录下，依次执行以下命令）</h3><h4 id="1-生成网站"><a href="#1-生成网站" class="headerlink" title="1.生成网站"></a>1.生成网站</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<h4 id="2-本地服务器"><a href="#2-本地服务器" class="headerlink" title="2.本地服务器"></a>2.本地服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>然后在浏览器中输入 localhost:4000 就可以看到自己的博客了<br>如果打开很慢或者打开不了，可以更改下端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server -p 3000</div></pre></td></tr></table></figure></p>
<p>重新在浏览器中输入 localhost:3000即可，至此我们已经搭建好自己的Hexo博客了，不过博客采用的主题是默认的主题，而我们要使用简洁优雅且易于使用NexT主题</p>
<h3 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h3><h4 id="1-下载Next主题（下载需要一点时间）"><a href="#1-下载Next主题（下载需要一点时间）" class="headerlink" title="1.下载Next主题（下载需要一点时间）"></a>1.下载Next主题（下载需要一点时间）</h4><p>在myblog目录下，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h4 id="2-启用Next主题"><a href="#2-启用Next主题" class="headerlink" title="2.启用Next主题"></a>2.启用Next主题</h4><p>下载完成后，打开站点配置文件(即更目录下的_config.yml)，找到theme字段，并将其值更改为 next。<br>再重新执行本地调试那一步骤的命令查看效果即可</p>
<h3 id="将本地的文件部署（上传）到Github账户中"><a href="#将本地的文件部署（上传）到Github账户中" class="headerlink" title="将本地的文件部署（上传）到Github账户中"></a>将本地的文件部署（上传）到Github账户中</h3><p>打开站点配置文件(即更目录下的_config.yml)，在最后添加如下代码（在你修改时，把 repository更换成之前步骤创建新的repository仓库地址）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/vonfly/vonfly.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>执行以下指令即可完成部署（如果提示错误，可以看下面出错原因及解决方法）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>1.每次修改本地文件，都需要命令$ hexo generate才能保存。而且每次使用命令都必须在myblog根目录下使用。</p>
<p>2.如果你在执行$ hexo deloy,如果提示 ERROR Deployer not found: git，<br>那说明你没有安装hexo-deployer-git依赖包，进入F:\Hexo\node_modules发现真的没有hexo-deployer-git。<br>解决方法：<br>①只需要输入下面命令创建hexo-deployer-git依赖包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>　<br>②然后再执行hexo deploy就能上传成功了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>直接在浏览器访问vonfly.github.io试试</p>
<p>博客安装和主题配置参考：<br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo官网</a><br><a href="http://theme-next.iissnan.com/getting-started.html#top" target="_blank" rel="external">next主题官网</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我为什么要搭建个人博客呢，一来有自己的博客会显得高大尚一点，二来也可以当作学习新知识&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="https://vonfly.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="hexo" scheme="https://vonfly.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
