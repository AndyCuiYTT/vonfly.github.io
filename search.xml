<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[收集、总结的一些PHP理论知识（对于面试有帮助）]]></title>
      <url>%2F2017%2F02%2F28%2Fphp-knowledge%2F</url>
      <content type="text"><![CDATA[本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。主要用于自己学习。如发现本网站载有侵犯您著作权的侵权信息，可联系我删除(●’◡’●) 用最少的代码写一个求3值最大值的函数123function($a,$b,$c)&#123; return $a &gt; $b ? ($a &gt; $c ? $a : $c) : ($b &gt; $c ? $b : $c);&#125; 用PHP打印出前一天的时间，打印格式是2007年5月10日22:21:211echo date('Y-m-d H:i:s', strtotime('-1 day')); 输出正在浏览当前页面用户的IP地址1echo $_SERVER["REMOTE_ADDR"]; 查询（query）的字符串URL中第一个问号 ? 之后的内容（比如http://localhost/text.php?id=1&amp;bi=2，查询出 id=1&amp;bi=2 ）1echo $_SERVER["QUERY_STRING"]; 当前运行脚本所在的文档根目录1echo $_SERVER["DOCUMENT_ROOT"]; 写一个函数，能够遍历一个文件夹下的所有文件和子文件夹123456789101112131415161718192021222324252627function my_scandir($dir)&#123; $files=array(); if(is_dir($dir)) &#123; if($handle=opendir($dir)) &#123; while(($file=readdir($handle))!==false) &#123; if($file!="." &amp;&amp; $file!="..") &#123; if(is_dir($dir."/".$file)) &#123; $files[$file]=my_scandir($dir."/".$file); &#125; else &#123; $files[]=$dir."/".$file; &#125; &#125; &#125; closedir($handle); return $files; &#125; &#125;&#125;var_dump(my_scandir("F:ali")); 请用正则表达式（Regular Expression）验证电子邮件的格式是否正确。123456789$email = '1185236@163.com';if( !preg_match('/^[\w.]+@([\w.]+)\.[a-z]&#123;2,6&#125;$/i', $email) )&#123; echo "电子邮件格式不正确！";&#125;else&#123; echo "电子邮件格式正确！";&#125; 用PHP写出显示客户端IP与服务器IP的代码12echo $_SERVER["REMOTE_ADDR"]; //客户端IPecho gethostbyname("www.baidu.com"); //服务器IP 如何修改SESSION的生存时间方法1：将php.ini中的session.gc_maxlifetime设置为9999重启apache 方法2：在当前项目中修改123$expire = 3600 * 3;ini_set('session.gc_maxlifetime', $expire);ini_set('session.cookie_lifetime', $expire); 有一个网页地址, 比如百度主页: http://www.baidu.com/,如何得到它的内容?方法1：1234$readcontents = fopen("http://www.baidu.com/", "rb");$contents = stream_get_contents($readcontents);fclose($readcontents);echo $contents; 方法2：12$readcontents = file_get_contents("http://www.baidu.com/");echo $readcontents; 请说明php中传值与传引用的区别。什么时候传值什么时候传引用?按值传递：函数范围内对值的任何改变在函数外部都会被忽略 按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改 优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。 按引用传递则不需要复制值，对于性能提高很有好处。 写一个函数，尽可能高效的，从一个标准 url 里取出文件的扩展名例如: http://www.sina.com.cn/abc/de/fg.php?id=1 需要取出 php 或 .php方法1：1234567function getExt($url)&#123; $arr = parse_url($url); $file = basename($arr['path']); $ext = explode(".", $file); return $ext[1];&#125;echo getExt('http://www.sina.com.cn/abc/de/fg.php?id=1'); 方法2：123456789101112function getExt($url) &#123; $url = basename($url); $pos1 = strpos($url, "."); $pos2 = strpos($url, "?"); $length = $pos2 - $pos1 - 1; if(strstr($url, "?"))&#123; return substr($url, $pos1 + 1, $length); &#125; else &#123; return substr($url, $pos1); &#125;&#125;echo getExt('http://www.sina.com.cn/abc/de/fg.php?id=1'); 使用五种以上方式获取一个文件的扩展名要求：dir/upload.image.jpg，找出 .jpg 或者 jpg ，必须使用PHP自带的处理函数进行处理，方法不能明显重复，可以封装成函数，比如 get_ext1($file_name), get_ext2($file_name) 12345$file_name = 'dir/upload.image.jpg';function get_ext1($file_name)&#123; return strrchr($file_name, '.');&#125;echo get_ext1($file_name); 12345$file_name = 'dir/upload.image.jpg';function get_ext2($file_name)&#123; return substr( $file_name, strrpos($file_name, '.') );&#125;echo get_ext2($file_name); 1234567$file_name = 'dir/upload/image.jpg';function get_ext3($file_name)&#123; $stack = explode('.', $file_name); $fruit = array_pop($stack); return $fruit;&#125;echo get_ext3($file_name); 123456$file_name = 'dir/upload/image.jpg';function get_ext4($file_name)&#123; $p = pathinfo($file_name); return $p['extension'];&#125;echo get_ext4($file_name); 1234567$file_name = 'dir/upload/image.jpg';function get_ext5($file_name)&#123;return strrev(substr(strrev($file_name), 0, strpos(strrev($file_name), '.')));&#125;echo get_ext5($file_name); 输出以下值1234567891011121314$str1 = null;$str2 = false;echo $str1==$str2 ? '相等' : '不相等';//输出相等$str3 = '';$str4 = 0;echo $str3==$str4 ? '相等' : '不相等';//输出相等$str5 = 0;$str6 = '0';echo $str5===$str6 ? '相等' : '不相等';//输出不相等 MySQL数据库中的字段类型varchar和char的主要区别是什么?那种字段的查找效率要高，为什么?varchar是变长，节省存储空间，char是固定长度。查找效率要char型快，因为varchar是非定长，必须先查找长度，然后进行数据的提取，比char定长类型多了一个步骤，所以效率低一些 写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）MyISAM、InnoDB、BDB（Berkeley DB）、Merge、Memory（Heap）、Example、Federated、Archive、CSV、Blackhole、MaxDB 等等十几个引擎 求两个日期的差数，例如2007-2-5 ~ 2007-3-6 的日期差数1234567function get_days($date1, $date2)&#123; $time1 = strtotime($date1); $time2 = strtotime($date2); return abs($time2-$time1)/86400;&#125;echo get_days('2007-2-5', '2007-2-6'); 请写一个函数，实现以下功能：字符串”open_door” 转换成 “OpenDoor”、”make_by_id” 转换成 “MakeById”方法一：1234567function str_explode($str)&#123; $str_arr=explode("_",$str); $str_implode=implode(" ", $str_arr); $str_implode=implode("", explode(" ",ucwords($str_implode))); return $str_implode;&#125;echo str_explode('open_door'); 方法二：123456$str = 'open_door';$expStr = explode("_", $str);for($i = 0; $i &lt; count($expStr); $i++)&#123; echo ucwords($expStr[$i]);&#125; 方法三：1echo str_replace(' ', '', ucwords( str_replace('_', ' ', 'open_door') ) ); echo count(“abc”); 输出什么?答案：1说明：count — 计算数组中的单元数目或对象中的属性个数int count ( mixed$var [, int $mode ] ), 如果 var 不是数组类型或者实现了 Countable 接口的对象，将返回1，有一个例外，如果 var 是 NULL 则结果是 0。 对于对象，如果安装了 SPL，可以通过实现 Countable 接口来调用 count()。该接口只有一个方法 count()，此方法返回 count() 函数的返回值。 有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）1234567891011121314151617181920212223242526function BubbleSort(&amp;$arr)&#123; $cnt = count($arr); $flag = 1; for($i = 0; $i &lt; $cnt; $i++) &#123; if($flag == 0) &#123; return; &#125; $flag = 0; for($j = 0;$j &lt; $cnt-$i-1; $j++) &#123; if($arr[$j] &gt; $arr[$j+1]) &#123; $tmp = $arr[$j]; $arr[$j] = $arr[$j+1]; $arr[$j+1] = $tmp; $flag = 1; &#125; &#125; &#125;&#125;$test=array(1,3,6,8,2,7);BubbleSort($test);var_dump($test); 请举例说明在你的开发过程中用什么方法来加快页面的加载速度答：要用到服务器资源时才打开，及时关闭服务器资源，数据库添加索引，页面可生成静态，图片等大文件单独服务器。使用代码优化工具 HTTP协议中GET、POST和HEAD的区别?HEAD： 只请求页面的首部。 GET： 请求指定的页面信息，并返回实体主体。 POST： 请求服务器接受所指定的文档作为对所标识的URI的新的从属实体。 （1）HTTP 定义了与服务器交互的不同方法，最基本的方法是 GET 和 POST。事实上 GET 适用于多数请求，而保留 POST 仅用于更新站点。 （2）在FORM提交的时候，如果不指定Method，则默认为GET请 求，Form中提交的数据将会附加在url之后，以?分开与url分开。字母数字字符原样发送，但空格转换为“+“号，其它符号转换为%XX,其中XX为 该符号以16进制表示的ASCII（或ISO Latin-1）值。GET请求请提交的数据放置在HTTP请求协议头中，而POST提交的数据则放在实体数据中； GET方式提交的数据最多只能有1024字节，而POST则没有此限制。 （3）GET 这个是浏览器用语向服务器请求最常用的方法。POST这个方法也是用来传送数据的，但是与GET不同的是，使用POST的时候，数据不是附在URI后面传递的，而是要做为独立的行来传递，此时还必须要发送一个Content_length标题，以标明数据长度，随后一个空白行，然后就是实际传送的数据。网页的表单通常是用POST来传送的。 Cookie和session的区别，禁止了cookie后session能正常使用吗?session的缺点是什么?session在服务器端是存在哪里的?是共有的还是私有的?答：COOKIE保存在客户端，用户通过手段可以进行修改，不安全，单个cookie允许的最大值是3k。 而SESSION保存在服务器端，相对比较安全，大小没有限制。 Session依赖于cookie进行传递。 禁用了cookie之后session不能正常使用。 Session的缺点：保存在服务器端，每次读取都从服务器进行读取，对服务器有资源消耗。 Session保存在服务器端的文件或数据库中，默认保存在文件中，文件路径由php配置文件的session.save_path指定。 Session文件是公有的。 写几个魔术方法并说明作用?__call()当调用不存在的方法时会自动调用的方法 __autoload()在实例化一个尚未被定义的类是会自动调用次方法来加载类文件 __set()当给未定义的变量赋值时会自动调用的方法 __get()当获取未定义变量的值时会自动调用的方法 __construct()构造方法，实例化类时自动调用的方法 __destroy()销毁对象时自动调用的方法 __unset()当对一个未定义变量调用unset()时自动调用的方法 __isset()当对一个未定义变量调用isset()方法时自动调用的方法 __clone()克隆一个对象 __tostring()当输出一个对象时自动调用的方法 数组中下标最好是什么类型的，为什么?数组的下标最好是数字类型的，数字类型的处理速度快 ++i和i++哪一个效率高，为什么?++i效率比i++的效率更高，因为++i少了一个返回i的过程。 echo()、print()、print_r()的区别?echo 是php语法，可以输出多个变量，不能输出数组。 Print()是php中的函数，只能输出简单的变量。 Print_r()是php中的函数，可以输出变量也可以输出数组。 框架中什么是单一入口和多入口，单一入口的优缺点?1、多入口就是通过访问不同的文件来完成用户请求。单一入口只web程序所有的请求都指向一个脚本文件的。2、单一入口更容易控制权限，方便对http请求可以进行安全性检查。缺点：URL看起来不那么美观，特别是对搜索引擎来说不友好。 提示类型200、404、502是什么意思。200是请求成功，404是文件未找到，502是服务器内部错误。 你对Memcach的理解，优点有哪些?Memcache是一种缓存技术，在一定的时间内将动态网页经过解析之后保存到文件，下次访问时动态网页就直接调用这个文件，而不必在重新访问数据库。使用memcache做缓存的好处是：提高网站的访问速度，减轻高并发时服务器的压力。 Memcache的优点：稳定、配置简单、多机分布式存储、速度快。 对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题:a) 索引的目的是什么? b) 索引对数据库系统的负面影响是什么? c) 为数据表建立索引的原则有哪些? d) 什么情况下不宜建立索引? 答：索引的目的： 1、快速访问数据表中的特定信息，提高检索速度 2、创建唯一性索引，保证数据库表中每一行数据的唯一性 3、加速表和表之间的连接 4、使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间 负面影响：创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改的时候索引也要动态维护，这样就降低了数据的维护速度。 建立索引的原则： 1、在最频繁使用的、用以缩小查询范围的字段上建立索引 2、在平频繁使用的、需要排序的字段上建立索引 什么情况下不宜建立索引： 1、对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引 2、对于一些特殊的数据类型，不宜建立索引，比如文本字段(text)等。 web应用中,数据库的读取频率远高于写入频率, 如何优化MySQL而应对此种情景 ?使用memcache缓存技术，将动态数据缓存到文件，访问动态页面时直接调用缓存文件，而不必重新访问数据库，这样就减少了查询数据库的次数。 如果网站的访问量很大，可以把数据库读写服务器分开，使用多态服务器去处理数据库查询，使用较少的服务器去处理数据库的写入和修改。 include与require的区别?Php在遇到include时就重新解释一次，如果一个页面中出现10次include，php就重新解释10次，而php遇到require时只解释一次，即使页面中出现多次require，php也直解释一次。 使用require包含文件时，被包含的文件当成了当前文件的一个组成部分，如果被包含的文件中有语法错误或者文件不存在，程序就提示错误信息，并结束执行。 使用include包含文件时，相当于指定了文件的路径，被包含的文件中有语法错误或者文件不存在时，页面只是给出警告信息，不响应程序本身的执行。 PHP字符串中单引号与双引号的区别?单引号不能解释变量，而双引号可以解释变量。单引号不能转义字符，在双引号中可以转义字符。 php中,模板引擎的目的是什么? 你用过哪些模板引擎?使用模板引擎的目的是使程序的逻辑代码和html界面代码分离开，是程序的结构更清晰。使用过的模板引擎：Smarty、ThinkPHP的ThinkTemplate 指出以下代码片段中的SQL注入漏洞以及解决方法(magic_quotes_gpc = off)1mysql_query("select id,title from content where catid='&#123;$_GET[catid]&#125;' and title like '%$_GET[keywords]%'", $link); 注入漏洞主要存在用户提交的数据上，这里的注入漏洞主要是$_GET[catid]和$_GET[keyword] 解决注入漏洞：1234567$_GET[catid]=intval($_GET[catid]);$sql="select id,title from content where catid='&#123;$_GET[catid]&#125;' and title like '%$_GET[keywords]%";$sql=addslashes($sql);mysql_query($sql); MyISAM 和 InnoDB 的基本区别?MYISAM不支持外键和事务处理，采用表锁机制，查询速度稍快，数据存储文件有3个，InnoDB支持外键和事务处理，采用行锁机制，查询速度比MYISAM稍慢，数据存储文件只有一个。 写出匹配URL的正则表达式./^http:\/\/www.([\w]+).([\w]+)$/ 写一个函数实现字符串翻转方法一：strrev(‘abcdef’);方法二：12345678910function str($a)&#123; $len = strlen($a); $b = ""; for($i = $len-1; $i &gt;= 0; $i--) &#123; $b .= $a[$i]; &#125; return $b;&#125;echo str('abcdef'); 不断在文件hello.txt头部写入一行“Hello World”字符串，要求代码完整1234567891011$fp=fopen('hello.txt', 'r');$str='hello!'."\n";$str.=fread($fp, filesize('./hello.txt'));fclose($fp);$fp1=fopen('hello.txt', 'w');fwrite($fp1, $str);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[搭建SVN服务器]]></title>
      <url>%2F2017%2F02%2F26%2Fserver-build-svn%2F</url>
      <content type="text"><![CDATA[在 Centos5.5 上搭建SVN服务器并实现自动同步至web目录。 一、搭建svn环境并创建仓库：安装Subversion1yum install -y subversion 检测是否安装成功(查看svn版本号)1svnserve --version 创建版本库（没有规定在哪创建目录）12345mkdir /home/svn //先建目录cd /home/svn //进入目录svnadmin create /home/svn/test //创建版本库cd test //进入创建的版本库ls //会看到自动生成的版本库文件（如下图） 创建用户组及用户进入版本库中的配置目录conf 修改权限配置文件1vim authz 配置用户名命令文件1vim passwd 配置SVN服务综合配置文件1vim svnserve.conf //找到以下配置项，将前面的#号去掉（注意：所有配置项前面不能留空格），然后做相应的配置anon-access = none //匿名用户访问权限:无auth-access = write //普通用户访问权限:写password-db = passwd //密码文件authz-db = authz //权限配置文件realm = /home/svn/test //版本库所在 启动svn服务1svnserve -d -r /home/svn 如果提示：svnserve: E000098: Can’t bind server socket: Address already in use证明现在svn已经被启动了，由于我们修改了配置文件，因此要重启svn服务，所以要先关闭svn再重启svn 查看svn服务详情（如下图所示）1ps aux|grep svn 将svn服务强制停止 其中790为svn服务的ID号，-9是kill的参数1kill -9 790 最后再重新运行 svnserve -d -r /var/svn 测试有没有成功123cd /wwwmkdir testsvn co svn://localhost/test /www/test --username vonfly(SVN账号) --password vonfly(SVN密码) 如果提示：Checked out revision 0.表示checkout成功 本地拉取、推送（本地要先安装SVN客户端）输入远程链接：svn://服务器iP地址/test，再输入用户名和密码即可链接 本地commit时自动同步到web目录实现本地更新同步到服务器项目：配置项目仓库的钩子配置,可以把钩子看成是WEB项目于SVN项目仓库之间的一个关联，通过向SVN项目仓库提交脚本代码，利用钩子shell脚本可以自动向web项目中将脚本文件更新过去 进入/var/svn/project/hooks下，建立post-commit文件12cd /var/svn/project/hooksvim post-commit 在该文件里添加如下代码： #!/bin/shexport LANG=zh_CN.UTF-8SVN_PATH=/usr/bin/svn //这里不用改WEB_PATH=/www/test //对应自己web目录//这里的用户随便一个就好$SVN_PATH update $WEB_PATH –username ‘vonfly’ –password ‘vonfly’ –no-auth-cache 给post-commit 执行权限1chmod 755 post-commit]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Sublime使用技巧]]></title>
      <url>%2F2017%2F02%2F17%2Fsublime%2F</url>
      <content type="text"><![CDATA[sublime使用技巧，平时用的时候觉得不错的功能就会把它分享给大家(●’◡’●) sublime右键快捷方式添加window下，开始-&gt;运行-&gt;regedit到 HKEY_CLASSES_ROOT*\shell目录下新建sublime(随便你起什么名字)再到新建好的sublime目录下新建command(固定名字) 最后的目录结构【HKEY_CLASSES_ROOT*\shell\sublime\command】 第一个双引号是你的软件安装目录“E:\Sublime Text 3 Build 3103 x64 Portable Cracked (2016.02.11)\sublime_text.exe” -p –remote-tab-silent “%1” window如何查看软件安装目录，如下图说明： 选中上一步建好的文件command，然后双击右边的默认，把上边的内容复制进去即可。如下图说明 随便找个文件sublime能够识别的文件，鼠标右击就可以看到刚刚添加的快捷键了，可以直接打开 Sublime text 2/3 中 Package Control 的安装与使用方法从菜单 View - Show Console 或者 ctrl + ~ 快捷键，调出 console。将以下 Python 代码粘贴进去并 enter 执行，不出意外即完成安装。以下提供 ST3 和 ST2 的安装代码： Sublime Text 3：1import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) Sublime Text 2：1import urllib2,os; pf='Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), 'wb' ).write( urllib2.urlopen( 'http://sublime.wbond.net/' +pf.replace( ' ','%20' )).read()); print( 'Please restart Sublime Text to finish installation') 常用的一些插件：AdvancedNewFile 快速创建新文件Better Completion 全能代码提示(需要自己配置一下插件，需要提示的库)CodeFormatter 代码格式化ConverToUTF8 支持 GBK, BIG5, EUC-KR, EUC-JP, Shift_JIS 等编码的插件DocBlockr 代码块注释EmmetFile Header 自动更新保存时间，文件模板Side BarMonokai Extended 主题配置SideBarEnhancements 增强型侧边栏]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[收集、总结的一些理论知识（对于面试有帮助）]]></title>
      <url>%2F2017%2F02%2F09%2Ftheoretical-knowledge%2F</url>
      <content type="text"><![CDATA[本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。为什么要写这个页面呢？一来自己的理论知识相对比较薄弱，每次面试的时候，有很多理论知识都回答不上，所以要加深巩固自己的理论知识。二来自己写一遍或者抄一遍总会有点印象，对以后的工作多多少少会有点帮助(●’◡’●) javascript理论知识xml与json区别相同点： 都是一种通用协议 都可以用来描述数据 不同点： JSON相对于XML来讲，数据的体积小，传递的速度更快些。 xml专用带宽大，json占用带宽小 json没有xml这么通用 json可以和js对象互相转换，和js是天生的一对，因此广泛用于前端开发]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[初识gulp]]></title>
      <url>%2F2016%2F11%2F02%2Fgulp%2F</url>
      <content type="text"><![CDATA[初识gulp自动化构建工具。一开始只是听过这个东西，没有尝试用过。听起来好像很高大上的样子，一直想要去尝试用一下，但一直没有去用过。一来现在的项目没有用到；二来之前好像确实是挺忙的，没有找到什么合适的时间去尝试用下；三来嘛感觉这么高大上的东西可能学起来应该会很难，会花费很多时间。ps：很多事情只有去尝试了才会知道难不难，很多东西你觉得难可能是因为你没有用过它，或者不知道它是用来做什么的，只有你勇敢的踏出一步去尝试用下，你就会发现其实没有那么难。(●’◡’●) 介绍通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。 入门指南 全局安装 gulp： 1$ npm install --global gulp 作为项目的开发依赖（devDependencies）安装： 1$ npm install --save-dev gulp 在项目根目录下创建一个名为 gulpfile.js 的文件：var gulp = require(‘gulp’); gulp.task(‘default’, function() { // 将你的默认的任务代码放在这}); 运行 gulp：1$ gulp default 常用的一些插件 gulp-minify-css 压缩css gulp-uglify 压缩js gulp-htmlmin 压缩html gulp-imagemin 压缩图片安装1$ npm install [plugins-name] --save 上述命令安装插件的同时也会把插件作为项目依赖写入package.json文件. 参考：guly官网(包含插件搜索)guly中文网站]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一些常用的git-commands]]></title>
      <url>%2F2016%2F06%2F18%2Fgit-commands%2F</url>
      <content type="text"><![CDATA[常用的一些git命令以及平时项目遇到的一些问题解决方法 git一些命令在当前目录新建一个Git代码库1$ git init 新建一个目录，将其初始化为Git代码库 1$ git init [project-name] 下载一个项目和它的整个代码历史 1$ git clone [url] 增加/删除文件添加指定文件到暂存区1$ git add [file1] [file2] ... 添加指定目录到暂存区，包括子目录1$ git add [dir] 将所有修改过的工作文件提交暂存区1$ add . 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交1$ git add -p 删除暂存区文件1$ git rm file.name (工作区和暂存区都存在的情况下)删除工作区文件，同时删除暂存区文件1$ git rm -f file.name (工作区和暂存区都存在的情况下)不删除工作区文件，删除暂存区文件1$ git rm --cached file.name 改名文件，并且将这个改名放入暂存区1$ git mv [file-original] [file-renamed] 代码提交提交暂存区到仓库区（提交说明要用英文引号）1$ git commit -m [提交说明] 提交暂存区到仓库区1$ git commit [file1] [file2] ... -m [提交说明] 分支列出所有本地分支1$ git branch 列出所有远程分支1$ git branch -r 列出所有本地分支和远程分支1$ git branch -a 新建一个分支，但依然停留在当前分支1$ git branch [branch-name] 新建一个分支，并切换到该分支1$ git checkout -b [branch] 新建一个分支，指向指定commit1$ git branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系1$ git branch --track [branch] [remote-branch] 切换到指定分支，并更新工作区1$ git checkout [branch-name] 切换到上一个分支1$ git checkout - 建立追踪关系，在现有分支与指定的远程分支之间1$ git branch --set-upstream [branch] [remote-branch] 合并指定分支到当前分支1$ git merge [branch] 选择一个commit，合并进当前分支1$ git cherry-pick [commit] 删除分支1$ git branch -d [branch-name] 删除远程分支12$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 查看信息显示有变更的文件1$ git status 显示当前分支的版本历史1$ git log 显示之后版本历史1$ git reflog 显示commit历史，以及每次commit发生变更的文件1$ git log --stat 搜索提交历史，根据关键词1$ git log -S [keyword] 显示某个文件的版本历史，包括文件改名12$ git log --follow [file]$ git whatchanged [file] 显示指定文件相关的每一次diff1$ git log -p [file] 显示过去5次提交1$ git log -5 --pretty --oneline 显示指定文件是什么人在什么时间修改过1$ git blame [file] 显示暂存区和工作区的差异1$ git diff 显示暂存区和上一个commit的差异1$ git diff --cached [file] 显示工作区与当前分支最新commit之间的差异1$ git diff HEAD 显示两次提交之间的差异1$ git diff [first-branch]...[second-branch] 远程同步下载远程仓库的所有变动1$ git fetch [remote] 显示所有远程仓库1$ git remote -v 显示某个远程仓库的信息1$ git remote show [remote] 增加一个新的远程仓库，并命名1$ git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并1$ git pull [remote] [branch] 上传本地指定分支到远程仓库1$ git push [remote] [branch] 推送所有分支到远程仓库1$ git push [remote] --all 撤销恢复暂存区的指定文件到工作区1$ git checkout [file] 恢复某个commit的指定文件到暂存区和工作区1$ git checkout [commit] [file] 恢复暂存区的所有文件到工作区1$ git checkout . 整个版本的撤销重置暂存区的指定文件，与上一次commit保持一致，但工作区不变1$ git reset [file] 重置暂存区与工作区，与上一次commit保持一致1$ git reset --hard [commit] 显示当前的Git配置1$ git config --list 编辑Git配置文件1$ git config -e [--global] 设置提交代码时的用户信息12$ git config [--global] user.name "your username"$ git config [--global] user.email "your e-mail" 扩展多人协作解决冲突推荐方法1：123$ git fetch$ git diff master origin/master$ git merge orgin/master 方法2：1$ git pull 参考：阮一峰-常用 Git 命令清单]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[多台电脑共同管理hexo博客]]></title>
      <url>%2F2016%2F02%2F18%2Fhexo-version-control%2F</url>
      <content type="text"><![CDATA[使用hexo搭建博客，如果换了电脑怎么更新博客？如果你有备份源文件那还好，但是每次都要备份感觉太麻烦了。这里介绍一种方法就是使用github分支。一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。网上也有其他的方法，大家可以去搜一下，自己看看哪种适合自己，我用这种方法一方面我git命令也不太熟，所以想多写写，多学学。 先删除主题文件下的.git文件，可以直接删除或者执行下面的命令 1$ rm -rf .git 然后在本地博客文件夹下边依次输入以下指令(部分指令因为有提示可以自己修改下) 123456$ git init$ git checkout -b hexo$ git remote add origin git@github.com:vonfly（你自己giuhub账号名）/vonfly.github.io（项目名）.git$ git add .$ git commit -m "提交说明"$ git push origin hexo 执行到这里我们就已经把本地的源文件添加到了分支hexo上。 说明：博客文件夹下根目录.gitignore（此文件的作用是因此忽略所写的文件或者目录，加快push速度。）可以不修改，我的就没有修改，如果不修改的话在；另外一台电脑上克隆下来的博客项目就要先运行一下命令 1$ npm install 我的.gitignore文件内容为.DS_StoreThumbs.dbdb.json.lognode_modules/public/.deploy/ 当然你也可以把node_modules/去掉，这样在另外的电脑克隆下来的项目就不用在运行上面的命令了 扩展： github常见操作和常见错误！如果输入$ git remote add origin git@github.com:vonfly（github帐号名）/vonfly.github.io（项目名）.git提示出错信息：fatal: remote origin already exists. 解决办法如下： 1、先输入$ git remote rm origin 2、再输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git 就不会报错了！ 如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc5、找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！ 如果输入$ git push origin master提示出错信息：error:failed to push som refs to …….解决办法如下： 1、先输入$ git pull origin master //先把远程服务器github上面的文件拉下来 2、再输入$ git push origin master 3、如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository. 4、则需要重新输入$ git remote add origin git@github.com:vonfly/vonfly.github.io.git]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[常用的一些命令]]></title>
      <url>%2F2016%2F02%2F16%2Fcommon-commands%2F</url>
      <content type="text"><![CDATA[平时写博客会用到的一些命令 hexo命令init 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。1$ hexo init [folder] new 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。1$ hexo new [layout] &lt;title&gt; generate 生成网站(即生成静态文件)1$ hexo generate 参数说明 选项 描述 -d, –deploy 文件生成后立即部署网站 -w, –watch 监视文件变动 server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。1$ hexo server 参数说明 选项 描述 -p, –port 重设端口 -s, –static 只使用静态文件 -l, –log 启动日志记录，使用覆盖记录格式 deploy 部署网站。1$ hexo deploy 参数说明 选项 描述 -g, –generate 部署之前预先生成静态文件 clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。1$ hexo clean version 显示 Hexo 版本。1$ hexo version 安装 Hexo Algolia 扩展（用于页面搜索）1$ npm install hexo-algolia@0.2.0 来更新 Index（相当于把博客下的文章更新到algolia数据库）1$ hexo algolia]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[markdown语法-本页面主要用于自己学习]]></title>
      <url>%2F2016%2F02%2F07%2Fmarkdown-grammar%2F</url>
      <content type="text"><![CDATA[本页面主要用于自己学习的，方便以后写作。当然了，偶尔忘记可以查看一下，文章最底下也有链接，大家可以查看链接的语法说明(●’◡’●) 欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。 参考：Cmd Markdown 编辑阅读器Markdown 语法说明 (简体中文版)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GitHub+Hexo+Next搭建免费独立个人博客]]></title>
      <url>%2F2016%2F01%2F22%2Fhello-world%2F</url>
      <content type="text"><![CDATA[我为什么要搭建个人博客呢，一来有自己的博客会显得高大尚一点，二来也可以当作学习新知识 搭建步骤node.js Git 是必须工具 安装Git前往Git官网下载Windows版本压缩包，下载完成后解压安装。（一直下一步即可） 当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：在命令行中输入：12$ git config --global user.name "your username"$ git config --global user.email "your e-mail" 重申一遍，你只需要做一次这个设置。如果你传递了 –global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。 安装Node.js前往Node.js官方下载网站，选择适合自己系统的进行下载，下载完成后同样解压安装。（一直下一步即可） 注册Github账户前往Github网站，注册一个新用户。创建一个新的repository 在自己的Github主页右上角的加号,创建一个新的repository。比如我的Github用户名为vonfly，那么我创建的repository的名字应该是 vonfly.github.io 给本机配置SSH-Key打开Git Bash，在命令行中输入： 1$ ssh-keygen -t rsa -C "your e-mail" 之后一直回车，就可以了成功之后在命令行中找到这两段Your identification has been saved in /c/Users/XZY-06/.ssh/id_rsa.Your public key has been saved in /c/Users/XZY-06/.ssh/id_rsa.pub.打开所对应的文件夹，找到 id_rsa.pub文件，用编辑器打开，复制其中的全部内容。登陆你的GitHub账户，依次点击账号Settings &gt; SSH and GPG keys &gt; new SSH key，把id_rsa.pub中的内容拷贝进去key项，title项随意填 。 至此就已经配置完SSH-Key了 安装Hexo（安装需要花一些时间）点击鼠标右键，看是否有Git bash Here选项。如果没有可以前往Git安装根目录，启动git-base.exe也可以。在命令行中输入： 1$ npm install -g hexo-cli 创建myblog文件夹找到想要放置博客的文件夹，比如（F:\myblog），在该目录下鼠标右击打开Gitbash工具。在命令行中输入： 1$ hexo init 这里init后面可以跟文件目录，比如我想在F:\text下创建博客文件夹，那么可以用下面的命令： 1$ hexo init F:\text 安装依赖包在myblog目录下，执行以下命令 1$ npm install 安装完后的目录结构123456├── _config.yml //网站的配置信息（也就是站点配置文件）├── package.json //应用程序数据，指明hexo的版本等信息├── scaffolds //模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。├── source //文章源码目录，该目录下的markdown和html文件均会被hexo处理。| ├── _posts //新建的文章都将存放在此目录下。编辑&lt;文件名&gt;.md文件可修改内容。└── themes //主题文件夹。Hexo会根据主题来生成静态页面。 本地调试（在myblog目录下，依次执行以下命令）1.生成网站1$ hexo generate 2.本地服务器1$ hexo server 然后在浏览器中输入 localhost:4000 就可以看到自己的博客了如果打开很慢或者打开不了，可以更改下端口1$ hexo server -p 3000 重新在浏览器中输入 localhost:3000即可，至此我们已经搭建好自己的Hexo博客了，不过博客采用的主题是默认的主题，而我们要使用简洁优雅且易于使用NexT主题 Next主题1.下载Next主题（下载需要一点时间）在myblog目录下，执行以下命令 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 2.启用Next主题下载完成后，打开站点配置文件(即更目录下的_config.yml)，找到theme字段，并将其值更改为 next。再重新执行本地调试那一步骤的命令查看效果即可 将本地的文件部署（上传）到Github账户中打开站点配置文件(即更目录下的_config.yml)，在最后添加如下代码（在你修改时，把 repository更换成之前步骤创建新的repository仓库地址） 1234deploy: type: git repository: https://github.com/vonfly/vonfly.github.io.git branch: master 执行以下指令即可完成部署（如果提示错误，可以看下面出错原因及解决方法）： 12$ hexo generate$ hexo deploy 1.每次修改本地文件，都需要命令$ hexo generate才能保存。而且每次使用命令都必须在myblog根目录下使用。 2.如果你在执行$ hexo deloy,如果提示 ERROR Deployer not found: git，那说明你没有安装hexo-deployer-git依赖包，进入F:\Hexo\node_modules发现真的没有hexo-deployer-git。解决方法：①只需要输入下面命令创建hexo-deployer-git依赖包 1$ npm install hexo-deployer-git --save ②然后再执行hexo deploy就能上传成功了1$ hexo deploy 直接在浏览器访问vonfly.github.io试试 博客安装和主题配置参考：hexo官网next主题官网]]></content>
    </entry>

    
  
  
</search>
